
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002f84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002f84  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008aeb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018eb  00000000  00000000  00028b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0002a410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  0002aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f145  00000000  00000000  0002b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bc6  00000000  00000000  0003a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059015  00000000  00000000  00043da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009cdb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000154c  00000000  00000000  0009ce08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f1c 	.word	0x08002f1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f1c 	.word	0x08002f1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_DMA_Init+0x38>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_DMA_Init+0x38>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_DMA_Init+0x38>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	2201      	movs	r2, #1
 8000238:	4013      	ands	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fb80 	bl	8000948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fb92 	bl	8000972 <HAL_NVIC_EnableIRQ>

}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b089      	sub	sp, #36	; 0x24
 8000260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	240c      	movs	r4, #12
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 fe4d 	bl	8002f0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000272:	4b24      	ldr	r3, [pc, #144]	; (8000304 <MX_GPIO_Init+0xa8>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <MX_GPIO_Init+0xa8>)
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	0309      	lsls	r1, r1, #12
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <MX_GPIO_Init+0xa8>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	031b      	lsls	r3, r3, #12
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <MX_GPIO_Init+0xa8>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <MX_GPIO_Init+0xa8>)
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	03c9      	lsls	r1, r1, #15
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <MX_GPIO_Init+0xa8>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	03db      	lsls	r3, r3, #15
 80002a4:	4013      	ands	r3, r2
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <MX_GPIO_Init+0xa8>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_GPIO_Init+0xa8>)
 80002b0:	2180      	movs	r1, #128	; 0x80
 80002b2:	0289      	lsls	r1, r1, #10
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_GPIO_Init+0xa8>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	029b      	lsls	r3, r3, #10
 80002c0:	4013      	ands	r3, r2
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	019b      	lsls	r3, r3, #6
 80002ca:	480f      	ldr	r0, [pc, #60]	; (8000308 <MX_GPIO_Init+0xac>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	0019      	movs	r1, r3
 80002d0:	f000 fef2 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Pin;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0192      	lsls	r2, r2, #6
 80002da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2201      	movs	r2, #1
 80002e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <MX_GPIO_Init+0xac>)
 80002f2:	0019      	movs	r1, r3
 80002f4:	0010      	movs	r0, r2
 80002f6:	f000 fd6f 	bl	8000dd8 <HAL_GPIO_Init>

}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b009      	add	sp, #36	; 0x24
 8000300:	bd90      	pop	{r4, r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	40021000 	.word	0x40021000
 8000308:	48000800 	.word	0x48000800

0800030c <HAL_UART_RxCpltCallback>:

#define RX_BUFFER_SIZE 10
char rxBuffer[RX_BUFFER_SIZE];


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <HAL_UART_RxCpltCallback+0x38>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d10d      	bne.n	800033a <HAL_UART_RxCpltCallback+0x2e>
	  HAL_UART_Transmit(&huart1,(uint8_t *)rxBuffer,RX_BUFFER_SIZE,HAL_MAX_DELAY);
 800031e:	2301      	movs	r3, #1
 8000320:	425b      	negs	r3, r3
 8000322:	4909      	ldr	r1, [pc, #36]	; (8000348 <HAL_UART_RxCpltCallback+0x3c>)
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_UART_RxCpltCallback+0x40>)
 8000326:	220a      	movs	r2, #10
 8000328:	f001 fc7e 	bl	8001c28 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"\r\n",1,HAL_MAX_DELAY);
 800032c:	2301      	movs	r3, #1
 800032e:	425b      	negs	r3, r3
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <HAL_UART_RxCpltCallback+0x44>)
 8000332:	4806      	ldr	r0, [pc, #24]	; (800034c <HAL_UART_RxCpltCallback+0x40>)
 8000334:	2201      	movs	r2, #1
 8000336:	f001 fc77 	bl	8001c28 <HAL_UART_Transmit>
  }
}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b002      	add	sp, #8
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	40013800 	.word	0x40013800
 8000348:	20000028 	.word	0x20000028
 800034c:	20000034 	.word	0x20000034
 8000350:	08002f34 	.word	0x08002f34

08000354 <main>:

void SystemClock_Config(void);

int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

  HAL_Init();
 8000358:	f000 f9c2 	bl	80006e0 <HAL_Init>


  SystemClock_Config();
 800035c:	f000 f826 	bl	80003ac <SystemClock_Config>


  MX_GPIO_Init();
 8000360:	f7ff ff7c 	bl	800025c <MX_GPIO_Init>
  MX_DMA_Init();
 8000364:	f7ff ff5c 	bl	8000220 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000368:	f000 f8e0 	bl	800052c <MX_USART1_UART_Init>

  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	019b      	lsls	r3, r3, #6
 8000370:	480b      	ldr	r0, [pc, #44]	; (80003a0 <main+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	0019      	movs	r1, r3
 8000376:	f000 fe9f 	bl	80010b8 <HAL_GPIO_WritePin>

  HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 800037a:	490a      	ldr	r1, [pc, #40]	; (80003a4 <main+0x50>)
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <main+0x54>)
 800037e:	220a      	movs	r2, #10
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fcf1 	bl	8001d68 <HAL_UART_Receive_DMA>

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, Led_Pin);
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	019b      	lsls	r3, r3, #6
 800038a:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <main+0x4c>)
 800038c:	0019      	movs	r1, r3
 800038e:	0010      	movs	r0, r2
 8000390:	f000 feaf 	bl	80010f2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000394:	23fa      	movs	r3, #250	; 0xfa
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fa05 	bl	80007a8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, Led_Pin);
 800039e:	e7f2      	b.n	8000386 <main+0x32>
 80003a0:	48000800 	.word	0x48000800
 80003a4:	20000028 	.word	0x20000028
 80003a8:	20000034 	.word	0x20000034

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b095      	sub	sp, #84	; 0x54
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	2420      	movs	r4, #32
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	0018      	movs	r0, r3
 80003b8:	2330      	movs	r3, #48	; 0x30
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f002 fda5 	bl	8002f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c2:	2310      	movs	r3, #16
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2310      	movs	r3, #16
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 fd9d 	bl	8002f0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d2:	003b      	movs	r3, r7
 80003d4:	0018      	movs	r0, r3
 80003d6:	2310      	movs	r3, #16
 80003d8:	001a      	movs	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	f002 fd96 	bl	8002f0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e0:	0021      	movs	r1, r4
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2201      	movs	r2, #1
 80003ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2210      	movs	r2, #16
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2202      	movs	r2, #2
 80003f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	22a0      	movs	r2, #160	; 0xa0
 8000404:	0392      	lsls	r2, r2, #14
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	187b      	adds	r3, r7, r1
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fe89 	bl	8001128 <HAL_RCC_OscConfig>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800041a:	f000 f828 	bl	800046e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	2110      	movs	r1, #16
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2202      	movs	r2, #2
 800042a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2101      	movs	r1, #1
 800043c:	0018      	movs	r0, r3
 800043e:	f001 f98d 	bl	800175c <HAL_RCC_ClockConfig>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000446:	f000 f812 	bl	800046e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800044a:	003b      	movs	r3, r7
 800044c:	2201      	movs	r2, #1
 800044e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000450:	003b      	movs	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000456:	003b      	movs	r3, r7
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fac3 	bl	80019e4 <HAL_RCCEx_PeriphCLKConfig>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000462:	f000 f804 	bl	800046e <Error_Handler>
  }
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b015      	add	sp, #84	; 0x54
 800046c:	bd90      	pop	{r4, r7, pc}

0800046e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000472:	b672      	cpsid	i
}
 8000474:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000476:	e7fe      	b.n	8000476 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x44>)
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <HAL_MspInit+0x44>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	619a      	str	r2, [r3, #24]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_MspInit+0x44>)
 8000498:	69da      	ldr	r2, [r3, #28]
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <HAL_MspInit+0x44>)
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	0549      	lsls	r1, r1, #21
 80004a0:	430a      	orrs	r2, r1
 80004a2:	61da      	str	r2, [r3, #28]
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_MspInit+0x44>)
 80004a6:	69da      	ldr	r2, [r3, #28]
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	055b      	lsls	r3, r3, #21
 80004ac:	4013      	ands	r3, r2
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e4:	f000 f944 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <DMA1_Channel2_3_IRQHandler+0x14>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fb83 	bl	8000c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	200000bc 	.word	0x200000bc

08000508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <USART1_IRQHandler+0x14>)
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fc82 	bl	8001e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	20000034 	.word	0x20000034

08000520 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <MX_USART1_UART_Init+0x5c>)
 8000534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000538:	22e1      	movs	r2, #225	; 0xe1
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART1_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART1_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART1_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <MX_USART1_UART_Init+0x58>)
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fb05 	bl	8001b80 <HAL_UART_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800057a:	f7ff ff78 	bl	800046e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000034 	.word	0x20000034
 8000588:	40013800 	.word	0x40013800

0800058c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	2414      	movs	r4, #20
 8000596:	193b      	adds	r3, r7, r4
 8000598:	0018      	movs	r0, r3
 800059a:	2314      	movs	r3, #20
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 fcb4 	bl	8002f0c <memset>
  if(uartHandle->Instance==USART1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a34      	ldr	r2, [pc, #208]	; (800067c <HAL_UART_MspInit+0xf0>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d161      	bne.n	8000672 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ae:	4b34      	ldr	r3, [pc, #208]	; (8000680 <HAL_UART_MspInit+0xf4>)
 80005b0:	699a      	ldr	r2, [r3, #24]
 80005b2:	4b33      	ldr	r3, [pc, #204]	; (8000680 <HAL_UART_MspInit+0xf4>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	01c9      	lsls	r1, r1, #7
 80005b8:	430a      	orrs	r2, r1
 80005ba:	619a      	str	r2, [r3, #24]
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <HAL_UART_MspInit+0xf4>)
 80005be:	699a      	ldr	r2, [r3, #24]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	01db      	lsls	r3, r3, #7
 80005c4:	4013      	ands	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <HAL_UART_MspInit+0xf4>)
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <HAL_UART_MspInit+0xf4>)
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0289      	lsls	r1, r1, #10
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <HAL_UART_MspInit+0xf4>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	029b      	lsls	r3, r3, #10
 80005e0:	4013      	ands	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	22c0      	movs	r2, #192	; 0xc0
 80005ea:	00d2      	lsls	r2, r2, #3
 80005ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2202      	movs	r2, #2
 80005f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2203      	movs	r2, #3
 8000600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	187a      	adds	r2, r7, r1
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fbe1 	bl	8000dd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_UART_MspInit+0xf8>)
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <HAL_UART_MspInit+0xfc>)
 800061a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <HAL_UART_MspInit+0xf8>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <HAL_UART_MspInit+0xf8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <HAL_UART_MspInit+0xf8>)
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_UART_MspInit+0xf8>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <HAL_UART_MspInit+0xf8>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_UART_MspInit+0xf8>)
 800063c:	2220      	movs	r2, #32
 800063e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <HAL_UART_MspInit+0xf8>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_UART_MspInit+0xf8>)
 8000648:	0018      	movs	r0, r3
 800064a:	f000 f9af 	bl	80009ac <HAL_DMA_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000652:	f7ff ff0c 	bl	800046e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <HAL_UART_MspInit+0xf8>)
 800065a:	675a      	str	r2, [r3, #116]	; 0x74
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_UART_MspInit+0xf8>)
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	201b      	movs	r0, #27
 8000668:	f000 f96e 	bl	8000948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800066c:	201b      	movs	r0, #27
 800066e:	f000 f980 	bl	8000972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b00b      	add	sp, #44	; 0x2c
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40013800 	.word	0x40013800
 8000680:	40021000 	.word	0x40021000
 8000684:	200000bc 	.word	0x200000bc
 8000688:	40020030 	.word	0x40020030

0800068c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000690:	f7ff ff46 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490d      	ldr	r1, [pc, #52]	; (80006cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0a      	ldr	r4, [pc, #40]	; (80006d8 <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ba:	f002 fc03 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fe49 	bl	8000354 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   r0, =_estack
 80006c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d0:	08002f78 	.word	0x08002f78
  ldr r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d8:	20000104 	.word	0x20000104

080006dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_IRQHandler>
	...

080006e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <HAL_Init+0x24>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_Init+0x24>)
 80006ea:	2110      	movs	r1, #16
 80006ec:	430a      	orrs	r2, r1
 80006ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f809 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f6:	f7ff febf 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_InitTick+0x5c>)
 8000712:	681c      	ldr	r4, [r3, #0]
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_InitTick+0x60>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	0019      	movs	r1, r3
 800071a:	23fa      	movs	r3, #250	; 0xfa
 800071c:	0098      	lsls	r0, r3, #2
 800071e:	f7ff fcf3 	bl	8000108 <__udivsi3>
 8000722:	0003      	movs	r3, r0
 8000724:	0019      	movs	r1, r3
 8000726:	0020      	movs	r0, r4
 8000728:	f7ff fcee 	bl	8000108 <__udivsi3>
 800072c:	0003      	movs	r3, r0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f92f 	bl	8000992 <HAL_SYSTICK_Config>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	e00f      	b.n	800075c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b03      	cmp	r3, #3
 8000740:	d80b      	bhi.n	800075a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	2200      	movs	r2, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f8fc 	bl	8000948 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_InitTick+0x64>)
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b003      	add	sp, #12
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000008 	.word	0x20000008
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	001a      	movs	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	18d2      	adds	r2, r2, r3
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <HAL_IncTick+0x20>)
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000008 	.word	0x20000008
 8000790:	20000100 	.word	0x20000100

08000794 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000100 	.word	0x20000100

080007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fff0 	bl	8000794 <HAL_GetTick>
 80007b4:	0003      	movs	r3, r0
 80007b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	001a      	movs	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	189b      	adds	r3, r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	f7ff ffe0 	bl	8000794 <HAL_GetTick>
 80007d4:	0002      	movs	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b004      	add	sp, #16
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000008 	.word	0x20000008

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b7f      	cmp	r3, #127	; 0x7f
 8000802:	d809      	bhi.n	8000818 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	231f      	movs	r3, #31
 800080c:	401a      	ands	r2, r3
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__NVIC_EnableIRQ+0x30>)
 8000810:	2101      	movs	r1, #1
 8000812:	4091      	lsls	r1, r2
 8000814:	000a      	movs	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
  }
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	e000e100 	.word	0xe000e100

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	0002      	movs	r2, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b7f      	cmp	r3, #127	; 0x7f
 8000838:	d828      	bhi.n	800088c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <__NVIC_SetPriority+0xd4>)
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25b      	sxtb	r3, r3
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	33c0      	adds	r3, #192	; 0xc0
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	589b      	ldr	r3, [r3, r2]
 800084a:	1dfa      	adds	r2, r7, #7
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	0011      	movs	r1, r2
 8000850:	2203      	movs	r2, #3
 8000852:	400a      	ands	r2, r1
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	21ff      	movs	r1, #255	; 0xff
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	43d2      	mvns	r2, r2
 800085e:	401a      	ands	r2, r3
 8000860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	401a      	ands	r2, r3
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	2303      	movs	r3, #3
 8000872:	4003      	ands	r3, r0
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	481f      	ldr	r0, [pc, #124]	; (80008f8 <__NVIC_SetPriority+0xd4>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	430a      	orrs	r2, r1
 8000884:	33c0      	adds	r3, #192	; 0xc0
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800088a:	e031      	b.n	80008f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <__NVIC_SetPriority+0xd8>)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0019      	movs	r1, r3
 8000894:	230f      	movs	r3, #15
 8000896:	400b      	ands	r3, r1
 8000898:	3b08      	subs	r3, #8
 800089a:	089b      	lsrs	r3, r3, #2
 800089c:	3306      	adds	r3, #6
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	3304      	adds	r3, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1dfa      	adds	r2, r7, #7
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	0011      	movs	r1, r2
 80008ac:	2203      	movs	r2, #3
 80008ae:	400a      	ands	r2, r1
 80008b0:	00d2      	lsls	r2, r2, #3
 80008b2:	21ff      	movs	r1, #255	; 0xff
 80008b4:	4091      	lsls	r1, r2
 80008b6:	000a      	movs	r2, r1
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	401a      	ands	r2, r3
 80008bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	401a      	ands	r2, r3
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	2303      	movs	r3, #3
 80008ce:	4003      	ands	r3, r0
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <__NVIC_SetPriority+0xd8>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	001c      	movs	r4, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	4023      	ands	r3, r4
 80008e0:	3b08      	subs	r3, #8
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	430a      	orrs	r2, r1
 80008e6:	3306      	adds	r3, #6
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	18c3      	adds	r3, r0, r3
 80008ec:	3304      	adds	r3, #4
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b003      	add	sp, #12
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	045b      	lsls	r3, r3, #17
 8000910:	429a      	cmp	r2, r3
 8000912:	d301      	bcc.n	8000918 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000914:	2301      	movs	r3, #1
 8000916:	e010      	b.n	800093a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <SysTick_Config+0x44>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	3a01      	subs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000920:	2301      	movs	r3, #1
 8000922:	425b      	negs	r3, r3
 8000924:	2103      	movs	r1, #3
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff ff7c 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x44>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x44>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	0018      	movs	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	210f      	movs	r1, #15
 8000954:	187b      	adds	r3, r7, r1
 8000956:	1c02      	adds	r2, r0, #0
 8000958:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	187b      	adds	r3, r7, r1
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff5d 	bl	8000824 <__NVIC_SetPriority>
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	0002      	movs	r2, r0
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b25b      	sxtb	r3, r3
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ff33 	bl	80007f0 <__NVIC_EnableIRQ>
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff ffaf 	bl	8000900 <SysTick_Config>
 80009a2:	0003      	movs	r3, r0
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}

080009ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e036      	b.n	8000a30 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2221      	movs	r2, #33	; 0x21
 80009c6:	2102      	movs	r1, #2
 80009c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <HAL_DMA_Init+0x8c>)
 80009d6:	4013      	ands	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 f9c4 	bl	8000da0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2221      	movs	r2, #33	; 0x21
 8000a22:	2101      	movs	r1, #1
 8000a24:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2220      	movs	r2, #32
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b004      	add	sp, #16
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	ffffc00f 	.word	0xffffc00f

08000a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a4a:	2317      	movs	r3, #23
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2220      	movs	r2, #32
 8000a56:	5c9b      	ldrb	r3, [r3, r2]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d101      	bne.n	8000a60 <HAL_DMA_Start_IT+0x24>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e04f      	b.n	8000b00 <HAL_DMA_Start_IT+0xc4>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2220      	movs	r2, #32
 8000a64:	2101      	movs	r1, #1
 8000a66:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2221      	movs	r2, #33	; 0x21
 8000a6c:	5c9b      	ldrb	r3, [r3, r2]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d13a      	bne.n	8000aea <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2221      	movs	r2, #33	; 0x21
 8000a78:	2102      	movs	r1, #2
 8000a7a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	438a      	bics	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	68b9      	ldr	r1, [r7, #8]
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f000 f954 	bl	8000d46 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	210e      	movs	r1, #14
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e00f      	b.n	8000ad8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	210a      	movs	r1, #10
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	438a      	bics	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2220      	movs	r2, #32
 8000aee:	2100      	movs	r1, #0
 8000af0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000af2:	2317      	movs	r3, #23
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2202      	movs	r2, #2
 8000af8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000afa:	2317      	movs	r3, #23
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	781b      	ldrb	r3, [r3, #0]
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b006      	add	sp, #24
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2221      	movs	r2, #33	; 0x21
 8000b14:	5c9b      	ldrb	r3, [r3, r2]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d008      	beq.n	8000b2e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2204      	movs	r2, #4
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2220      	movs	r2, #32
 8000b26:	2100      	movs	r1, #0
 8000b28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e020      	b.n	8000b70 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	210e      	movs	r1, #14
 8000b3a:	438a      	bics	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	438a      	bics	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b56:	2101      	movs	r1, #1
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2221      	movs	r2, #33	; 0x21
 8000b62:	2101      	movs	r1, #1
 8000b64:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2220      	movs	r2, #32
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b80:	210f      	movs	r1, #15
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2221      	movs	r2, #33	; 0x21
 8000b8c:	5c9b      	ldrb	r3, [r3, r2]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d006      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2204      	movs	r2, #4
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e028      	b.n	8000bf4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	210e      	movs	r1, #14
 8000bae:	438a      	bics	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2221      	movs	r2, #33	; 0x21
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2220      	movs	r2, #32
 8000bde:	2100      	movs	r1, #0
 8000be0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	4798      	blx	r3
    }
  }
  return status;
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	2204      	movs	r2, #4
 8000c20:	409a      	lsls	r2, r3
 8000c22:	0013      	movs	r3, r2
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	4013      	ands	r3, r2
 8000c28:	d024      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x72>
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	4013      	ands	r3, r2
 8000c30:	d020      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2220      	movs	r2, #32
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d107      	bne.n	8000c4e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2104      	movs	r1, #4
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c56:	2104      	movs	r1, #4
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <HAL_DMA_IRQHandler+0x66>
 8000c66:	e06a      	b.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	0010      	movs	r0, r2
 8000c70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000c72:	e064      	b.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	2202      	movs	r2, #2
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	d02b      	beq.n	8000cdc <HAL_DMA_IRQHandler+0xda>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2202      	movs	r2, #2
 8000c88:	4013      	ands	r3, r2
 8000c8a:	d027      	beq.n	8000cdc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2220      	movs	r2, #32
 8000c94:	4013      	ands	r3, r2
 8000c96:	d10b      	bne.n	8000cb0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	438a      	bics	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	2101      	movs	r1, #1
 8000cae:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	000a      	movs	r2, r1
 8000cbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d036      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	0010      	movs	r0, r2
 8000cd8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000cda:	e030      	b.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d028      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2208      	movs	r2, #8
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d024      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	210e      	movs	r1, #14
 8000d00:	438a      	bics	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	000a      	movs	r2, r1
 8000d12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2221      	movs	r2, #33	; 0x21
 8000d1e:	2101      	movs	r1, #1
 8000d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2220      	movs	r2, #32
 8000d26:	2100      	movs	r1, #0
 8000d28:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	0010      	movs	r0, r2
 8000d3a:	4798      	blx	r3
    }
  }
}
 8000d3c:	e7ff      	b.n	8000d3e <HAL_DMA_IRQHandler+0x13c>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4091      	lsls	r1, r2
 8000d60:	000a      	movs	r2, r1
 8000d62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b10      	cmp	r3, #16
 8000d72:	d108      	bne.n	8000d86 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d84:	e007      	b.n	8000d96 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	60da      	str	r2, [r3, #12]
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b004      	add	sp, #16
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <DMA_CalcBaseAndBitshift+0x30>)
 8000dae:	4694      	mov	ip, r2
 8000db0:	4463      	add	r3, ip
 8000db2:	2114      	movs	r1, #20
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff f9a7 	bl	8000108 <__udivsi3>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	009a      	lsls	r2, r3, #2
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <DMA_CalcBaseAndBitshift+0x34>)
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	bffdfff8 	.word	0xbffdfff8
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e14f      	b.n	8001088 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4091      	lsls	r1, r2
 8000df2:	000a      	movs	r2, r1
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d100      	bne.n	8000e00 <HAL_GPIO_Init+0x28>
 8000dfe:	e140      	b.n	8001082 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d005      	beq.n	8000e18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2203      	movs	r2, #3
 8000e12:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d130      	bne.n	8000e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	2201      	movs	r2, #1
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d017      	beq.n	8000eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2203      	movs	r2, #3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d123      	bne.n	8000f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	58d3      	ldr	r3, [r2, r3]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2107      	movs	r1, #7
 8000eee:	400b      	ands	r3, r1
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2203      	movs	r2, #3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	23c0      	movs	r3, #192	; 0xc0
 8000f44:	029b      	lsls	r3, r3, #10
 8000f46:	4013      	ands	r3, r2
 8000f48:	d100      	bne.n	8000f4c <HAL_GPIO_Init+0x174>
 8000f4a:	e09a      	b.n	8001082 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	619a      	str	r2, [r3, #24]
 8000f58:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x2cc>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	589b      	ldr	r3, [r3, r2]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2203      	movs	r2, #3
 8000f76:	4013      	ands	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	2390      	movs	r3, #144	; 0x90
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x1e2>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x1de>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a43      	ldr	r2, [pc, #268]	; (80010ac <HAL_GPIO_Init+0x2d4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x1da>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a42      	ldr	r2, [pc, #264]	; (80010b0 <HAL_GPIO_Init+0x2d8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x1d6>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x2cc>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	035b      	lsls	r3, r3, #13
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	039b      	lsls	r3, r3, #14
 800101c:	4013      	ands	r3, r2
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	029b      	lsls	r3, r3, #10
 8001046:	4013      	ands	r3, r2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	40da      	lsrs	r2, r3
 8001090:	1e13      	subs	r3, r2, #0
 8001092:	d000      	beq.n	8001096 <HAL_GPIO_Init+0x2be>
 8001094:	e6a8      	b.n	8000de8 <HAL_GPIO_Init+0x10>
  } 
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b006      	add	sp, #24
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	0008      	movs	r0, r1
 80010c2:	0011      	movs	r1, r2
 80010c4:	1cbb      	adds	r3, r7, #2
 80010c6:	1c02      	adds	r2, r0, #0
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	1c0a      	adds	r2, r1, #0
 80010ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d0:	1c7b      	adds	r3, r7, #1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d8:	1cbb      	adds	r3, r7, #2
 80010da:	881a      	ldrh	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	000a      	movs	r2, r1
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001106:	1cbb      	adds	r3, r7, #2
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	041a      	lsls	r2, r3, #16
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	1cb9      	adds	r1, r7, #2
 8001116:	8809      	ldrh	r1, [r1, #0]
 8001118:	400b      	ands	r3, r1
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e301      	b.n	800173e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d100      	bne.n	8001146 <HAL_RCC_OscConfig+0x1e>
 8001144:	e08d      	b.n	8001262 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001146:	4bc3      	ldr	r3, [pc, #780]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	220c      	movs	r2, #12
 800114c:	4013      	ands	r3, r2
 800114e:	2b04      	cmp	r3, #4
 8001150:	d00e      	beq.n	8001170 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001152:	4bc0      	ldr	r3, [pc, #768]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	220c      	movs	r2, #12
 8001158:	4013      	ands	r3, r2
 800115a:	2b08      	cmp	r3, #8
 800115c:	d116      	bne.n	800118c <HAL_RCC_OscConfig+0x64>
 800115e:	4bbd      	ldr	r3, [pc, #756]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	025b      	lsls	r3, r3, #9
 8001166:	401a      	ands	r2, r3
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	025b      	lsls	r3, r3, #9
 800116c:	429a      	cmp	r2, r3
 800116e:	d10d      	bne.n	800118c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	4bb8      	ldr	r3, [pc, #736]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	029b      	lsls	r3, r3, #10
 8001178:	4013      	ands	r3, r2
 800117a:	d100      	bne.n	800117e <HAL_RCC_OscConfig+0x56>
 800117c:	e070      	b.n	8001260 <HAL_RCC_OscConfig+0x138>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d000      	beq.n	8001188 <HAL_RCC_OscConfig+0x60>
 8001186:	e06b      	b.n	8001260 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e2d8      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x7c>
 8001194:	4baf      	ldr	r3, [pc, #700]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4bae      	ldr	r3, [pc, #696]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0249      	lsls	r1, r1, #9
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e02f      	b.n	8001204 <HAL_RCC_OscConfig+0xdc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x9e>
 80011ac:	4ba9      	ldr	r3, [pc, #676]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4ba8      	ldr	r3, [pc, #672]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	49a9      	ldr	r1, [pc, #676]	; (8001458 <HAL_RCC_OscConfig+0x330>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	4ba6      	ldr	r3, [pc, #664]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4ba5      	ldr	r3, [pc, #660]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011be:	49a7      	ldr	r1, [pc, #668]	; (800145c <HAL_RCC_OscConfig+0x334>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e01e      	b.n	8001204 <HAL_RCC_OscConfig+0xdc>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d10e      	bne.n	80011ec <HAL_RCC_OscConfig+0xc4>
 80011ce:	4ba1      	ldr	r3, [pc, #644]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4ba0      	ldr	r3, [pc, #640]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	02c9      	lsls	r1, r1, #11
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	4b9d      	ldr	r3, [pc, #628]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b9c      	ldr	r3, [pc, #624]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0249      	lsls	r1, r1, #9
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0xdc>
 80011ec:	4b99      	ldr	r3, [pc, #612]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b98      	ldr	r3, [pc, #608]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	4999      	ldr	r1, [pc, #612]	; (8001458 <HAL_RCC_OscConfig+0x330>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	4b96      	ldr	r3, [pc, #600]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b95      	ldr	r3, [pc, #596]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	4997      	ldr	r1, [pc, #604]	; (800145c <HAL_RCC_OscConfig+0x334>)
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d014      	beq.n	8001236 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fac2 	bl	8000794 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001216:	f7ff fabd 	bl	8000794 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e28a      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001228:	4b8a      	ldr	r3, [pc, #552]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0xee>
 8001234:	e015      	b.n	8001262 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff faad 	bl	8000794 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff faa8 	bl	8000794 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e275      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b80      	ldr	r3, [pc, #512]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	029b      	lsls	r3, r3, #10
 800125a:	4013      	ands	r3, r2
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x118>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x146>
 800126c:	e069      	b.n	8001342 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800126e:	4b79      	ldr	r3, [pc, #484]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	220c      	movs	r2, #12
 8001274:	4013      	ands	r3, r2
 8001276:	d00b      	beq.n	8001290 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001278:	4b76      	ldr	r3, [pc, #472]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	220c      	movs	r2, #12
 800127e:	4013      	ands	r3, r2
 8001280:	2b08      	cmp	r3, #8
 8001282:	d11c      	bne.n	80012be <HAL_RCC_OscConfig+0x196>
 8001284:	4b73      	ldr	r3, [pc, #460]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	025b      	lsls	r3, r3, #9
 800128c:	4013      	ands	r3, r2
 800128e:	d116      	bne.n	80012be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001290:	4b70      	ldr	r3, [pc, #448]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2202      	movs	r2, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x17e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e24b      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	22f8      	movs	r2, #248	; 0xf8
 80012ac:	4393      	bics	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	00da      	lsls	r2, r3, #3
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012bc:	e041      	b.n	8001342 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d024      	beq.n	8001310 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa5f 	bl	8000794 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff fa5a 	bl	8000794 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e227      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	4b59      	ldr	r3, [pc, #356]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2202      	movs	r2, #2
 80012f4:	4013      	ands	r3, r2
 80012f6:	d0f1      	beq.n	80012dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b56      	ldr	r3, [pc, #344]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	22f8      	movs	r2, #248	; 0xf8
 80012fe:	4393      	bics	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00da      	lsls	r2, r3, #3
 8001308:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e018      	b.n	8001342 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001316:	2101      	movs	r1, #1
 8001318:	438a      	bics	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fa3a 	bl	8000794 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fa35 	bl	8000794 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e202      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2202      	movs	r2, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d1f1      	bne.n	8001326 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2208      	movs	r2, #8
 8001348:	4013      	ands	r3, r2
 800134a:	d036      	beq.n	80013ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d019      	beq.n	8001388 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001358:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800135a:	2101      	movs	r1, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fa18 	bl	8000794 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff fa13 	bl	8000794 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e1e0      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	2202      	movs	r2, #2
 8001382:	4013      	ands	r3, r2
 8001384:	d0f1      	beq.n	800136a <HAL_RCC_OscConfig+0x242>
 8001386:	e018      	b.n	80013ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800138a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138c:	4b31      	ldr	r3, [pc, #196]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff f9fe 	bl	8000794 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff f9f9 	bl	8000794 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1c6      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2202      	movs	r2, #2
 80013b6:	4013      	ands	r3, r2
 80013b8:	d1f1      	bne.n	800139e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2204      	movs	r2, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d100      	bne.n	80013c6 <HAL_RCC_OscConfig+0x29e>
 80013c4:	e0b4      	b.n	8001530 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	201f      	movs	r0, #31
 80013c8:	183b      	adds	r3, r7, r0
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	69da      	ldr	r2, [r3, #28]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	055b      	lsls	r3, r3, #21
 80013d6:	4013      	ands	r3, r2
 80013d8:	d110      	bne.n	80013fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	69da      	ldr	r2, [r3, #28]
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0549      	lsls	r1, r1, #21
 80013e4:	430a      	orrs	r2, r1
 80013e6:	61da      	str	r2, [r3, #28]
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	69da      	ldr	r2, [r3, #28]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	055b      	lsls	r3, r3, #21
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013f6:	183b      	adds	r3, r7, r0
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_RCC_OscConfig+0x338>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4013      	ands	r3, r2
 8001406:	d11a      	bne.n	800143e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_RCC_OscConfig+0x338>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_RCC_OscConfig+0x338>)
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	0049      	lsls	r1, r1, #1
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001416:	f7ff f9bd 	bl	8000794 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001420:	f7ff f9b8 	bl	8000794 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e185      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x338>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4013      	ands	r3, r2
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d10e      	bne.n	8001464 <HAL_RCC_OscConfig+0x33c>
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	4b02      	ldr	r3, [pc, #8]	; (8001454 <HAL_RCC_OscConfig+0x32c>)
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
 8001452:	e035      	b.n	80014c0 <HAL_RCC_OscConfig+0x398>
 8001454:	40021000 	.word	0x40021000
 8001458:	fffeffff 	.word	0xfffeffff
 800145c:	fffbffff 	.word	0xfffbffff
 8001460:	40007000 	.word	0x40007000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10c      	bne.n	8001486 <HAL_RCC_OscConfig+0x35e>
 800146c:	4bb6      	ldr	r3, [pc, #728]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800146e:	6a1a      	ldr	r2, [r3, #32]
 8001470:	4bb5      	ldr	r3, [pc, #724]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001472:	2101      	movs	r1, #1
 8001474:	438a      	bics	r2, r1
 8001476:	621a      	str	r2, [r3, #32]
 8001478:	4bb3      	ldr	r3, [pc, #716]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800147a:	6a1a      	ldr	r2, [r3, #32]
 800147c:	4bb2      	ldr	r3, [pc, #712]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800147e:	2104      	movs	r1, #4
 8001480:	438a      	bics	r2, r1
 8001482:	621a      	str	r2, [r3, #32]
 8001484:	e01c      	b.n	80014c0 <HAL_RCC_OscConfig+0x398>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b05      	cmp	r3, #5
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x380>
 800148e:	4bae      	ldr	r3, [pc, #696]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	4bad      	ldr	r3, [pc, #692]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001494:	2104      	movs	r1, #4
 8001496:	430a      	orrs	r2, r1
 8001498:	621a      	str	r2, [r3, #32]
 800149a:	4bab      	ldr	r3, [pc, #684]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	4baa      	ldr	r3, [pc, #680]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	621a      	str	r2, [r3, #32]
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0x398>
 80014a8:	4ba7      	ldr	r3, [pc, #668]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80014aa:	6a1a      	ldr	r2, [r3, #32]
 80014ac:	4ba6      	ldr	r3, [pc, #664]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80014ae:	2101      	movs	r1, #1
 80014b0:	438a      	bics	r2, r1
 80014b2:	621a      	str	r2, [r3, #32]
 80014b4:	4ba4      	ldr	r3, [pc, #656]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	4ba3      	ldr	r3, [pc, #652]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80014ba:	2104      	movs	r1, #4
 80014bc:	438a      	bics	r2, r1
 80014be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d014      	beq.n	80014f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff f964 	bl	8000794 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	e009      	b.n	80014e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff f95f 	bl	8000794 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4a9b      	ldr	r2, [pc, #620]	; (800174c <HAL_RCC_OscConfig+0x624>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e12b      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	4b98      	ldr	r3, [pc, #608]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x3aa>
 80014f0:	e013      	b.n	800151a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff f94f 	bl	8000794 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fa:	e009      	b.n	8001510 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fc:	f7ff f94a 	bl	8000794 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4a91      	ldr	r2, [pc, #580]	; (800174c <HAL_RCC_OscConfig+0x624>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e116      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001510:	4b8d      	ldr	r3, [pc, #564]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800151a:	231f      	movs	r3, #31
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001524:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	4b87      	ldr	r3, [pc, #540]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800152a:	4989      	ldr	r1, [pc, #548]	; (8001750 <HAL_RCC_OscConfig+0x628>)
 800152c:	400a      	ands	r2, r1
 800152e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2210      	movs	r2, #16
 8001536:	4013      	ands	r3, r2
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d12a      	bne.n	8001598 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001542:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001548:	2104      	movs	r1, #4
 800154a:	430a      	orrs	r2, r1
 800154c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800154e:	4b7e      	ldr	r3, [pc, #504]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f91b 	bl	8000794 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001564:	f7ff f916 	bl	8000794 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0e3      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001576:	4b74      	ldr	r3, [pc, #464]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d0f1      	beq.n	8001564 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001580:	4b71      	ldr	r3, [pc, #452]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	22f8      	movs	r2, #248	; 0xf8
 8001586:	4393      	bics	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	00da      	lsls	r2, r3, #3
 8001590:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001592:	430a      	orrs	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
 8001596:	e034      	b.n	8001602 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	3305      	adds	r3, #5
 800159e:	d111      	bne.n	80015c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015a0:	4b69      	ldr	r3, [pc, #420]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015a6:	2104      	movs	r1, #4
 80015a8:	438a      	bics	r2, r1
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	22f8      	movs	r2, #248	; 0xf8
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	00da      	lsls	r2, r3, #3
 80015bc:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
 80015c2:	e01e      	b.n	8001602 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015c4:	4b60      	ldr	r3, [pc, #384]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c8:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015d0:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d4:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	438a      	bics	r2, r1
 80015da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff f8da 	bl	8000794 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015e6:	f7ff f8d5 	bl	8000794 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0a2      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80015fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d1f1      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d100      	bne.n	800160c <HAL_RCC_OscConfig+0x4e4>
 800160a:	e097      	b.n	800173c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800160c:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	220c      	movs	r2, #12
 8001612:	4013      	ands	r3, r2
 8001614:	2b08      	cmp	r3, #8
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x4f2>
 8001618:	e06b      	b.n	80016f2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d14c      	bne.n	80016bc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b48      	ldr	r3, [pc, #288]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001628:	494a      	ldr	r1, [pc, #296]	; (8001754 <HAL_RCC_OscConfig+0x62c>)
 800162a:	400a      	ands	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff f8b1 	bl	8000794 <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff f8ac 	bl	8000794 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e079      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	049b      	lsls	r3, r3, #18
 8001652:	4013      	ands	r3, r2
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	220f      	movs	r2, #15
 800165c:	4393      	bics	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001664:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <HAL_RCC_OscConfig+0x630>)
 8001670:	4013      	ands	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	431a      	orrs	r2, r3
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0449      	lsls	r1, r1, #17
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff f87f 	bl	8000794 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff f87a 	bl	8000794 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e047      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	049b      	lsls	r3, r3, #18
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x574>
 80016ba:	e03f      	b.n	800173c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80016c2:	4924      	ldr	r1, [pc, #144]	; (8001754 <HAL_RCC_OscConfig+0x62c>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff f864 	bl	8000794 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f85f 	bl	8000794 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e02c      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	049b      	lsls	r3, r3, #18
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5aa>
 80016f0:	e024      	b.n	800173c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e01f      	b.n	800173e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x620>)
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	401a      	ands	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	429a      	cmp	r2, r3
 8001718:	d10e      	bne.n	8001738 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	220f      	movs	r2, #15
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	23f0      	movs	r3, #240	; 0xf0
 800172c:	039b      	lsls	r3, r3, #14
 800172e:	401a      	ands	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b008      	add	sp, #32
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	40021000 	.word	0x40021000
 800174c:	00001388 	.word	0x00001388
 8001750:	efffffff 	.word	0xefffffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ffc2ffff 	.word	0xffc2ffff

0800175c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b3      	b.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d911      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2201      	movs	r2, #1
 8001784:	4393      	bics	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	4013      	ands	r3, r2
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e09a      	b.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d015      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2204      	movs	r2, #4
 80017b2:	4013      	ands	r3, r2
 80017b4:	d006      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017b6:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80017bc:	21e0      	movs	r1, #224	; 0xe0
 80017be:	00c9      	lsls	r1, r1, #3
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	22f0      	movs	r2, #240	; 0xf0
 80017ca:	4393      	bics	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	d040      	beq.n	8001864 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	029b      	lsls	r3, r3, #10
 80017f2:	4013      	ands	r3, r2
 80017f4:	d114      	bne.n	8001820 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06e      	b.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	049b      	lsls	r3, r3, #18
 800180a:	4013      	ands	r3, r2
 800180c:	d108      	bne.n	8001820 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e062      	b.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e05b      	b.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7fe ffae 	bl	8000794 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183c:	e009      	b.n	8001852 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7fe ffa9 	bl	8000794 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <HAL_RCC_ClockConfig+0x18c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e042      	b.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	220c      	movs	r2, #12
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1ec      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d211      	bcs.n	8001896 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4393      	bics	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x184>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e020      	b.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2204      	movs	r2, #4
 800189c:	4013      	ands	r3, r2
 800189e:	d009      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_RCC_ClockConfig+0x190>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018b4:	f000 f820 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b8:	0001      	movs	r1, r0
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x188>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	220f      	movs	r2, #15
 80018c2:	4013      	ands	r3, r2
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x194>)
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	000a      	movs	r2, r1
 80018ca:	40da      	lsrs	r2, r3
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x198>)
 80018ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f7fe ff19 	bl	8000708 <HAL_InitTick>
  
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	00001388 	.word	0x00001388
 80018ec:	fffff8ff 	.word	0xfffff8ff
 80018f0:	08002f38 	.word	0x08002f38
 80018f4:	20000000 	.word	0x20000000

080018f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	220c      	movs	r2, #12
 800191c:	4013      	ands	r3, r2
 800191e:	2b04      	cmp	r3, #4
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x30>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x36>
 8001926:	e02c      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_GetSysClockFreq+0xa0>)
 800192a:	613b      	str	r3, [r7, #16]
      break;
 800192c:	e02c      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	220f      	movs	r2, #15
 8001934:	4013      	ands	r3, r2
 8001936:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_RCC_GetSysClockFreq+0x9c>)
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	220f      	movs	r2, #15
 8001942:	4013      	ands	r3, r2
 8001944:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	4013      	ands	r3, r2
 8001952:	d009      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	4810      	ldr	r0, [pc, #64]	; (8001998 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001958:	f7fe fbd6 	bl	8000108 <__udivsi3>
 800195c:	0003      	movs	r3, r0
 800195e:	001a      	movs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4353      	muls	r3, r2
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e009      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	000a      	movs	r2, r1
 800196c:	0152      	lsls	r2, r2, #5
 800196e:	1a52      	subs	r2, r2, r1
 8001970:	0193      	lsls	r3, r2, #6
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	185b      	adds	r3, r3, r1
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
      break;
 8001980:	e002      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001984:	613b      	str	r3, [r7, #16]
      break;
 8001986:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b006      	add	sp, #24
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	007a1200 	.word	0x007a1200
 800199c:	08002f50 	.word	0x08002f50
 80019a0:	08002f60 	.word	0x08002f60

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019bc:	f7ff fff2 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c0:	0001      	movs	r1, r0
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	2207      	movs	r2, #7
 80019ca:	4013      	ands	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	40d9      	lsrs	r1, r3
 80019d2:	000b      	movs	r3, r1
}    
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000
 80019e0:	08002f48 	.word	0x08002f48

080019e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	4013      	ands	r3, r2
 80019fe:	d100      	bne.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a00:	e08e      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a02:	2017      	movs	r0, #23
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	055b      	lsls	r3, r3, #21
 8001a12:	4013      	ands	r3, r2
 8001a14:	d110      	bne.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	0549      	lsls	r1, r1, #21
 8001a20:	430a      	orrs	r2, r1
 8001a22:	61da      	str	r2, [r3, #28]
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	055b      	lsls	r3, r3, #21
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a32:	183b      	adds	r3, r7, r0
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d11a      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	0049      	lsls	r1, r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7fe fe9f 	bl	8000794 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7fe fe9a 	bl	8000794 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e077      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d034      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	23c0      	movs	r3, #192	; 0xc0
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d02c      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0249      	lsls	r1, r1, #9
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ab6:	6a1a      	ldr	r2, [r3, #32]
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aba:	492e      	ldr	r1, [pc, #184]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001abc:	400a      	ands	r2, r1
 8001abe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7fe fe61 	bl	8000794 <HAL_GetTick>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	e009      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7fe fe5c 	bl	8000794 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e038      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b0a:	2317      	movs	r3, #23
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b1a:	4918      	ldr	r1, [pc, #96]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	d009      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	2203      	movs	r2, #3
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2220      	movs	r2, #32
 8001b44:	4013      	ands	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	4393      	bics	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b006      	add	sp, #24
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	fffffcff 	.word	0xfffffcff
 8001b74:	fffeffff 	.word	0xfffeffff
 8001b78:	00001388 	.word	0x00001388
 8001b7c:	efffffff 	.word	0xefffffff

08001b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e044      	b.n	8001c1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2278      	movs	r2, #120	; 0x78
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7fe fcf1 	bl	800058c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2224      	movs	r2, #36	; 0x24
 8001bae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	438a      	bics	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fc14 	bl	80023f0 <UART_SetConfig>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e024      	b.n	8001c1c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 fd47 	bl	8002670 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	490d      	ldr	r1, [pc, #52]	; (8001c24 <HAL_UART_Init+0xa4>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	438a      	bics	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 fddf 	bl	80027d8 <UART_CheckIdleState>
 8001c1a:	0003      	movs	r3, r0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	fffff7ff 	.word	0xfffff7ff

08001c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d000      	beq.n	8001c42 <HAL_UART_Transmit+0x1a>
 8001c40:	e08d      	b.n	8001d5e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_UART_Transmit+0x28>
 8001c48:	1dbb      	adds	r3, r7, #6
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e085      	b.n	8001d60 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d109      	bne.n	8001c74 <HAL_UART_Transmit+0x4c>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d001      	beq.n	8001c74 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e075      	b.n	8001d60 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2284      	movs	r2, #132	; 0x84
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c82:	f7fe fd87 	bl	8000794 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1dba      	adds	r2, r7, #6
 8001c8e:	2150      	movs	r1, #80	; 0x50
 8001c90:	8812      	ldrh	r2, [r2, #0]
 8001c92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1dba      	adds	r2, r7, #6
 8001c98:	2152      	movs	r1, #82	; 0x52
 8001c9a:	8812      	ldrh	r2, [r2, #0]
 8001c9c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	015b      	lsls	r3, r3, #5
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d108      	bne.n	8001cbc <HAL_UART_Transmit+0x94>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	e003      	b.n	8001cc4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cc4:	e030      	b.n	8001d28 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	0013      	movs	r3, r2
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	f000 fe28 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 8001cd8:	1e03      	subs	r3, r0, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e03c      	b.n	8001d60 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10b      	bne.n	8001d04 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	881a      	ldrh	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	05d2      	lsls	r2, r2, #23
 8001cf6:	0dd2      	lsrs	r2, r2, #23
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	e008      	b.n	8001d16 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2252      	movs	r2, #82	; 0x52
 8001d1a:	5a9b      	ldrh	r3, [r3, r2]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b299      	uxth	r1, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2252      	movs	r2, #82	; 0x52
 8001d26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2252      	movs	r2, #82	; 0x52
 8001d2c:	5a9b      	ldrh	r3, [r3, r2]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1c8      	bne.n	8001cc6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2140      	movs	r1, #64	; 0x40
 8001d42:	f000 fdf1 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e005      	b.n	8001d60 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
  }
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b008      	add	sp, #32
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	1dbb      	adds	r3, r7, #6
 8001d74:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	589b      	ldr	r3, [r3, r2]
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d145      	bne.n	8001e0c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_UART_Receive_DMA+0x26>
 8001d86:	1dbb      	adds	r3, r7, #6
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e03d      	b.n	8001e0e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	015b      	lsls	r3, r3, #5
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d109      	bne.n	8001db2 <HAL_UART_Receive_DMA+0x4a>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e02d      	b.n	8001e0e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dca:	613b      	str	r3, [r7, #16]
  return(result);
 8001dcc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f383 8810 	msr	PRIMASK, r3
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	04c9      	lsls	r1, r1, #19
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f383 8810 	msr	PRIMASK, r3
}
 8001df8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 fdfa 	bl	80029fc <UART_Start_Receive_DMA>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	e000      	b.n	8001e0e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b008      	add	sp, #32
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b0ab      	sub	sp, #172	; 0xac
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	22a4      	movs	r2, #164	; 0xa4
 8001e28:	18b9      	adds	r1, r7, r2
 8001e2a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	20a0      	movs	r0, #160	; 0xa0
 8001e34:	1839      	adds	r1, r7, r0
 8001e36:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	219c      	movs	r1, #156	; 0x9c
 8001e40:	1879      	adds	r1, r7, r1
 8001e42:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e44:	0011      	movs	r1, r2
 8001e46:	18bb      	adds	r3, r7, r2
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a99      	ldr	r2, [pc, #612]	; (80020b0 <HAL_UART_IRQHandler+0x298>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2298      	movs	r2, #152	; 0x98
 8001e50:	18bc      	adds	r4, r7, r2
 8001e52:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001e54:	18bb      	adds	r3, r7, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d114      	bne.n	8001e86 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2220      	movs	r2, #32
 8001e62:	4013      	ands	r3, r2
 8001e64:	d00f      	beq.n	8001e86 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d00a      	beq.n	8001e86 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <HAL_UART_IRQHandler+0x62>
 8001e78:	e286      	b.n	8002388 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	0010      	movs	r0, r2
 8001e82:	4798      	blx	r3
      }
      return;
 8001e84:	e280      	b.n	8002388 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e86:	2398      	movs	r3, #152	; 0x98
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d100      	bne.n	8001e92 <HAL_UART_IRQHandler+0x7a>
 8001e90:	e114      	b.n	80020bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001e92:	239c      	movs	r3, #156	; 0x9c
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d106      	bne.n	8001eac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001e9e:	23a0      	movs	r3, #160	; 0xa0
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a83      	ldr	r2, [pc, #524]	; (80020b4 <HAL_UART_IRQHandler+0x29c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d100      	bne.n	8001eac <HAL_UART_IRQHandler+0x94>
 8001eaa:	e107      	b.n	80020bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001eac:	23a4      	movs	r3, #164	; 0xa4
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d012      	beq.n	8001ede <HAL_UART_IRQHandler+0xc6>
 8001eb8:	23a0      	movs	r3, #160	; 0xa0
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d00b      	beq.n	8001ede <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2284      	movs	r2, #132	; 0x84
 8001ed2:	589b      	ldr	r3, [r3, r2]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2184      	movs	r1, #132	; 0x84
 8001edc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ede:	23a4      	movs	r3, #164	; 0xa4
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d011      	beq.n	8001f0e <HAL_UART_IRQHandler+0xf6>
 8001eea:	239c      	movs	r3, #156	; 0x9c
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d00b      	beq.n	8001f0e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2202      	movs	r2, #2
 8001efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2284      	movs	r2, #132	; 0x84
 8001f02:	589b      	ldr	r3, [r3, r2]
 8001f04:	2204      	movs	r2, #4
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2184      	movs	r1, #132	; 0x84
 8001f0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f0e:	23a4      	movs	r3, #164	; 0xa4
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	d011      	beq.n	8001f3e <HAL_UART_IRQHandler+0x126>
 8001f1a:	239c      	movs	r3, #156	; 0x9c
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	d00b      	beq.n	8001f3e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2284      	movs	r2, #132	; 0x84
 8001f32:	589b      	ldr	r3, [r3, r2]
 8001f34:	2202      	movs	r2, #2
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2184      	movs	r1, #132	; 0x84
 8001f3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f3e:	23a4      	movs	r3, #164	; 0xa4
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2208      	movs	r2, #8
 8001f46:	4013      	ands	r3, r2
 8001f48:	d017      	beq.n	8001f7a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f4a:	23a0      	movs	r3, #160	; 0xa0
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2220      	movs	r2, #32
 8001f52:	4013      	ands	r3, r2
 8001f54:	d105      	bne.n	8001f62 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001f56:	239c      	movs	r3, #156	; 0x9c
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f60:	d00b      	beq.n	8001f7a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2208      	movs	r2, #8
 8001f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2284      	movs	r2, #132	; 0x84
 8001f6e:	589b      	ldr	r3, [r3, r2]
 8001f70:	2208      	movs	r2, #8
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2184      	movs	r1, #132	; 0x84
 8001f78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001f7a:	23a4      	movs	r3, #164	; 0xa4
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	4013      	ands	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x198>
 8001f88:	23a0      	movs	r3, #160	; 0xa0
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	04db      	lsls	r3, r3, #19
 8001f92:	4013      	ands	r3, r2
 8001f94:	d00c      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2284      	movs	r2, #132	; 0x84
 8001fa4:	589b      	ldr	r3, [r3, r2]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2184      	movs	r1, #132	; 0x84
 8001fae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2284      	movs	r2, #132	; 0x84
 8001fb4:	589b      	ldr	r3, [r3, r2]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d100      	bne.n	8001fbc <HAL_UART_IRQHandler+0x1a4>
 8001fba:	e1e7      	b.n	800238c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fbc:	23a4      	movs	r3, #164	; 0xa4
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fc8:	23a0      	movs	r3, #160	; 0xa0
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d008      	beq.n	8001fe6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	0010      	movs	r0, r2
 8001fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2284      	movs	r2, #132	; 0x84
 8001fea:	589b      	ldr	r3, [r3, r2]
 8001fec:	2194      	movs	r1, #148	; 0x94
 8001fee:	187a      	adds	r2, r7, r1
 8001ff0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2240      	movs	r2, #64	; 0x40
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d004      	beq.n	800200a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002000:	187b      	adds	r3, r7, r1
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2228      	movs	r2, #40	; 0x28
 8002006:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002008:	d047      	beq.n	800209a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fdb9 	bl	8002b84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2240      	movs	r2, #64	; 0x40
 800201a:	4013      	ands	r3, r2
 800201c:	2b40      	cmp	r3, #64	; 0x40
 800201e:	d137      	bne.n	8002090 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002020:	f3ef 8310 	mrs	r3, PRIMASK
 8002024:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002028:	2090      	movs	r0, #144	; 0x90
 800202a:	183a      	adds	r2, r7, r0
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	2301      	movs	r3, #1
 8002030:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002034:	f383 8810 	msr	PRIMASK, r3
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2140      	movs	r1, #64	; 0x40
 8002046:	438a      	bics	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	183b      	adds	r3, r7, r0
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002052:	f383 8810 	msr	PRIMASK, r3
}
 8002056:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_UART_IRQHandler+0x2a0>)
 8002066:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	0018      	movs	r0, r3
 800206e:	f7fe fd83 	bl	8000b78 <HAL_DMA_Abort_IT>
 8002072:	1e03      	subs	r3, r0, #0
 8002074:	d01a      	beq.n	80020ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002080:	0018      	movs	r0, r3
 8002082:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002084:	e012      	b.n	80020ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f99d 	bl	80023c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208e:	e00d      	b.n	80020ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f998 	bl	80023c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002098:	e008      	b.n	80020ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f000 f993 	bl	80023c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2284      	movs	r2, #132	; 0x84
 80020a6:	2100      	movs	r1, #0
 80020a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80020aa:	e16f      	b.n	800238c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ac:	46c0      	nop			; (mov r8, r8)
    return;
 80020ae:	e16d      	b.n	800238c <HAL_UART_IRQHandler+0x574>
 80020b0:	0000080f 	.word	0x0000080f
 80020b4:	04000120 	.word	0x04000120
 80020b8:	08002e3f 	.word	0x08002e3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d000      	beq.n	80020c6 <HAL_UART_IRQHandler+0x2ae>
 80020c4:	e139      	b.n	800233a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80020c6:	23a4      	movs	r3, #164	; 0xa4
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2210      	movs	r2, #16
 80020ce:	4013      	ands	r3, r2
 80020d0:	d100      	bne.n	80020d4 <HAL_UART_IRQHandler+0x2bc>
 80020d2:	e132      	b.n	800233a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80020d4:	23a0      	movs	r3, #160	; 0xa0
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2210      	movs	r2, #16
 80020dc:	4013      	ands	r3, r2
 80020de:	d100      	bne.n	80020e2 <HAL_UART_IRQHandler+0x2ca>
 80020e0:	e12b      	b.n	800233a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2210      	movs	r2, #16
 80020e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2240      	movs	r2, #64	; 0x40
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d000      	beq.n	80020fa <HAL_UART_IRQHandler+0x2e2>
 80020f8:	e09f      	b.n	800223a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	217e      	movs	r1, #126	; 0x7e
 8002104:	187b      	adds	r3, r7, r1
 8002106:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002108:	187b      	adds	r3, r7, r1
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d100      	bne.n	8002112 <HAL_UART_IRQHandler+0x2fa>
 8002110:	e13e      	b.n	8002390 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2258      	movs	r2, #88	; 0x58
 8002116:	5a9b      	ldrh	r3, [r3, r2]
 8002118:	187a      	adds	r2, r7, r1
 800211a:	8812      	ldrh	r2, [r2, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d300      	bcc.n	8002122 <HAL_UART_IRQHandler+0x30a>
 8002120:	e136      	b.n	8002390 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	187a      	adds	r2, r7, r1
 8002126:	215a      	movs	r1, #90	; 0x5a
 8002128:	8812      	ldrh	r2, [r2, #0]
 800212a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b20      	cmp	r3, #32
 8002134:	d06f      	beq.n	8002216 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002136:	f3ef 8310 	mrs	r3, PRIMASK
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800213e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002140:	2301      	movs	r3, #1
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	f383 8810 	msr	PRIMASK, r3
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4992      	ldr	r1, [pc, #584]	; (80023a0 <HAL_UART_IRQHandler+0x588>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002162:	f383 8810 	msr	PRIMASK, r3
}
 8002166:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002168:	f3ef 8310 	mrs	r3, PRIMASK
 800216c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800216e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002170:	677b      	str	r3, [r7, #116]	; 0x74
 8002172:	2301      	movs	r3, #1
 8002174:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002178:	f383 8810 	msr	PRIMASK, r3
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	438a      	bics	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002190:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002194:	f383 8810 	msr	PRIMASK, r3
}
 8002198:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219a:	f3ef 8310 	mrs	r3, PRIMASK
 800219e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80021a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a2:	673b      	str	r3, [r7, #112]	; 0x70
 80021a4:	2301      	movs	r3, #1
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021aa:	f383 8810 	msr	PRIMASK, r3
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2140      	movs	r1, #64	; 0x40
 80021bc:	438a      	bics	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c6:	f383 8810 	msr	PRIMASK, r3
}
 80021ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	2120      	movs	r1, #32
 80021d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021da:	f3ef 8310 	mrs	r3, PRIMASK
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021e4:	2301      	movs	r3, #1
 80021e6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ea:	f383 8810 	msr	PRIMASK, r3
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2110      	movs	r1, #16
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002202:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002206:	f383 8810 	msr	PRIMASK, r3
}
 800220a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002210:	0018      	movs	r0, r3
 8002212:	f7fe fc79 	bl	8000b08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2258      	movs	r2, #88	; 0x58
 8002220:	5a9a      	ldrh	r2, [r3, r2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	215a      	movs	r1, #90	; 0x5a
 8002226:	5a5b      	ldrh	r3, [r3, r1]
 8002228:	b29b      	uxth	r3, r3
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0011      	movs	r1, r2
 8002232:	0018      	movs	r0, r3
 8002234:	f000 f8d0 	bl	80023d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002238:	e0aa      	b.n	8002390 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2258      	movs	r2, #88	; 0x58
 800223e:	5a99      	ldrh	r1, [r3, r2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	225a      	movs	r2, #90	; 0x5a
 8002244:	5a9b      	ldrh	r3, [r3, r2]
 8002246:	b29a      	uxth	r2, r3
 8002248:	208e      	movs	r0, #142	; 0x8e
 800224a:	183b      	adds	r3, r7, r0
 800224c:	1a8a      	subs	r2, r1, r2
 800224e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	225a      	movs	r2, #90	; 0x5a
 8002254:	5a9b      	ldrh	r3, [r3, r2]
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d100      	bne.n	800225e <HAL_UART_IRQHandler+0x446>
 800225c:	e09a      	b.n	8002394 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800225e:	183b      	adds	r3, r7, r0
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d100      	bne.n	8002268 <HAL_UART_IRQHandler+0x450>
 8002266:	e095      	b.n	8002394 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002268:	f3ef 8310 	mrs	r3, PRIMASK
 800226c:	60fb      	str	r3, [r7, #12]
  return(result);
 800226e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002270:	2488      	movs	r4, #136	; 0x88
 8002272:	193a      	adds	r2, r7, r4
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	2301      	movs	r3, #1
 8002278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f383 8810 	msr	PRIMASK, r3
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4945      	ldr	r1, [pc, #276]	; (80023a4 <HAL_UART_IRQHandler+0x58c>)
 800228e:	400a      	ands	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	193b      	adds	r3, r7, r4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f383 8810 	msr	PRIMASK, r3
}
 800229e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a0:	f3ef 8310 	mrs	r3, PRIMASK
 80022a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80022a6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a8:	2484      	movs	r4, #132	; 0x84
 80022aa:	193a      	adds	r2, r7, r4
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f383 8810 	msr	PRIMASK, r3
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	438a      	bics	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f383 8810 	msr	PRIMASK, r3
}
 80022d6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	2120      	movs	r1, #32
 80022de:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ec:	f3ef 8310 	mrs	r3, PRIMASK
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f4:	2480      	movs	r4, #128	; 0x80
 80022f6:	193a      	adds	r2, r7, r4
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	f383 8810 	msr	PRIMASK, r3
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2110      	movs	r1, #16
 8002312:	438a      	bics	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	193b      	adds	r3, r7, r4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800232a:	183b      	adds	r3, r7, r0
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0011      	movs	r1, r2
 8002332:	0018      	movs	r0, r3
 8002334:	f000 f850 	bl	80023d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002338:	e02c      	b.n	8002394 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800233a:	23a4      	movs	r3, #164	; 0xa4
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	4013      	ands	r3, r2
 8002344:	d00f      	beq.n	8002366 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002346:	23a0      	movs	r3, #160	; 0xa0
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	4013      	ands	r3, r2
 8002350:	d009      	beq.n	8002366 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01e      	beq.n	8002398 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	0010      	movs	r0, r2
 8002362:	4798      	blx	r3
    }
    return;
 8002364:	e018      	b.n	8002398 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002366:	23a4      	movs	r3, #164	; 0xa4
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2240      	movs	r2, #64	; 0x40
 800236e:	4013      	ands	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_UART_IRQHandler+0x582>
 8002372:	23a0      	movs	r3, #160	; 0xa0
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2240      	movs	r2, #64	; 0x40
 800237a:	4013      	ands	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fd73 	bl	8002e6c <UART_EndTransmit_IT>
    return;
 8002386:	e008      	b.n	800239a <HAL_UART_IRQHandler+0x582>
      return;
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	e006      	b.n	800239a <HAL_UART_IRQHandler+0x582>
    return;
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	e004      	b.n	800239a <HAL_UART_IRQHandler+0x582>
      return;
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	e002      	b.n	800239a <HAL_UART_IRQHandler+0x582>
      return;
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	e000      	b.n	800239a <HAL_UART_IRQHandler+0x582>
    return;
 8002398:	46c0      	nop			; (mov r8, r8)
  }

}
 800239a:	46bd      	mov	sp, r7
 800239c:	b02b      	add	sp, #172	; 0xac
 800239e:	bd90      	pop	{r4, r7, pc}
 80023a0:	fffffeff 	.word	0xfffffeff
 80023a4:	fffffedf 	.word	0xfffffedf

080023a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	000a      	movs	r2, r1
 80023e2:	1cbb      	adds	r3, r7, #2
 80023e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b002      	add	sp, #8
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023f8:	231e      	movs	r3, #30
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a8d      	ldr	r2, [pc, #564]	; (8002654 <UART_SetConfig+0x264>)
 8002420:	4013      	ands	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a88      	ldr	r2, [pc, #544]	; (8002658 <UART_SetConfig+0x268>)
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a7f      	ldr	r2, [pc, #508]	; (800265c <UART_SetConfig+0x26c>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a7b      	ldr	r2, [pc, #492]	; (8002660 <UART_SetConfig+0x270>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d127      	bne.n	80024c6 <UART_SetConfig+0xd6>
 8002476:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <UART_SetConfig+0x274>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	2203      	movs	r2, #3
 800247c:	4013      	ands	r3, r2
 800247e:	2b03      	cmp	r3, #3
 8002480:	d00d      	beq.n	800249e <UART_SetConfig+0xae>
 8002482:	d81b      	bhi.n	80024bc <UART_SetConfig+0xcc>
 8002484:	2b02      	cmp	r3, #2
 8002486:	d014      	beq.n	80024b2 <UART_SetConfig+0xc2>
 8002488:	d818      	bhi.n	80024bc <UART_SetConfig+0xcc>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <UART_SetConfig+0xa4>
 800248e:	2b01      	cmp	r3, #1
 8002490:	d00a      	beq.n	80024a8 <UART_SetConfig+0xb8>
 8002492:	e013      	b.n	80024bc <UART_SetConfig+0xcc>
 8002494:	231f      	movs	r3, #31
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e021      	b.n	80024e2 <UART_SetConfig+0xf2>
 800249e:	231f      	movs	r3, #31
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e01c      	b.n	80024e2 <UART_SetConfig+0xf2>
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2204      	movs	r2, #4
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e017      	b.n	80024e2 <UART_SetConfig+0xf2>
 80024b2:	231f      	movs	r3, #31
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2208      	movs	r2, #8
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e012      	b.n	80024e2 <UART_SetConfig+0xf2>
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2210      	movs	r2, #16
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e00d      	b.n	80024e2 <UART_SetConfig+0xf2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a67      	ldr	r2, [pc, #412]	; (8002668 <UART_SetConfig+0x278>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d104      	bne.n	80024da <UART_SetConfig+0xea>
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e003      	b.n	80024e2 <UART_SetConfig+0xf2>
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2210      	movs	r2, #16
 80024e0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d15c      	bne.n	80025a8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80024ee:	231f      	movs	r3, #31
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d015      	beq.n	8002524 <UART_SetConfig+0x134>
 80024f8:	dc18      	bgt.n	800252c <UART_SetConfig+0x13c>
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d00d      	beq.n	800251a <UART_SetConfig+0x12a>
 80024fe:	dc15      	bgt.n	800252c <UART_SetConfig+0x13c>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <UART_SetConfig+0x11a>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d005      	beq.n	8002514 <UART_SetConfig+0x124>
 8002508:	e010      	b.n	800252c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800250a:	f7ff fa55 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 800250e:	0003      	movs	r3, r0
 8002510:	61bb      	str	r3, [r7, #24]
        break;
 8002512:	e012      	b.n	800253a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002514:	4b55      	ldr	r3, [pc, #340]	; (800266c <UART_SetConfig+0x27c>)
 8002516:	61bb      	str	r3, [r7, #24]
        break;
 8002518:	e00f      	b.n	800253a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800251a:	f7ff f9ed 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 800251e:	0003      	movs	r3, r0
 8002520:	61bb      	str	r3, [r7, #24]
        break;
 8002522:	e00a      	b.n	800253a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	61bb      	str	r3, [r7, #24]
        break;
 800252a:	e006      	b.n	800253a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002530:	231e      	movs	r3, #30
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
        break;
 8002538:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d100      	bne.n	8002542 <UART_SetConfig+0x152>
 8002540:	e07a      	b.n	8002638 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	005a      	lsls	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	18d2      	adds	r2, r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0019      	movs	r1, r3
 8002554:	0010      	movs	r0, r2
 8002556:	f7fd fdd7 	bl	8000108 <__udivsi3>
 800255a:	0003      	movs	r3, r0
 800255c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d91c      	bls.n	800259e <UART_SetConfig+0x1ae>
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	429a      	cmp	r2, r3
 800256c:	d217      	bcs.n	800259e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	b29a      	uxth	r2, r3
 8002572:	200e      	movs	r0, #14
 8002574:	183b      	adds	r3, r7, r0
 8002576:	210f      	movs	r1, #15
 8002578:	438a      	bics	r2, r1
 800257a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	2207      	movs	r2, #7
 8002584:	4013      	ands	r3, r2
 8002586:	b299      	uxth	r1, r3
 8002588:	183b      	adds	r3, r7, r0
 800258a:	183a      	adds	r2, r7, r0
 800258c:	8812      	ldrh	r2, [r2, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	183a      	adds	r2, r7, r0
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	e04c      	b.n	8002638 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800259e:	231e      	movs	r3, #30
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e047      	b.n	8002638 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025a8:	231f      	movs	r3, #31
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d015      	beq.n	80025de <UART_SetConfig+0x1ee>
 80025b2:	dc18      	bgt.n	80025e6 <UART_SetConfig+0x1f6>
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d00d      	beq.n	80025d4 <UART_SetConfig+0x1e4>
 80025b8:	dc15      	bgt.n	80025e6 <UART_SetConfig+0x1f6>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <UART_SetConfig+0x1d4>
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d005      	beq.n	80025ce <UART_SetConfig+0x1de>
 80025c2:	e010      	b.n	80025e6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c4:	f7ff f9f8 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 80025c8:	0003      	movs	r3, r0
 80025ca:	61bb      	str	r3, [r7, #24]
        break;
 80025cc:	e012      	b.n	80025f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025ce:	4b27      	ldr	r3, [pc, #156]	; (800266c <UART_SetConfig+0x27c>)
 80025d0:	61bb      	str	r3, [r7, #24]
        break;
 80025d2:	e00f      	b.n	80025f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025d4:	f7ff f990 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80025d8:	0003      	movs	r3, r0
 80025da:	61bb      	str	r3, [r7, #24]
        break;
 80025dc:	e00a      	b.n	80025f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	61bb      	str	r3, [r7, #24]
        break;
 80025e4:	e006      	b.n	80025f4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025ea:	231e      	movs	r3, #30
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
        break;
 80025f2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01e      	beq.n	8002638 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	085a      	lsrs	r2, r3, #1
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	18d2      	adds	r2, r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0019      	movs	r1, r3
 800260a:	0010      	movs	r0, r2
 800260c:	f7fd fd7c 	bl	8000108 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	d90a      	bls.n	8002630 <UART_SetConfig+0x240>
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	429a      	cmp	r2, r3
 8002622:	d205      	bcs.n	8002630 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	e003      	b.n	8002638 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002630:	231e      	movs	r3, #30
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002644:	231e      	movs	r3, #30
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b008      	add	sp, #32
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	ffff69f3 	.word	0xffff69f3
 8002658:	ffffcfff 	.word	0xffffcfff
 800265c:	fffff4ff 	.word	0xfffff4ff
 8002660:	40013800 	.word	0x40013800
 8002664:	40021000 	.word	0x40021000
 8002668:	40004400 	.word	0x40004400
 800266c:	007a1200 	.word	0x007a1200

08002670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
 8002680:	d00b      	beq.n	800269a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <UART_AdvFeatureConfig+0x144>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d00b      	beq.n	80026bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a43      	ldr	r2, [pc, #268]	; (80027b8 <UART_AdvFeatureConfig+0x148>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2204      	movs	r2, #4
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00b      	beq.n	80026de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <UART_AdvFeatureConfig+0x14c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2208      	movs	r2, #8
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00b      	beq.n	8002700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <UART_AdvFeatureConfig+0x150>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2210      	movs	r2, #16
 8002706:	4013      	ands	r3, r2
 8002708:	d00b      	beq.n	8002722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a2c      	ldr	r2, [pc, #176]	; (80027c4 <UART_AdvFeatureConfig+0x154>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2220      	movs	r2, #32
 8002728:	4013      	ands	r3, r2
 800272a:	d00b      	beq.n	8002744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <UART_AdvFeatureConfig+0x158>)
 8002734:	4013      	ands	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2240      	movs	r2, #64	; 0x40
 800274a:	4013      	ands	r3, r2
 800274c:	d01d      	beq.n	800278a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <UART_AdvFeatureConfig+0x15c>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	035b      	lsls	r3, r3, #13
 800276e:	429a      	cmp	r2, r3
 8002770:	d10b      	bne.n	800278a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <UART_AdvFeatureConfig+0x160>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	4013      	ands	r3, r2
 8002792:	d00b      	beq.n	80027ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <UART_AdvFeatureConfig+0x164>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	fffdffff 	.word	0xfffdffff
 80027b8:	fffeffff 	.word	0xfffeffff
 80027bc:	fffbffff 	.word	0xfffbffff
 80027c0:	ffff7fff 	.word	0xffff7fff
 80027c4:	ffffefff 	.word	0xffffefff
 80027c8:	ffffdfff 	.word	0xffffdfff
 80027cc:	ffefffff 	.word	0xffefffff
 80027d0:	ff9fffff 	.word	0xff9fffff
 80027d4:	fff7ffff 	.word	0xfff7ffff

080027d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b092      	sub	sp, #72	; 0x48
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2284      	movs	r2, #132	; 0x84
 80027e4:	2100      	movs	r1, #0
 80027e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027e8:	f7fd ffd4 	bl	8000794 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2208      	movs	r2, #8
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d12c      	bne.n	8002858 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	0391      	lsls	r1, r2, #14
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4a46      	ldr	r2, [pc, #280]	; (8002920 <UART_CheckIdleState+0x148>)
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	f000 f88c 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 8002810:	1e03      	subs	r3, r0, #0
 8002812:	d021      	beq.n	8002858 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002814:	f3ef 8310 	mrs	r3, PRIMASK
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800281c:	63bb      	str	r3, [r7, #56]	; 0x38
 800281e:	2301      	movs	r3, #1
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	f383 8810 	msr	PRIMASK, r3
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	438a      	bics	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2278      	movs	r2, #120	; 0x78
 8002850:	2100      	movs	r1, #0
 8002852:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e05f      	b.n	8002918 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2204      	movs	r2, #4
 8002860:	4013      	ands	r3, r2
 8002862:	2b04      	cmp	r3, #4
 8002864:	d146      	bne.n	80028f4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	03d1      	lsls	r1, r2, #15
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <UART_CheckIdleState+0x148>)
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	f000 f858 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d03b      	beq.n	80028f4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287c:	f3ef 8310 	mrs	r3, PRIMASK
 8002880:	60fb      	str	r3, [r7, #12]
  return(result);
 8002882:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
 8002886:	2301      	movs	r3, #1
 8002888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f383 8810 	msr	PRIMASK, r3
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4921      	ldr	r1, [pc, #132]	; (8002924 <UART_CheckIdleState+0x14c>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f383 8810 	msr	PRIMASK, r3
}
 80028ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ae:	f3ef 8310 	mrs	r3, PRIMASK
 80028b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80028b4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
 80028b8:	2301      	movs	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f383 8810 	msr	PRIMASK, r3
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2101      	movs	r1, #1
 80028d0:	438a      	bics	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f383 8810 	msr	PRIMASK, r3
}
 80028de:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	2120      	movs	r1, #32
 80028e6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2278      	movs	r2, #120	; 0x78
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e011      	b.n	8002918 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	2120      	movs	r1, #32
 8002900:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2278      	movs	r2, #120	; 0x78
 8002912:	2100      	movs	r1, #0
 8002914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b010      	add	sp, #64	; 0x40
 800291e:	bd80      	pop	{r7, pc}
 8002920:	01ffffff 	.word	0x01ffffff
 8002924:	fffffedf 	.word	0xfffffedf

08002928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002938:	e04b      	b.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3301      	adds	r3, #1
 800293e:	d048      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002940:	f7fd ff28 	bl	8000794 <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e04b      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2204      	movs	r2, #4
 8002962:	4013      	ands	r3, r2
 8002964:	d035      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2208      	movs	r2, #8
 800296e:	4013      	ands	r3, r2
 8002970:	2b08      	cmp	r3, #8
 8002972:	d111      	bne.n	8002998 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2208      	movs	r2, #8
 800297a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	0018      	movs	r0, r3
 8002980:	f000 f900 	bl	8002b84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2284      	movs	r2, #132	; 0x84
 8002988:	2108      	movs	r1, #8
 800298a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2278      	movs	r2, #120	; 0x78
 8002990:	2100      	movs	r1, #0
 8002992:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e02c      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69da      	ldr	r2, [r3, #28]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	401a      	ands	r2, r3
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d112      	bne.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f8e3 	bl	8002b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2284      	movs	r2, #132	; 0x84
 80029c2:	2120      	movs	r1, #32
 80029c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2278      	movs	r2, #120	; 0x78
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e00f      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	425a      	negs	r2, r3
 80029e2:	4153      	adcs	r3, r2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	001a      	movs	r2, r3
 80029e8:	1dfb      	adds	r3, r7, #7
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d0a4      	beq.n	800293a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b090      	sub	sp, #64	; 0x40
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	1dbb      	adds	r3, r7, #6
 8002a08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1dba      	adds	r2, r7, #6
 8002a14:	2158      	movs	r1, #88	; 0x58
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2284      	movs	r2, #132	; 0x84
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	2122      	movs	r1, #34	; 0x22
 8002a28:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d028      	beq.n	8002a84 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <UART_Start_Receive_DMA+0x134>)
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	; (8002b34 <UART_Start_Receive_DMA+0x138>)
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <UART_Start_Receive_DMA+0x13c>)
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3324      	adds	r3, #36	; 0x24
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	001a      	movs	r2, r3
 8002a64:	1dbb      	adds	r3, r7, #6
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	f7fd ffe8 	bl	8000a3c <HAL_DMA_Start_IT>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d009      	beq.n	8002a84 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2284      	movs	r2, #132	; 0x84
 8002a74:	2110      	movs	r1, #16
 8002a76:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e050      	b.n	8002b26 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d019      	beq.n	8002ac0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a96:	2301      	movs	r3, #1
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	f383 8810 	msr	PRIMASK, r3
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	0049      	lsls	r1, r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac4:	613b      	str	r3, [r7, #16]
  return(result);
 8002ac6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aca:	2301      	movs	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f383 8810 	msr	PRIMASK, r3
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f383 8810 	msr	PRIMASK, r3
}
 8002af0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af2:	f3ef 8310 	mrs	r3, PRIMASK
 8002af6:	61fb      	str	r3, [r7, #28]
  return(result);
 8002af8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
 8002afc:	2301      	movs	r3, #1
 8002afe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f383 8810 	msr	PRIMASK, r3
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f383 8810 	msr	PRIMASK, r3
}
 8002b22:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b010      	add	sp, #64	; 0x40
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	08002c4d 	.word	0x08002c4d
 8002b34:	08002d79 	.word	0x08002d79
 8002b38:	08002dbb 	.word	0x08002dbb

08002b3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	21c0      	movs	r1, #192	; 0xc0
 8002b66:	438a      	bics	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b006      	add	sp, #24
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08e      	sub	sp, #56	; 0x38
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b90:	617b      	str	r3, [r7, #20]
  return(result);
 8002b92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4926      	ldr	r1, [pc, #152]	; (8002c48 <UART_EndRxTransfer+0xc4>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f383 8810 	msr	PRIMASK, r3
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc2:	623b      	str	r3, [r7, #32]
  return(result);
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc8:	2301      	movs	r3, #1
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	f383 8810 	msr	PRIMASK, r3
}
 8002bee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d118      	bne.n	8002c2a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	2301      	movs	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f383 8810 	msr	PRIMASK, r3
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2110      	movs	r1, #16
 8002c1a:	438a      	bics	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	2120      	movs	r1, #32
 8002c30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b00e      	add	sp, #56	; 0x38
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	fffffedf 	.word	0xfffffedf

08002c4c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b094      	sub	sp, #80	; 0x50
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d06f      	beq.n	8002d42 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c64:	225a      	movs	r2, #90	; 0x5a
 8002c66:	2100      	movs	r1, #0
 8002c68:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c70:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c74:	2301      	movs	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	493a      	ldr	r1, [pc, #232]	; (8002d74 <UART_DMAReceiveCplt+0x128>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	f383 8810 	msr	PRIMASK, r3
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	438a      	bics	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cce:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd8:	2301      	movs	r3, #1
 8002cda:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2140      	movs	r1, #64	; 0x40
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	f383 8810 	msr	PRIMASK, r3
}
 8002cfe:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	2120      	movs	r1, #32
 8002d06:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d118      	bne.n	8002d42 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d10:	f3ef 8310 	mrs	r3, PRIMASK
 8002d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d16:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f383 8810 	msr	PRIMASK, r3
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2110      	movs	r1, #16
 8002d32:	438a      	bics	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d44:	2200      	movs	r2, #0
 8002d46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	2258      	movs	r2, #88	; 0x58
 8002d54:	5a9a      	ldrh	r2, [r3, r2]
 8002d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d58:	0011      	movs	r1, r2
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7ff fb3c 	bl	80023d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d60:	e003      	b.n	8002d6a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7fd fad1 	bl	800030c <HAL_UART_RxCpltCallback>
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b014      	add	sp, #80	; 0x50
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	fffffeff 	.word	0xfffffeff

08002d78 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10a      	bne.n	8002daa <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2258      	movs	r2, #88	; 0x58
 8002d98:	5a9b      	ldrh	r3, [r3, r2]
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0011      	movs	r1, r2
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7ff fb18 	bl	80023d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002da8:	e003      	b.n	8002db2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff fb03 	bl	80023b8 <HAL_UART_RxHalfCpltCallback>
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}

08002dba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dcc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	589b      	ldr	r3, [r3, r2]
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d10a      	bne.n	8002dfa <UART_DMAError+0x40>
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b21      	cmp	r3, #33	; 0x21
 8002de8:	d107      	bne.n	8002dfa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2252      	movs	r2, #82	; 0x52
 8002dee:	2100      	movs	r1, #0
 8002df0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff fea1 	bl	8002b3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2240      	movs	r2, #64	; 0x40
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d10a      	bne.n	8002e1e <UART_DMAError+0x64>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b22      	cmp	r3, #34	; 0x22
 8002e0c:	d107      	bne.n	8002e1e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	225a      	movs	r2, #90	; 0x5a
 8002e12:	2100      	movs	r1, #0
 8002e14:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff feb3 	bl	8002b84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2284      	movs	r2, #132	; 0x84
 8002e22:	589b      	ldr	r3, [r3, r2]
 8002e24:	2210      	movs	r2, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2184      	movs	r1, #132	; 0x84
 8002e2c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fac9 	bl	80023c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b006      	add	sp, #24
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	225a      	movs	r2, #90	; 0x5a
 8002e50:	2100      	movs	r1, #0
 8002e52:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2252      	movs	r2, #82	; 0x52
 8002e58:	2100      	movs	r1, #0
 8002e5a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff fab2 	bl	80023c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e74:	f3ef 8310 	mrs	r3, PRIMASK
 8002e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2140      	movs	r1, #64	; 0x40
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff fa77 	bl	80023a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b006      	add	sp, #24
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	4d0c      	ldr	r5, [pc, #48]	; (8002efc <__libc_init_array+0x38>)
 8002eca:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002ecc:	1b64      	subs	r4, r4, r5
 8002ece:	10a4      	asrs	r4, r4, #2
 8002ed0:	42a6      	cmp	r6, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	2600      	movs	r6, #0
 8002ed6:	f000 f821 	bl	8002f1c <_init>
 8002eda:	4d0a      	ldr	r5, [pc, #40]	; (8002f04 <__libc_init_array+0x40>)
 8002edc:	4c0a      	ldr	r4, [pc, #40]	; (8002f08 <__libc_init_array+0x44>)
 8002ede:	1b64      	subs	r4, r4, r5
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	00b3      	lsls	r3, r6, #2
 8002eea:	58eb      	ldr	r3, [r5, r3]
 8002eec:	4798      	blx	r3
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	00b3      	lsls	r3, r6, #2
 8002ef4:	58eb      	ldr	r3, [r5, r3]
 8002ef6:	4798      	blx	r3
 8002ef8:	3601      	adds	r6, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08002f70 	.word	0x08002f70
 8002f00:	08002f70 	.word	0x08002f70
 8002f04:	08002f70 	.word	0x08002f70
 8002f08:	08002f74 	.word	0x08002f74

08002f0c <memset>:
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	1882      	adds	r2, r0, r2
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	7019      	strb	r1, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
