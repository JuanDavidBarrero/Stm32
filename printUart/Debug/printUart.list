
printUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800341c  0800341c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800341c  0800341c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800341c  0800341c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  20000070  08003494  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  08003494  00020930  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f5e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000170d  00000000  00000000  00027ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  00029708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00029db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010738  00000000  00000000  0002a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009743  00000000  00000000  0003aae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e2a8  00000000  00000000  0004422b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a24d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  000a2524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003314 	.word	0x08003314

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003314 	.word	0x08003314

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <MX_GPIO_Init+0x48>)
 800023c:	695a      	ldr	r2, [r3, #20]
 800023e:	4b0f      	ldr	r3, [pc, #60]	; (800027c <MX_GPIO_Init+0x48>)
 8000240:	2180      	movs	r1, #128	; 0x80
 8000242:	03c9      	lsls	r1, r1, #15
 8000244:	430a      	orrs	r2, r1
 8000246:	615a      	str	r2, [r3, #20]
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <MX_GPIO_Init+0x48>)
 800024a:	695a      	ldr	r2, [r3, #20]
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	03db      	lsls	r3, r3, #15
 8000250:	4013      	ands	r3, r2
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <MX_GPIO_Init+0x48>)
 8000258:	695a      	ldr	r2, [r3, #20]
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <MX_GPIO_Init+0x48>)
 800025c:	2180      	movs	r1, #128	; 0x80
 800025e:	0289      	lsls	r1, r1, #10
 8000260:	430a      	orrs	r2, r1
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <MX_GPIO_Init+0x48>)
 8000266:	695a      	ldr	r2, [r3, #20]
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	029b      	lsls	r3, r3, #10
 800026c:	4013      	ands	r3, r2
 800026e:	603b      	str	r3, [r7, #0]
 8000270:	683b      	ldr	r3, [r7, #0]

}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	b002      	add	sp, #8
 8000278:	bd80      	pop	{r7, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	40021000 	.word	0x40021000

08000280 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000288:	2301      	movs	r3, #1
 800028a:	425b      	negs	r3, r3
 800028c:	1d39      	adds	r1, r7, #4
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <__io_putchar+0x20>)
 8000290:	2201      	movs	r2, #1
 8000292:	f001 fa55 	bl	8001740 <HAL_UART_Transmit>
	return ch;
 8000296:	687b      	ldr	r3, [r7, #4]
}
 8000298:	0018      	movs	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000894 	.word	0x20000894

080002a4 <main>:
uint8_t suma;
char buffer[2046] = {0};
char buffer2[2046]= {4};


int main(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

	HAL_Init();
 80002a8:	f000 fa1e 	bl	80006e8 <HAL_Init>

	SystemClock_Config();
 80002ac:	f000 f834 	bl	8000318 <SystemClock_Config>

	MX_GPIO_Init();
 80002b0:	f7ff ffc0 	bl	8000234 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80002b4:	f000 f970 	bl	8000598 <MX_USART1_UART_Init>

	while (1) {

		suma = a+b;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <main+0x60>)
 80002ba:	781a      	ldrb	r2, [r3, #0]
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <main+0x64>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	18d3      	adds	r3, r2, r3
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <main+0x68>)
 80002c6:	701a      	strb	r2, [r3, #0]
		a++;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <main+0x60>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <main+0x60>)
 80002d2:	701a      	strb	r2, [r3, #0]
		b+=4;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <main+0x64>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	3304      	adds	r3, #4
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <main+0x64>)
 80002de:	701a      	strb	r2, [r3, #0]

		sprintf(buffer,"el resultado de la suma = %i\r\n",suma);
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <main+0x68>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	001a      	movs	r2, r3
 80002e6:	490a      	ldr	r1, [pc, #40]	; (8000310 <main+0x6c>)
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <main+0x70>)
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 fe7e 	bl	8001fec <siprintf>
		printf(buffer);
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <main+0x70>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 fe60 	bl	8001fb8 <iprintf>
		HAL_Delay(1000);
 80002f8:	23fa      	movs	r3, #250	; 0xfa
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fa57 	bl	80007b0 <HAL_Delay>
		suma = a+b;
 8000302:	e7d9      	b.n	80002b8 <main+0x14>
 8000304:	2000008c 	.word	0x2000008c
 8000308:	2000008d 	.word	0x2000008d
 800030c:	2000008e 	.word	0x2000008e
 8000310:	0800332c 	.word	0x0800332c
 8000314:	20000090 	.word	0x20000090

08000318 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b095      	sub	sp, #84	; 0x54
 800031c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800031e:	2420      	movs	r4, #32
 8000320:	193b      	adds	r3, r7, r4
 8000322:	0018      	movs	r0, r3
 8000324:	2330      	movs	r3, #48	; 0x30
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f001 fe3d 	bl	8001fa8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800032e:	2310      	movs	r3, #16
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	0018      	movs	r0, r3
 8000334:	2310      	movs	r3, #16
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f001 fe35 	bl	8001fa8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800033e:	003b      	movs	r3, r7
 8000340:	0018      	movs	r0, r3
 8000342:	2310      	movs	r3, #16
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f001 fe2e 	bl	8001fa8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034c:	0021      	movs	r1, r4
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2201      	movs	r2, #1
 8000352:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2201      	movs	r2, #1
 8000358:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2202      	movs	r2, #2
 800035e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	0252      	lsls	r2, r2, #9
 8000366:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	0352      	lsls	r2, r2, #13
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000376:	187b      	adds	r3, r7, r1
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fc61 	bl	8000c40 <HAL_RCC_OscConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x6e>
		Error_Handler();
 8000382:	f000 f828 	bl	80003d6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000386:	2110      	movs	r1, #16
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2207      	movs	r2, #7
 800038c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2202      	movs	r2, #2
 8000392:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2101      	movs	r1, #1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 ff65 	bl	8001274 <HAL_RCC_ClockConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x9a>
		Error_Handler();
 80003ae:	f000 f812 	bl	80003d6 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003b2:	003b      	movs	r3, r7
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003be:	003b      	movs	r3, r7
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 f89b 	bl	80014fc <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0xb6>
		Error_Handler();
 80003ca:	f000 f804 	bl	80003d6 <Error_Handler>
	}
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b015      	add	sp, #84	; 0x54
 80003d4:	bd90      	pop	{r4, r7, pc}

080003d6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003d6:	b580      	push	{r7, lr}
 80003d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003da:	b672      	cpsid	i
}
 80003dc:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003de:	e7fe      	b.n	80003de <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x44>)
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <HAL_MspInit+0x44>)
 80003ec:	2101      	movs	r1, #1
 80003ee:	430a      	orrs	r2, r1
 80003f0:	619a      	str	r2, [r3, #24]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x44>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	2201      	movs	r2, #1
 80003f8:	4013      	ands	r3, r2
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <HAL_MspInit+0x44>)
 8000400:	69da      	ldr	r2, [r3, #28]
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <HAL_MspInit+0x44>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0549      	lsls	r1, r1, #21
 8000408:	430a      	orrs	r2, r1
 800040a:	61da      	str	r2, [r3, #28]
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <HAL_MspInit+0x44>)
 800040e:	69da      	ldr	r2, [r3, #28]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	055b      	lsls	r3, r3, #21
 8000414:	4013      	ands	r3, r2
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	40021000 	.word	0x40021000

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044c:	f000 f994 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e00a      	b.n	800047e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000468:	e000      	b.n	800046c <_read+0x16>
 800046a:	bf00      	nop
 800046c:	0001      	movs	r1, r0
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	60ba      	str	r2, [r7, #8]
 8000474:	b2ca      	uxtb	r2, r1
 8000476:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	3301      	adds	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	dbf0      	blt.n	8000468 <_read+0x12>
	}

return len;
 8000486:	687b      	ldr	r3, [r7, #4]
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b006      	add	sp, #24
 800048e:	bd80      	pop	{r7, pc}

08000490 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e009      	b.n	80004b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	60ba      	str	r2, [r7, #8]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff fee8 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	3301      	adds	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	697a      	ldr	r2, [r7, #20]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	dbf1      	blt.n	80004a2 <_write+0x12>
	}
	return len;
 80004be:	687b      	ldr	r3, [r7, #4]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b006      	add	sp, #24
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <_close>:

int _close(int file)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	return -1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	425b      	negs	r3, r3
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}

080004dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0192      	lsls	r2, r2, #6
 80004ec:	605a      	str	r2, [r3, #4]
	return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <_isatty>:

int _isatty(int file)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	return 1;
 8000500:	2301      	movs	r3, #1
}
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}

0800050a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b084      	sub	sp, #16
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
	return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}

08000520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	18d3      	adds	r3, r2, r3
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000550:	f001 fd00 	bl	8001f54 <__errno>
 8000554:	0003      	movs	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055a:	2301      	movs	r3, #1
 800055c:	425b      	negs	r3, r3
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	18d2      	adds	r2, r2, r3
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <_sbrk+0x64>)
 8000570:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	b006      	add	sp, #24
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20002000 	.word	0x20002000
 8000580:	00000400 	.word	0x00000400
 8000584:	20000890 	.word	0x20000890
 8000588:	20000930 	.word	0x20000930

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005a4:	22e1      	movs	r2, #225	; 0xe1
 80005a6:	0252      	lsls	r2, r2, #9
 80005a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 f85b 	bl	8001698 <HAL_UART_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005e6:	f7ff fef6 	bl	80003d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000894 	.word	0x20000894
 80005f4:	40013800 	.word	0x40013800

080005f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b08b      	sub	sp, #44	; 0x2c
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	2414      	movs	r4, #20
 8000602:	193b      	adds	r3, r7, r4
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f001 fccc 	bl	8001fa8 <memset>
  if(uartHandle->Instance==USART1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1d      	ldr	r2, [pc, #116]	; (800068c <HAL_UART_MspInit+0x94>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d133      	bne.n	8000682 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <HAL_UART_MspInit+0x98>)
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_UART_MspInit+0x98>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	01c9      	lsls	r1, r1, #7
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_UART_MspInit+0x98>)
 800062a:	699a      	ldr	r2, [r3, #24]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	01db      	lsls	r3, r3, #7
 8000630:	4013      	ands	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_UART_MspInit+0x98>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_UART_MspInit+0x98>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_UART_MspInit+0x98>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	22c0      	movs	r2, #192	; 0xc0
 8000656:	00d2      	lsls	r2, r2, #3
 8000658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	0021      	movs	r1, r4
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2202      	movs	r2, #2
 8000660:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2203      	movs	r2, #3
 800066c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2201      	movs	r2, #1
 8000672:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	187a      	adds	r2, r7, r1
 8000676:	2390      	movs	r3, #144	; 0x90
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f000 f96f 	bl	8000960 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b00b      	add	sp, #44	; 0x2c
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40013800 	.word	0x40013800
 8000690:	40021000 	.word	0x40021000

08000694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000698:	f7ff ff78 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c2:	f001 fc4d 	bl	8001f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fded 	bl	80002a4 <main>

080006ca <LoopForever>:

LoopForever:
    b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   r0, =_estack
 80006cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006d8:	08003424 	.word	0x08003424
  ldr r2, =_sbss
 80006dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006e0:	20000930 	.word	0x20000930

080006e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_IRQHandler>
	...

080006e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_Init+0x24>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_Init+0x24>)
 80006f2:	2110      	movs	r1, #16
 80006f4:	430a      	orrs	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f809 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fe:	f7ff fe6f 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_InitTick+0x5c>)
 800071a:	681c      	ldr	r4, [r3, #0]
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_InitTick+0x60>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	0019      	movs	r1, r3
 8000722:	23fa      	movs	r3, #250	; 0xfa
 8000724:	0098      	lsls	r0, r3, #2
 8000726:	f7ff fcf9 	bl	800011c <__udivsi3>
 800072a:	0003      	movs	r3, r0
 800072c:	0019      	movs	r1, r3
 800072e:	0020      	movs	r0, r4
 8000730:	f7ff fcf4 	bl	800011c <__udivsi3>
 8000734:	0003      	movs	r3, r0
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f905 	bl	8000946 <HAL_SYSTICK_Config>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000740:	2301      	movs	r3, #1
 8000742:	e00f      	b.n	8000764 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d80b      	bhi.n	8000762 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	2301      	movs	r3, #1
 800074e:	425b      	negs	r3, r3
 8000750:	2200      	movs	r2, #0
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f8e2 	bl	800091c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_InitTick+0x64>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b003      	add	sp, #12
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	001a      	movs	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	18d2      	adds	r2, r2, r3
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000008 	.word	0x20000008
 8000798:	2000091c 	.word	0x2000091c

0800079c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	2000091c 	.word	0x2000091c

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff fff0 	bl	800079c <HAL_GetTick>
 80007bc:	0003      	movs	r3, r0
 80007be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	001a      	movs	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	189b      	adds	r3, r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	f7ff ffe0 	bl	800079c <HAL_GetTick>
 80007dc:	0002      	movs	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000008 	.word	0x20000008

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b7f      	cmp	r3, #127	; 0x7f
 800080c:	d828      	bhi.n	8000860 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <__NVIC_SetPriority+0xd4>)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	33c0      	adds	r3, #192	; 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	589b      	ldr	r3, [r3, r2]
 800081e:	1dfa      	adds	r2, r7, #7
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	0011      	movs	r1, r2
 8000824:	2203      	movs	r2, #3
 8000826:	400a      	ands	r2, r1
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	21ff      	movs	r1, #255	; 0xff
 800082c:	4091      	lsls	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	43d2      	mvns	r2, r2
 8000832:	401a      	ands	r2, r3
 8000834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	401a      	ands	r2, r3
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	2303      	movs	r3, #3
 8000846:	4003      	ands	r3, r0
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <__NVIC_SetPriority+0xd4>)
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	430a      	orrs	r2, r1
 8000858:	33c0      	adds	r3, #192	; 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800085e:	e031      	b.n	80008c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <__NVIC_SetPriority+0xd8>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0019      	movs	r1, r3
 8000868:	230f      	movs	r3, #15
 800086a:	400b      	ands	r3, r1
 800086c:	3b08      	subs	r3, #8
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	3306      	adds	r3, #6
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	3304      	adds	r3, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1dfa      	adds	r2, r7, #7
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	0011      	movs	r1, r2
 8000880:	2203      	movs	r2, #3
 8000882:	400a      	ands	r2, r1
 8000884:	00d2      	lsls	r2, r2, #3
 8000886:	21ff      	movs	r1, #255	; 0xff
 8000888:	4091      	lsls	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	43d2      	mvns	r2, r2
 800088e:	401a      	ands	r2, r3
 8000890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	019b      	lsls	r3, r3, #6
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	401a      	ands	r2, r3
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	0018      	movs	r0, r3
 80008a0:	2303      	movs	r3, #3
 80008a2:	4003      	ands	r3, r0
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <__NVIC_SetPriority+0xd8>)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	001c      	movs	r4, r3
 80008b0:	230f      	movs	r3, #15
 80008b2:	4023      	ands	r3, r4
 80008b4:	3b08      	subs	r3, #8
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	430a      	orrs	r2, r1
 80008ba:	3306      	adds	r3, #6
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	18c3      	adds	r3, r0, r3
 80008c0:	3304      	adds	r3, #4
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b003      	add	sp, #12
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	045b      	lsls	r3, r3, #17
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d301      	bcc.n	80008ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e8:	2301      	movs	r3, #1
 80008ea:	e010      	b.n	800090e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <SysTick_Config+0x44>)
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	3a01      	subs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	2103      	movs	r1, #3
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff ff7c 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SysTick_Config+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SysTick_Config+0x44>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	210f      	movs	r1, #15
 8000928:	187b      	adds	r3, r7, r1
 800092a:	1c02      	adds	r2, r0, #0
 800092c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b004      	add	sp, #16
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ffbf 	bl	80008d4 <SysTick_Config>
 8000956:	0003      	movs	r3, r0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e14f      	b.n	8000c10 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2101      	movs	r1, #1
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d100      	bne.n	8000988 <HAL_GPIO_Init+0x28>
 8000986:	e140      	b.n	8000c0a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2203      	movs	r2, #3
 800098e:	4013      	ands	r3, r2
 8000990:	2b01      	cmp	r3, #1
 8000992:	d005      	beq.n	80009a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2203      	movs	r2, #3
 800099a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800099c:	2b02      	cmp	r3, #2
 800099e:	d130      	bne.n	8000a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	409a      	lsls	r2, r3
 80009ae:	0013      	movs	r3, r2
 80009b0:	43da      	mvns	r2, r3
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d6:	2201      	movs	r2, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	43da      	mvns	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	091b      	lsrs	r3, r3, #4
 80009ec:	2201      	movs	r2, #1
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2203      	movs	r2, #3
 8000a08:	4013      	ands	r3, r2
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d017      	beq.n	8000a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2203      	movs	r2, #3
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d123      	bne.n	8000a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	08da      	lsrs	r2, r3, #3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3208      	adds	r2, #8
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	58d3      	ldr	r3, [r2, r3]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	220f      	movs	r2, #15
 8000a62:	409a      	lsls	r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	43da      	mvns	r2, r3
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	691a      	ldr	r2, [r3, #16]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2107      	movs	r1, #7
 8000a76:	400b      	ands	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	08da      	lsrs	r2, r3, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3208      	adds	r2, #8
 8000a8c:	0092      	lsls	r2, r2, #2
 8000a8e:	6939      	ldr	r1, [r7, #16]
 8000a90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2203      	movs	r2, #3
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	23c0      	movs	r3, #192	; 0xc0
 8000acc:	029b      	lsls	r3, r3, #10
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d100      	bne.n	8000ad4 <HAL_GPIO_Init+0x174>
 8000ad2:	e09a      	b.n	8000c0a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000ad6:	699a      	ldr	r2, [r3, #24]
 8000ad8:	4b53      	ldr	r3, [pc, #332]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	430a      	orrs	r2, r1
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	4b51      	ldr	r3, [pc, #324]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aec:	4a4f      	ldr	r2, [pc, #316]	; (8000c2c <HAL_GPIO_Init+0x2cc>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	589b      	ldr	r3, [r3, r2]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4013      	ands	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	2390      	movs	r3, #144	; 0x90
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d013      	beq.n	8000b42 <HAL_GPIO_Init+0x1e2>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a44      	ldr	r2, [pc, #272]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d00d      	beq.n	8000b3e <HAL_GPIO_Init+0x1de>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a43      	ldr	r2, [pc, #268]	; (8000c34 <HAL_GPIO_Init+0x2d4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d007      	beq.n	8000b3a <HAL_GPIO_Init+0x1da>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <HAL_GPIO_Init+0x2d8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_GPIO_Init+0x1d6>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x1e4>
 8000b36:	2305      	movs	r3, #5
 8000b38:	e004      	b.n	8000b44 <HAL_GPIO_Init+0x1e4>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_Init+0x1e4>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x1e4>
 8000b42:	2300      	movs	r3, #0
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	2103      	movs	r1, #3
 8000b48:	400a      	ands	r2, r1
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b54:	4935      	ldr	r1, [pc, #212]	; (8000c2c <HAL_GPIO_Init+0x2cc>)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b62:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	039b      	lsls	r3, r3, #14
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	029b      	lsls	r3, r3, #10
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	025b      	lsls	r3, r3, #9
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	40da      	lsrs	r2, r3
 8000c18:	1e13      	subs	r3, r2, #0
 8000c1a:	d000      	beq.n	8000c1e <HAL_GPIO_Init+0x2be>
 8000c1c:	e6a8      	b.n	8000970 <HAL_GPIO_Init+0x10>
  } 
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b006      	add	sp, #24
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800
 8000c38:	48000c00 	.word	0x48000c00
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e301      	b.n	8001256 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d100      	bne.n	8000c5e <HAL_RCC_OscConfig+0x1e>
 8000c5c:	e08d      	b.n	8000d7a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c5e:	4bc3      	ldr	r3, [pc, #780]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	220c      	movs	r2, #12
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d00e      	beq.n	8000c88 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c6a:	4bc0      	ldr	r3, [pc, #768]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	220c      	movs	r2, #12
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d116      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x64>
 8000c76:	4bbd      	ldr	r3, [pc, #756]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	025b      	lsls	r3, r3, #9
 8000c7e:	401a      	ands	r2, r3
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	025b      	lsls	r3, r3, #9
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d10d      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	4bb8      	ldr	r3, [pc, #736]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	029b      	lsls	r3, r3, #10
 8000c90:	4013      	ands	r3, r2
 8000c92:	d100      	bne.n	8000c96 <HAL_RCC_OscConfig+0x56>
 8000c94:	e070      	b.n	8000d78 <HAL_RCC_OscConfig+0x138>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d000      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x60>
 8000c9e:	e06b      	b.n	8000d78 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e2d8      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d107      	bne.n	8000cbc <HAL_RCC_OscConfig+0x7c>
 8000cac:	4baf      	ldr	r3, [pc, #700]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4bae      	ldr	r3, [pc, #696]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	0249      	lsls	r1, r1, #9
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e02f      	b.n	8000d1c <HAL_RCC_OscConfig+0xdc>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10c      	bne.n	8000cde <HAL_RCC_OscConfig+0x9e>
 8000cc4:	4ba9      	ldr	r3, [pc, #676]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4ba8      	ldr	r3, [pc, #672]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cca:	49a9      	ldr	r1, [pc, #676]	; (8000f70 <HAL_RCC_OscConfig+0x330>)
 8000ccc:	400a      	ands	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	4ba6      	ldr	r3, [pc, #664]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4ba5      	ldr	r3, [pc, #660]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cd6:	49a7      	ldr	r1, [pc, #668]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e01e      	b.n	8000d1c <HAL_RCC_OscConfig+0xdc>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d10e      	bne.n	8000d04 <HAL_RCC_OscConfig+0xc4>
 8000ce6:	4ba1      	ldr	r3, [pc, #644]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4ba0      	ldr	r3, [pc, #640]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	02c9      	lsls	r1, r1, #11
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	4b9d      	ldr	r3, [pc, #628]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b9c      	ldr	r3, [pc, #624]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	0249      	lsls	r1, r1, #9
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e00b      	b.n	8000d1c <HAL_RCC_OscConfig+0xdc>
 8000d04:	4b99      	ldr	r3, [pc, #612]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b98      	ldr	r3, [pc, #608]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	4999      	ldr	r1, [pc, #612]	; (8000f70 <HAL_RCC_OscConfig+0x330>)
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	4b96      	ldr	r3, [pc, #600]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b95      	ldr	r3, [pc, #596]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d16:	4997      	ldr	r1, [pc, #604]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d18:	400a      	ands	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d014      	beq.n	8000d4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fd3a 	bl	800079c <HAL_GetTick>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2e:	f7ff fd35 	bl	800079c <HAL_GetTick>
 8000d32:	0002      	movs	r2, r0
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b64      	cmp	r3, #100	; 0x64
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e28a      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d40:	4b8a      	ldr	r3, [pc, #552]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_RCC_OscConfig+0xee>
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fd25 	bl	800079c <HAL_GetTick>
 8000d52:	0003      	movs	r3, r0
 8000d54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fd20 	bl	800079c <HAL_GetTick>
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	; 0x64
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e275      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	4b80      	ldr	r3, [pc, #512]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	029b      	lsls	r3, r3, #10
 8000d72:	4013      	ands	r3, r2
 8000d74:	d1f0      	bne.n	8000d58 <HAL_RCC_OscConfig+0x118>
 8000d76:	e000      	b.n	8000d7a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	d100      	bne.n	8000d86 <HAL_RCC_OscConfig+0x146>
 8000d84:	e069      	b.n	8000e5a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d86:	4b79      	ldr	r3, [pc, #484]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d00b      	beq.n	8000da8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d90:	4b76      	ldr	r3, [pc, #472]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	220c      	movs	r2, #12
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d11c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x196>
 8000d9c:	4b73      	ldr	r3, [pc, #460]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	025b      	lsls	r3, r3, #9
 8000da4:	4013      	ands	r3, r2
 8000da6:	d116      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da8:	4b70      	ldr	r3, [pc, #448]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2202      	movs	r2, #2
 8000dae:	4013      	ands	r3, r2
 8000db0:	d005      	beq.n	8000dbe <HAL_RCC_OscConfig+0x17e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d001      	beq.n	8000dbe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e24b      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	4b6b      	ldr	r3, [pc, #428]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	22f8      	movs	r2, #248	; 0xf8
 8000dc4:	4393      	bics	r3, r2
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	00da      	lsls	r2, r3, #3
 8000dce:	4b67      	ldr	r3, [pc, #412]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd4:	e041      	b.n	8000e5a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d024      	beq.n	8000e28 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dde:	4b63      	ldr	r3, [pc, #396]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b62      	ldr	r3, [pc, #392]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fcd7 	bl	800079c <HAL_GetTick>
 8000dee:	0003      	movs	r3, r0
 8000df0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df4:	f7ff fcd2 	bl	800079c <HAL_GetTick>
 8000df8:	0002      	movs	r2, r0
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e227      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e06:	4b59      	ldr	r3, [pc, #356]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d0f1      	beq.n	8000df4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e10:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	22f8      	movs	r2, #248	; 0xf8
 8000e16:	4393      	bics	r3, r2
 8000e18:	0019      	movs	r1, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	00da      	lsls	r2, r3, #3
 8000e20:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	e018      	b.n	8000e5a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e28:	4b50      	ldr	r3, [pc, #320]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	438a      	bics	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fcb2 	bl	800079c <HAL_GetTick>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fcad 	bl	800079c <HAL_GetTick>
 8000e42:	0002      	movs	r2, r0
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e202      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e50:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2202      	movs	r2, #2
 8000e56:	4013      	ands	r3, r2
 8000e58:	d1f1      	bne.n	8000e3e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2208      	movs	r2, #8
 8000e60:	4013      	ands	r3, r2
 8000e62:	d036      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d019      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e70:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e78:	f7ff fc90 	bl	800079c <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e82:	f7ff fc8b 	bl	800079c <HAL_GetTick>
 8000e86:	0002      	movs	r2, r0
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e1e0      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	2202      	movs	r2, #2
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d0f1      	beq.n	8000e82 <HAL_RCC_OscConfig+0x242>
 8000e9e:	e018      	b.n	8000ed2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea0:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eac:	f7ff fc76 	bl	800079c <HAL_GetTick>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fc71 	bl	800079c <HAL_GetTick>
 8000eba:	0002      	movs	r2, r0
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e1c6      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d1f1      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d100      	bne.n	8000ede <HAL_RCC_OscConfig+0x29e>
 8000edc:	e0b4      	b.n	8001048 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ede:	201f      	movs	r0, #31
 8000ee0:	183b      	adds	r3, r7, r0
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	055b      	lsls	r3, r3, #21
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d110      	bne.n	8000f14 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0549      	lsls	r1, r1, #21
 8000efc:	430a      	orrs	r2, r1
 8000efe:	61da      	str	r2, [r3, #28]
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	055b      	lsls	r3, r3, #21
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f0e:	183b      	adds	r3, r7, r0
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_RCC_OscConfig+0x338>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d11a      	bne.n	8000f56 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_RCC_OscConfig+0x338>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_RCC_OscConfig+0x338>)
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	0049      	lsls	r1, r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fc35 	bl	800079c <HAL_GetTick>
 8000f32:	0003      	movs	r3, r0
 8000f34:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f38:	f7ff fc30 	bl	800079c <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e185      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_RCC_OscConfig+0x338>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4013      	ands	r3, r2
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10e      	bne.n	8000f7c <HAL_RCC_OscConfig+0x33c>
 8000f5e:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000f60:	6a1a      	ldr	r2, [r3, #32]
 8000f62:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <HAL_RCC_OscConfig+0x32c>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	621a      	str	r2, [r3, #32]
 8000f6a:	e035      	b.n	8000fd8 <HAL_RCC_OscConfig+0x398>
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	fffeffff 	.word	0xfffeffff
 8000f74:	fffbffff 	.word	0xfffbffff
 8000f78:	40007000 	.word	0x40007000
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10c      	bne.n	8000f9e <HAL_RCC_OscConfig+0x35e>
 8000f84:	4bb6      	ldr	r3, [pc, #728]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000f86:	6a1a      	ldr	r2, [r3, #32]
 8000f88:	4bb5      	ldr	r3, [pc, #724]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	621a      	str	r2, [r3, #32]
 8000f90:	4bb3      	ldr	r3, [pc, #716]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	4bb2      	ldr	r3, [pc, #712]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000f96:	2104      	movs	r1, #4
 8000f98:	438a      	bics	r2, r1
 8000f9a:	621a      	str	r2, [r3, #32]
 8000f9c:	e01c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x398>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b05      	cmp	r3, #5
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x380>
 8000fa6:	4bae      	ldr	r3, [pc, #696]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	4bad      	ldr	r3, [pc, #692]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fac:	2104      	movs	r1, #4
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	621a      	str	r2, [r3, #32]
 8000fb2:	4bab      	ldr	r3, [pc, #684]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fb4:	6a1a      	ldr	r2, [r3, #32]
 8000fb6:	4baa      	ldr	r3, [pc, #680]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	621a      	str	r2, [r3, #32]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0x398>
 8000fc0:	4ba7      	ldr	r3, [pc, #668]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	4ba6      	ldr	r3, [pc, #664]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	438a      	bics	r2, r1
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	4ba4      	ldr	r3, [pc, #656]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fce:	6a1a      	ldr	r2, [r3, #32]
 8000fd0:	4ba3      	ldr	r3, [pc, #652]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	438a      	bics	r2, r1
 8000fd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d014      	beq.n	800100a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe0:	f7ff fbdc 	bl	800079c <HAL_GetTick>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe8:	e009      	b.n	8000ffe <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff fbd7 	bl	800079c <HAL_GetTick>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	4a9b      	ldr	r2, [pc, #620]	; (8001264 <HAL_RCC_OscConfig+0x624>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e12b      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffe:	4b98      	ldr	r3, [pc, #608]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	2202      	movs	r2, #2
 8001004:	4013      	ands	r3, r2
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x3aa>
 8001008:	e013      	b.n	8001032 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fbc7 	bl	800079c <HAL_GetTick>
 800100e:	0003      	movs	r3, r0
 8001010:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001012:	e009      	b.n	8001028 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001014:	f7ff fbc2 	bl	800079c <HAL_GetTick>
 8001018:	0002      	movs	r2, r0
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	4a91      	ldr	r2, [pc, #580]	; (8001264 <HAL_RCC_OscConfig+0x624>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e116      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	4b8d      	ldr	r3, [pc, #564]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001032:	231f      	movs	r3, #31
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d105      	bne.n	8001048 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103c:	4b88      	ldr	r3, [pc, #544]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800103e:	69da      	ldr	r2, [r3, #28]
 8001040:	4b87      	ldr	r3, [pc, #540]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001042:	4989      	ldr	r1, [pc, #548]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001044:	400a      	ands	r2, r1
 8001046:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2210      	movs	r2, #16
 800104e:	4013      	ands	r3, r2
 8001050:	d063      	beq.n	800111a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d12a      	bne.n	80010b0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800105a:	4b81      	ldr	r3, [pc, #516]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800105c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105e:	4b80      	ldr	r3, [pc, #512]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001060:	2104      	movs	r1, #4
 8001062:	430a      	orrs	r2, r1
 8001064:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001066:	4b7e      	ldr	r3, [pc, #504]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106a:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800106c:	2101      	movs	r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fb93 	bl	800079c <HAL_GetTick>
 8001076:	0003      	movs	r3, r0
 8001078:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800107c:	f7ff fb8e 	bl	800079c <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e0e3      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800108e:	4b74      	ldr	r3, [pc, #464]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d0f1      	beq.n	800107c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001098:	4b71      	ldr	r3, [pc, #452]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109c:	22f8      	movs	r2, #248	; 0xf8
 800109e:	4393      	bics	r3, r2
 80010a0:	0019      	movs	r1, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	00da      	lsls	r2, r3, #3
 80010a8:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010aa:	430a      	orrs	r2, r1
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
 80010ae:	e034      	b.n	800111a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	3305      	adds	r3, #5
 80010b6:	d111      	bne.n	80010dc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010b8:	4b69      	ldr	r3, [pc, #420]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010bc:	4b68      	ldr	r3, [pc, #416]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010be:	2104      	movs	r1, #4
 80010c0:	438a      	bics	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010c4:	4b66      	ldr	r3, [pc, #408]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c8:	22f8      	movs	r2, #248	; 0xf8
 80010ca:	4393      	bics	r3, r2
 80010cc:	0019      	movs	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	00da      	lsls	r2, r3, #3
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010d6:	430a      	orrs	r2, r1
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
 80010da:	e01e      	b.n	800111a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010dc:	4b60      	ldr	r3, [pc, #384]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e0:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010e2:	2104      	movs	r1, #4
 80010e4:	430a      	orrs	r2, r1
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010e8:	4b5d      	ldr	r3, [pc, #372]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ec:	4b5c      	ldr	r3, [pc, #368]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	438a      	bics	r2, r1
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f4:	f7ff fb52 	bl	800079c <HAL_GetTick>
 80010f8:	0003      	movs	r3, r0
 80010fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010fe:	f7ff fb4d 	bl	800079c <HAL_GetTick>
 8001102:	0002      	movs	r2, r0
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e0a2      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001110:	4b53      	ldr	r3, [pc, #332]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	2202      	movs	r2, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d1f1      	bne.n	80010fe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d100      	bne.n	8001124 <HAL_RCC_OscConfig+0x4e4>
 8001122:	e097      	b.n	8001254 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001124:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	220c      	movs	r2, #12
 800112a:	4013      	ands	r3, r2
 800112c:	2b08      	cmp	r3, #8
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x4f2>
 8001130:	e06b      	b.n	800120a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d14c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001140:	494a      	ldr	r1, [pc, #296]	; (800126c <HAL_RCC_OscConfig+0x62c>)
 8001142:	400a      	ands	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fb29 	bl	800079c <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fb24 	bl	800079c <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e079      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	049b      	lsls	r3, r3, #18
 800116a:	4013      	ands	r3, r2
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800116e:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	220f      	movs	r2, #15
 8001174:	4393      	bics	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800117e:	430a      	orrs	r2, r1
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
 8001182:	4b37      	ldr	r3, [pc, #220]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a3a      	ldr	r2, [pc, #232]	; (8001270 <HAL_RCC_OscConfig+0x630>)
 8001188:	4013      	ands	r3, r2
 800118a:	0019      	movs	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	431a      	orrs	r2, r3
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	0449      	lsls	r1, r1, #17
 80011a6:	430a      	orrs	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff faf7 	bl	800079c <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff faf2 	bl	800079c <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e047      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	049b      	lsls	r3, r3, #18
 80011ce:	4013      	ands	r3, r2
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x574>
 80011d2:	e03f      	b.n	8001254 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80011da:	4924      	ldr	r1, [pc, #144]	; (800126c <HAL_RCC_OscConfig+0x62c>)
 80011dc:	400a      	ands	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fadc 	bl	800079c <HAL_GetTick>
 80011e4:	0003      	movs	r3, r0
 80011e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ea:	f7ff fad7 	bl	800079c <HAL_GetTick>
 80011ee:	0002      	movs	r2, r0
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e02c      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	049b      	lsls	r3, r3, #18
 8001204:	4013      	ands	r3, r2
 8001206:	d1f0      	bne.n	80011ea <HAL_RCC_OscConfig+0x5aa>
 8001208:	e024      	b.n	8001254 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e01f      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_RCC_OscConfig+0x620>)
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	401a      	ands	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	429a      	cmp	r2, r3
 8001230:	d10e      	bne.n	8001250 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	220f      	movs	r2, #15
 8001236:	401a      	ands	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800123c:	429a      	cmp	r2, r3
 800123e:	d107      	bne.n	8001250 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	23f0      	movs	r3, #240	; 0xf0
 8001244:	039b      	lsls	r3, r3, #14
 8001246:	401a      	ands	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b008      	add	sp, #32
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40021000 	.word	0x40021000
 8001264:	00001388 	.word	0x00001388
 8001268:	efffffff 	.word	0xefffffff
 800126c:	feffffff 	.word	0xfeffffff
 8001270:	ffc2ffff 	.word	0xffc2ffff

08001274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0b3      	b.n	80013f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001288:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d911      	bls.n	80012ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	4393      	bics	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e09a      	b.n	80013f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d015      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2204      	movs	r2, #4
 80012ca:	4013      	ands	r3, r2
 80012cc:	d006      	beq.n	80012dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 80012d4:	21e0      	movs	r1, #224	; 0xe0
 80012d6:	00c9      	lsls	r1, r1, #3
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012dc:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	22f0      	movs	r2, #240	; 0xf0
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4013      	ands	r3, r2
 80012f8:	d040      	beq.n	800137c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	029b      	lsls	r3, r3, #10
 800130a:	4013      	ands	r3, r2
 800130c:	d114      	bne.n	8001338 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e06e      	b.n	80013f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	049b      	lsls	r3, r3, #18
 8001322:	4013      	ands	r3, r2
 8001324:	d108      	bne.n	8001338 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e062      	b.n	80013f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e05b      	b.n	80013f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fa26 	bl	800079c <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001354:	e009      	b.n	800136a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001356:	f7ff fa21 	bl	800079c <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <HAL_RCC_ClockConfig+0x18c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e042      	b.n	80013f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	220c      	movs	r2, #12
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1ec      	bne.n	8001356 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	4013      	ands	r3, r2
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d211      	bcs.n	80013ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4393      	bics	r3, r2
 8001392:	0019      	movs	r1, r3
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_RCC_ClockConfig+0x184>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4013      	ands	r3, r2
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e020      	b.n	80013f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2204      	movs	r2, #4
 80013b4:	4013      	ands	r3, r2
 80013b6:	d009      	beq.n	80013cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_RCC_ClockConfig+0x190>)
 80013be:	4013      	ands	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013cc:	f000 f820 	bl	8001410 <HAL_RCC_GetSysClockFreq>
 80013d0:	0001      	movs	r1, r0
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_ClockConfig+0x188>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	220f      	movs	r2, #15
 80013da:	4013      	ands	r3, r2
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_RCC_ClockConfig+0x194>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	000a      	movs	r2, r1
 80013e2:	40da      	lsrs	r2, r3
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_RCC_ClockConfig+0x198>)
 80013e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f7ff f991 	bl	8000710 <HAL_InitTick>
  
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b004      	add	sp, #16
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40022000 	.word	0x40022000
 80013fc:	40021000 	.word	0x40021000
 8001400:	00001388 	.word	0x00001388
 8001404:	fffff8ff 	.word	0xfffff8ff
 8001408:	0800334c 	.word	0x0800334c
 800140c:	20000000 	.word	0x20000000

08001410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_RCC_GetSysClockFreq+0x9c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	220c      	movs	r2, #12
 8001434:	4013      	ands	r3, r2
 8001436:	2b04      	cmp	r3, #4
 8001438:	d002      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0x30>
 800143a:	2b08      	cmp	r3, #8
 800143c:	d003      	beq.n	8001446 <HAL_RCC_GetSysClockFreq+0x36>
 800143e:	e02c      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001442:	613b      	str	r3, [r7, #16]
      break;
 8001444:	e02c      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	0c9b      	lsrs	r3, r3, #18
 800144a:	220f      	movs	r2, #15
 800144c:	4013      	ands	r3, r2
 800144e:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	220f      	movs	r2, #15
 800145a:	4013      	ands	r3, r2
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	4013      	ands	r3, r2
 800146a:	d009      	beq.n	8001480 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	4810      	ldr	r0, [pc, #64]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001470:	f7fe fe54 	bl	800011c <__udivsi3>
 8001474:	0003      	movs	r3, r0
 8001476:	001a      	movs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4353      	muls	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e009      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	000a      	movs	r2, r1
 8001484:	0152      	lsls	r2, r2, #5
 8001486:	1a52      	subs	r2, r2, r1
 8001488:	0193      	lsls	r3, r2, #6
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	185b      	adds	r3, r3, r1
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
      break;
 8001498:	e002      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800149c:	613b      	str	r3, [r7, #16]
      break;
 800149e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014a0:	693b      	ldr	r3, [r7, #16]
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b006      	add	sp, #24
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40021000 	.word	0x40021000
 80014b0:	007a1200 	.word	0x007a1200
 80014b4:	08003364 	.word	0x08003364
 80014b8:	08003374 	.word	0x08003374

080014bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_RCC_GetHCLKFreq+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80014d4:	f7ff fff2 	bl	80014bc <HAL_RCC_GetHCLKFreq>
 80014d8:	0001      	movs	r1, r0
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	2207      	movs	r2, #7
 80014e2:	4013      	ands	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	40d9      	lsrs	r1, r3
 80014ea:	000b      	movs	r3, r1
}    
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	40021000 	.word	0x40021000
 80014f8:	0800335c 	.word	0x0800335c

080014fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	4013      	ands	r3, r2
 8001516:	d100      	bne.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001518:	e08e      	b.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2017      	movs	r0, #23
 800151c:	183b      	adds	r3, r7, r0
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b57      	ldr	r3, [pc, #348]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	055b      	lsls	r3, r3, #21
 800152a:	4013      	ands	r3, r2
 800152c:	d110      	bne.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b54      	ldr	r3, [pc, #336]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0549      	lsls	r1, r1, #21
 8001538:	430a      	orrs	r2, r1
 800153a:	61da      	str	r2, [r3, #28]
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800153e:	69da      	ldr	r2, [r3, #28]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	055b      	lsls	r3, r3, #21
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	183b      	adds	r3, r7, r0
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4013      	ands	r3, r2
 800155a:	d11a      	bne.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155c:	4b49      	ldr	r3, [pc, #292]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b48      	ldr	r3, [pc, #288]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0049      	lsls	r1, r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff f917 	bl	800079c <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	e008      	b.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff f912 	bl	800079c <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e077      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4013      	ands	r3, r2
 8001590:	d0f0      	beq.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001594:	6a1a      	ldr	r2, [r3, #32]
 8001596:	23c0      	movs	r3, #192	; 0xc0
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d034      	beq.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	23c0      	movs	r3, #192	; 0xc0
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d02c      	beq.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a33      	ldr	r2, [pc, #204]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015c0:	6a1a      	ldr	r2, [r3, #32]
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0249      	lsls	r1, r1, #9
 80015c8:	430a      	orrs	r2, r1
 80015ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015d2:	492e      	ldr	r1, [pc, #184]	; (800168c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff f8d9 	bl	800079c <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	e009      	b.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff f8d4 	bl	800079c <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	4a25      	ldr	r2, [pc, #148]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e038      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001614:	4013      	ands	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800161e:	430a      	orrs	r2, r1
 8001620:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001622:	2317      	movs	r3, #23
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001632:	4918      	ldr	r1, [pc, #96]	; (8001694 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001634:	400a      	ands	r2, r1
 8001636:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2201      	movs	r2, #1
 800163e:	4013      	ands	r3, r2
 8001640:	d009      	beq.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	2203      	movs	r2, #3
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001652:	430a      	orrs	r2, r1
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2220      	movs	r2, #32
 800165c:	4013      	ands	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	2210      	movs	r2, #16
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001670:	430a      	orrs	r2, r1
 8001672:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b006      	add	sp, #24
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	fffffcff 	.word	0xfffffcff
 800168c:	fffeffff 	.word	0xfffeffff
 8001690:	00001388 	.word	0x00001388
 8001694:	efffffff 	.word	0xefffffff

08001698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e044      	b.n	8001734 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2278      	movs	r2, #120	; 0x78
 80016b6:	2100      	movs	r1, #0
 80016b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	0018      	movs	r0, r3
 80016be:	f7fe ff9b 	bl	80005f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2224      	movs	r2, #36	; 0x24
 80016c6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	438a      	bics	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 f8d0 	bl	8001880 <UART_SetConfig>
 80016e0:	0003      	movs	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e024      	b.n	8001734 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 fa03 	bl	8001b00 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	490d      	ldr	r1, [pc, #52]	; (800173c <HAL_UART_Init+0xa4>)
 8001706:	400a      	ands	r2, r1
 8001708:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2108      	movs	r1, #8
 8001716:	438a      	bics	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0018      	movs	r0, r3
 800172e:	f000 fa9b 	bl	8001c68 <UART_CheckIdleState>
 8001732:	0003      	movs	r3, r0
}
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}
 800173c:	fffff7ff 	.word	0xfffff7ff

08001740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af02      	add	r7, sp, #8
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001754:	2b20      	cmp	r3, #32
 8001756:	d000      	beq.n	800175a <HAL_UART_Transmit+0x1a>
 8001758:	e08d      	b.n	8001876 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_UART_Transmit+0x28>
 8001760:	1dbb      	adds	r3, r7, #6
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e085      	b.n	8001878 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	015b      	lsls	r3, r3, #5
 8001774:	429a      	cmp	r2, r3
 8001776:	d109      	bne.n	800178c <HAL_UART_Transmit+0x4c>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2201      	movs	r2, #1
 8001784:	4013      	ands	r3, r2
 8001786:	d001      	beq.n	800178c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e075      	b.n	8001878 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2284      	movs	r2, #132	; 0x84
 8001790:	2100      	movs	r1, #0
 8001792:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2221      	movs	r2, #33	; 0x21
 8001798:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800179a:	f7fe ffff 	bl	800079c <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1dba      	adds	r2, r7, #6
 80017a6:	2150      	movs	r1, #80	; 0x50
 80017a8:	8812      	ldrh	r2, [r2, #0]
 80017aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1dba      	adds	r2, r7, #6
 80017b0:	2152      	movs	r1, #82	; 0x52
 80017b2:	8812      	ldrh	r2, [r2, #0]
 80017b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	429a      	cmp	r2, r3
 80017c0:	d108      	bne.n	80017d4 <HAL_UART_Transmit+0x94>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d104      	bne.n	80017d4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	e003      	b.n	80017dc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80017dc:	e030      	b.n	8001840 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	0013      	movs	r3, r2
 80017e8:	2200      	movs	r2, #0
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	f000 fae4 	bl	8001db8 <UART_WaitOnFlagUntilTimeout>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d004      	beq.n	80017fe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e03c      	b.n	8001878 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	05d2      	lsls	r2, r2, #23
 800180e:	0dd2      	lsrs	r2, r2, #23
 8001810:	b292      	uxth	r2, r2
 8001812:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	3302      	adds	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	e008      	b.n	800182e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b292      	uxth	r2, r2
 8001826:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2252      	movs	r2, #82	; 0x52
 8001832:	5a9b      	ldrh	r3, [r3, r2]
 8001834:	b29b      	uxth	r3, r3
 8001836:	3b01      	subs	r3, #1
 8001838:	b299      	uxth	r1, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2252      	movs	r2, #82	; 0x52
 800183e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2252      	movs	r2, #82	; 0x52
 8001844:	5a9b      	ldrh	r3, [r3, r2]
 8001846:	b29b      	uxth	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1c8      	bne.n	80017de <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	0013      	movs	r3, r2
 8001856:	2200      	movs	r2, #0
 8001858:	2140      	movs	r1, #64	; 0x40
 800185a:	f000 faad 	bl	8001db8 <UART_WaitOnFlagUntilTimeout>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d004      	beq.n	800186c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2220      	movs	r2, #32
 8001866:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e005      	b.n	8001878 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001876:	2302      	movs	r3, #2
  }
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b008      	add	sp, #32
 800187e:	bd80      	pop	{r7, pc}

08001880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001888:	231e      	movs	r3, #30
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a8d      	ldr	r2, [pc, #564]	; (8001ae4 <UART_SetConfig+0x264>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a88      	ldr	r2, [pc, #544]	; (8001ae8 <UART_SetConfig+0x268>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a7f      	ldr	r2, [pc, #508]	; (8001aec <UART_SetConfig+0x26c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a7b      	ldr	r2, [pc, #492]	; (8001af0 <UART_SetConfig+0x270>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d127      	bne.n	8001956 <UART_SetConfig+0xd6>
 8001906:	4b7b      	ldr	r3, [pc, #492]	; (8001af4 <UART_SetConfig+0x274>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	2203      	movs	r2, #3
 800190c:	4013      	ands	r3, r2
 800190e:	2b03      	cmp	r3, #3
 8001910:	d00d      	beq.n	800192e <UART_SetConfig+0xae>
 8001912:	d81b      	bhi.n	800194c <UART_SetConfig+0xcc>
 8001914:	2b02      	cmp	r3, #2
 8001916:	d014      	beq.n	8001942 <UART_SetConfig+0xc2>
 8001918:	d818      	bhi.n	800194c <UART_SetConfig+0xcc>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <UART_SetConfig+0xa4>
 800191e:	2b01      	cmp	r3, #1
 8001920:	d00a      	beq.n	8001938 <UART_SetConfig+0xb8>
 8001922:	e013      	b.n	800194c <UART_SetConfig+0xcc>
 8001924:	231f      	movs	r3, #31
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e021      	b.n	8001972 <UART_SetConfig+0xf2>
 800192e:	231f      	movs	r3, #31
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	e01c      	b.n	8001972 <UART_SetConfig+0xf2>
 8001938:	231f      	movs	r3, #31
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	2204      	movs	r2, #4
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e017      	b.n	8001972 <UART_SetConfig+0xf2>
 8001942:	231f      	movs	r3, #31
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2208      	movs	r2, #8
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e012      	b.n	8001972 <UART_SetConfig+0xf2>
 800194c:	231f      	movs	r3, #31
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2210      	movs	r2, #16
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	e00d      	b.n	8001972 <UART_SetConfig+0xf2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a67      	ldr	r2, [pc, #412]	; (8001af8 <UART_SetConfig+0x278>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d104      	bne.n	800196a <UART_SetConfig+0xea>
 8001960:	231f      	movs	r3, #31
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e003      	b.n	8001972 <UART_SetConfig+0xf2>
 800196a:	231f      	movs	r3, #31
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2210      	movs	r2, #16
 8001970:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	429a      	cmp	r2, r3
 800197c:	d15c      	bne.n	8001a38 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800197e:	231f      	movs	r3, #31
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b08      	cmp	r3, #8
 8001986:	d015      	beq.n	80019b4 <UART_SetConfig+0x134>
 8001988:	dc18      	bgt.n	80019bc <UART_SetConfig+0x13c>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d00d      	beq.n	80019aa <UART_SetConfig+0x12a>
 800198e:	dc15      	bgt.n	80019bc <UART_SetConfig+0x13c>
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <UART_SetConfig+0x11a>
 8001994:	2b02      	cmp	r3, #2
 8001996:	d005      	beq.n	80019a4 <UART_SetConfig+0x124>
 8001998:	e010      	b.n	80019bc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800199a:	f7ff fd99 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
 800199e:	0003      	movs	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
        break;
 80019a2:	e012      	b.n	80019ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80019a4:	4b55      	ldr	r3, [pc, #340]	; (8001afc <UART_SetConfig+0x27c>)
 80019a6:	61bb      	str	r3, [r7, #24]
        break;
 80019a8:	e00f      	b.n	80019ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80019aa:	f7ff fd31 	bl	8001410 <HAL_RCC_GetSysClockFreq>
 80019ae:	0003      	movs	r3, r0
 80019b0:	61bb      	str	r3, [r7, #24]
        break;
 80019b2:	e00a      	b.n	80019ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	61bb      	str	r3, [r7, #24]
        break;
 80019ba:	e006      	b.n	80019ca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80019c0:	231e      	movs	r3, #30
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
        break;
 80019c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d100      	bne.n	80019d2 <UART_SetConfig+0x152>
 80019d0:	e07a      	b.n	8001ac8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	005a      	lsls	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	18d2      	adds	r2, r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	0019      	movs	r1, r3
 80019e4:	0010      	movs	r0, r2
 80019e6:	f7fe fb99 	bl	800011c <__udivsi3>
 80019ea:	0003      	movs	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d91c      	bls.n	8001a2e <UART_SetConfig+0x1ae>
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	025b      	lsls	r3, r3, #9
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d217      	bcs.n	8001a2e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	200e      	movs	r0, #14
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	210f      	movs	r1, #15
 8001a08:	438a      	bics	r2, r1
 8001a0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2207      	movs	r2, #7
 8001a14:	4013      	ands	r3, r2
 8001a16:	b299      	uxth	r1, r3
 8001a18:	183b      	adds	r3, r7, r0
 8001a1a:	183a      	adds	r2, r7, r0
 8001a1c:	8812      	ldrh	r2, [r2, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	183a      	adds	r2, r7, r0
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	e04c      	b.n	8001ac8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001a2e:	231e      	movs	r3, #30
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e047      	b.n	8001ac8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001a38:	231f      	movs	r3, #31
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d015      	beq.n	8001a6e <UART_SetConfig+0x1ee>
 8001a42:	dc18      	bgt.n	8001a76 <UART_SetConfig+0x1f6>
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d00d      	beq.n	8001a64 <UART_SetConfig+0x1e4>
 8001a48:	dc15      	bgt.n	8001a76 <UART_SetConfig+0x1f6>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <UART_SetConfig+0x1d4>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d005      	beq.n	8001a5e <UART_SetConfig+0x1de>
 8001a52:	e010      	b.n	8001a76 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a54:	f7ff fd3c 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	61bb      	str	r3, [r7, #24]
        break;
 8001a5c:	e012      	b.n	8001a84 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001a5e:	4b27      	ldr	r3, [pc, #156]	; (8001afc <UART_SetConfig+0x27c>)
 8001a60:	61bb      	str	r3, [r7, #24]
        break;
 8001a62:	e00f      	b.n	8001a84 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a64:	f7ff fcd4 	bl	8001410 <HAL_RCC_GetSysClockFreq>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
        break;
 8001a6c:	e00a      	b.n	8001a84 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	61bb      	str	r3, [r7, #24]
        break;
 8001a74:	e006      	b.n	8001a84 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a7a:	231e      	movs	r3, #30
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
        break;
 8001a82:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01e      	beq.n	8001ac8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	085a      	lsrs	r2, r3, #1
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	18d2      	adds	r2, r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0019      	movs	r1, r3
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	f7fe fb3e 	bl	800011c <__udivsi3>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	d90a      	bls.n	8001ac0 <UART_SetConfig+0x240>
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d205      	bcs.n	8001ac0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	e003      	b.n	8001ac8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001ac0:	231e      	movs	r3, #30
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001ad4:	231e      	movs	r3, #30
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b008      	add	sp, #32
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	ffff69f3 	.word	0xffff69f3
 8001ae8:	ffffcfff 	.word	0xffffcfff
 8001aec:	fffff4ff 	.word	0xfffff4ff
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40004400 	.word	0x40004400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <UART_AdvFeatureConfig+0x144>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	d00b      	beq.n	8001b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a43      	ldr	r2, [pc, #268]	; (8001c48 <UART_AdvFeatureConfig+0x148>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2204      	movs	r2, #4
 8001b52:	4013      	ands	r3, r2
 8001b54:	d00b      	beq.n	8001b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <UART_AdvFeatureConfig+0x14c>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2208      	movs	r2, #8
 8001b74:	4013      	ands	r3, r2
 8001b76:	d00b      	beq.n	8001b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <UART_AdvFeatureConfig+0x150>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	2210      	movs	r2, #16
 8001b96:	4013      	ands	r3, r2
 8001b98:	d00b      	beq.n	8001bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <UART_AdvFeatureConfig+0x154>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d00b      	beq.n	8001bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <UART_AdvFeatureConfig+0x158>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2240      	movs	r2, #64	; 0x40
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <UART_AdvFeatureConfig+0x15c>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	035b      	lsls	r3, r3, #13
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d10b      	bne.n	8001c1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <UART_AdvFeatureConfig+0x160>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	4013      	ands	r3, r2
 8001c22:	d00b      	beq.n	8001c3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <UART_AdvFeatureConfig+0x164>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
  }
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	fffdffff 	.word	0xfffdffff
 8001c48:	fffeffff 	.word	0xfffeffff
 8001c4c:	fffbffff 	.word	0xfffbffff
 8001c50:	ffff7fff 	.word	0xffff7fff
 8001c54:	ffffefff 	.word	0xffffefff
 8001c58:	ffffdfff 	.word	0xffffdfff
 8001c5c:	ffefffff 	.word	0xffefffff
 8001c60:	ff9fffff 	.word	0xff9fffff
 8001c64:	fff7ffff 	.word	0xfff7ffff

08001c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b092      	sub	sp, #72	; 0x48
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2284      	movs	r2, #132	; 0x84
 8001c74:	2100      	movs	r1, #0
 8001c76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001c78:	f7fe fd90 	bl	800079c <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2208      	movs	r2, #8
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d12c      	bne.n	8001ce8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	0391      	lsls	r1, r2, #14
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4a46      	ldr	r2, [pc, #280]	; (8001db0 <UART_CheckIdleState+0x148>)
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f000 f88c 	bl	8001db8 <UART_WaitOnFlagUntilTimeout>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d021      	beq.n	8001ce8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	f383 8810 	msr	PRIMASK, r3
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	438a      	bics	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	f383 8810 	msr	PRIMASK, r3
}
 8001cd4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2278      	movs	r2, #120	; 0x78
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e05f      	b.n	8001da8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d146      	bne.n	8001d84 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	03d1      	lsls	r1, r2, #15
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4a2c      	ldr	r2, [pc, #176]	; (8001db0 <UART_CheckIdleState+0x148>)
 8001d00:	9200      	str	r2, [sp, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f000 f858 	bl	8001db8 <UART_WaitOnFlagUntilTimeout>
 8001d08:	1e03      	subs	r3, r0, #0
 8001d0a:	d03b      	beq.n	8001d84 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
 8001d16:	2301      	movs	r3, #1
 8001d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f383 8810 	msr	PRIMASK, r3
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4921      	ldr	r1, [pc, #132]	; (8001db4 <UART_CheckIdleState+0x14c>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f383 8810 	msr	PRIMASK, r3
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d42:	61bb      	str	r3, [r7, #24]
  return(result);
 8001d44:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
 8001d48:	2301      	movs	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f383 8810 	msr	PRIMASK, r3
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	438a      	bics	r2, r1
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	f383 8810 	msr	PRIMASK, r3
}
 8001d6e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	2120      	movs	r1, #32
 8001d76:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2278      	movs	r2, #120	; 0x78
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e011      	b.n	8001da8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	2120      	movs	r1, #32
 8001d90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2278      	movs	r2, #120	; 0x78
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b010      	add	sp, #64	; 0x40
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	01ffffff 	.word	0x01ffffff
 8001db4:	fffffedf 	.word	0xfffffedf

08001db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc8:	e04b      	b.n	8001e62 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	d048      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd0:	f7fe fce4 	bl	800079c <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d302      	bcc.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e04b      	b.n	8001e82 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d035      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d111      	bne.n	8001e28 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 f83c 	bl	8001e8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2284      	movs	r2, #132	; 0x84
 8001e18:	2108      	movs	r1, #8
 8001e1a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2278      	movs	r2, #120	; 0x78
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e02c      	b.n	8001e82 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	401a      	ands	r2, r3
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d112      	bne.n	8001e62 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 f81f 	bl	8001e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2284      	movs	r2, #132	; 0x84
 8001e52:	2120      	movs	r1, #32
 8001e54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2278      	movs	r2, #120	; 0x78
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e00f      	b.n	8001e82 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	425a      	negs	r2, r3
 8001e72:	4153      	adcs	r3, r2
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	001a      	movs	r2, r3
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d0a4      	beq.n	8001dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b004      	add	sp, #16
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e94:	f3ef 8310 	mrs	r3, PRIMASK
 8001e98:	617b      	str	r3, [r7, #20]
  return(result);
 8001e9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f383 8810 	msr	PRIMASK, r3
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4926      	ldr	r1, [pc, #152]	; (8001f50 <UART_EndRxTransfer+0xc4>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f383 8810 	msr	PRIMASK, r3
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eca:	623b      	str	r3, [r7, #32]
  return(result);
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f383 8810 	msr	PRIMASK, r3
}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	438a      	bics	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	f383 8810 	msr	PRIMASK, r3
}
 8001ef6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d118      	bne.n	8001f32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f00:	f3ef 8310 	mrs	r3, PRIMASK
 8001f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f383 8810 	msr	PRIMASK, r3
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2110      	movs	r1, #16
 8001f22:	438a      	bics	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f383 8810 	msr	PRIMASK, r3
}
 8001f30:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	2120      	movs	r1, #32
 8001f38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b00e      	add	sp, #56	; 0x38
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	fffffedf 	.word	0xfffffedf

08001f54 <__errno>:
 8001f54:	4b01      	ldr	r3, [pc, #4]	; (8001f5c <__errno+0x8>)
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	4770      	bx	lr
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	2000000c 	.word	0x2000000c

08001f60 <__libc_init_array>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	2600      	movs	r6, #0
 8001f64:	4d0c      	ldr	r5, [pc, #48]	; (8001f98 <__libc_init_array+0x38>)
 8001f66:	4c0d      	ldr	r4, [pc, #52]	; (8001f9c <__libc_init_array+0x3c>)
 8001f68:	1b64      	subs	r4, r4, r5
 8001f6a:	10a4      	asrs	r4, r4, #2
 8001f6c:	42a6      	cmp	r6, r4
 8001f6e:	d109      	bne.n	8001f84 <__libc_init_array+0x24>
 8001f70:	2600      	movs	r6, #0
 8001f72:	f001 f9cf 	bl	8003314 <_init>
 8001f76:	4d0a      	ldr	r5, [pc, #40]	; (8001fa0 <__libc_init_array+0x40>)
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <__libc_init_array+0x44>)
 8001f7a:	1b64      	subs	r4, r4, r5
 8001f7c:	10a4      	asrs	r4, r4, #2
 8001f7e:	42a6      	cmp	r6, r4
 8001f80:	d105      	bne.n	8001f8e <__libc_init_array+0x2e>
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	00b3      	lsls	r3, r6, #2
 8001f86:	58eb      	ldr	r3, [r5, r3]
 8001f88:	4798      	blx	r3
 8001f8a:	3601      	adds	r6, #1
 8001f8c:	e7ee      	b.n	8001f6c <__libc_init_array+0xc>
 8001f8e:	00b3      	lsls	r3, r6, #2
 8001f90:	58eb      	ldr	r3, [r5, r3]
 8001f92:	4798      	blx	r3
 8001f94:	3601      	adds	r6, #1
 8001f96:	e7f2      	b.n	8001f7e <__libc_init_array+0x1e>
 8001f98:	0800341c 	.word	0x0800341c
 8001f9c:	0800341c 	.word	0x0800341c
 8001fa0:	0800341c 	.word	0x0800341c
 8001fa4:	08003420 	.word	0x08003420

08001fa8 <memset>:
 8001fa8:	0003      	movs	r3, r0
 8001faa:	1882      	adds	r2, r0, r2
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d100      	bne.n	8001fb2 <memset+0xa>
 8001fb0:	4770      	bx	lr
 8001fb2:	7019      	strb	r1, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	e7f9      	b.n	8001fac <memset+0x4>

08001fb8 <iprintf>:
 8001fb8:	b40f      	push	{r0, r1, r2, r3}
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <iprintf+0x30>)
 8001fbc:	b513      	push	{r0, r1, r4, lr}
 8001fbe:	681c      	ldr	r4, [r3, #0]
 8001fc0:	2c00      	cmp	r4, #0
 8001fc2:	d005      	beq.n	8001fd0 <iprintf+0x18>
 8001fc4:	69a3      	ldr	r3, [r4, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <iprintf+0x18>
 8001fca:	0020      	movs	r0, r4
 8001fcc:	f000 f890 	bl	80020f0 <__sinit>
 8001fd0:	ab05      	add	r3, sp, #20
 8001fd2:	0020      	movs	r0, r4
 8001fd4:	9a04      	ldr	r2, [sp, #16]
 8001fd6:	68a1      	ldr	r1, [r4, #8]
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	f000 fb4f 	bl	800267c <_vfiprintf_r>
 8001fde:	bc16      	pop	{r1, r2, r4}
 8001fe0:	bc08      	pop	{r3}
 8001fe2:	b004      	add	sp, #16
 8001fe4:	4718      	bx	r3
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	2000000c 	.word	0x2000000c

08001fec <siprintf>:
 8001fec:	b40e      	push	{r1, r2, r3}
 8001fee:	b500      	push	{lr}
 8001ff0:	490b      	ldr	r1, [pc, #44]	; (8002020 <siprintf+0x34>)
 8001ff2:	b09c      	sub	sp, #112	; 0x70
 8001ff4:	ab1d      	add	r3, sp, #116	; 0x74
 8001ff6:	9002      	str	r0, [sp, #8]
 8001ff8:	9006      	str	r0, [sp, #24]
 8001ffa:	9107      	str	r1, [sp, #28]
 8001ffc:	9104      	str	r1, [sp, #16]
 8001ffe:	4809      	ldr	r0, [pc, #36]	; (8002024 <siprintf+0x38>)
 8002000:	4909      	ldr	r1, [pc, #36]	; (8002028 <siprintf+0x3c>)
 8002002:	cb04      	ldmia	r3!, {r2}
 8002004:	9105      	str	r1, [sp, #20]
 8002006:	6800      	ldr	r0, [r0, #0]
 8002008:	a902      	add	r1, sp, #8
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	f000 fa0e 	bl	800242c <_svfiprintf_r>
 8002010:	2300      	movs	r3, #0
 8002012:	9a02      	ldr	r2, [sp, #8]
 8002014:	7013      	strb	r3, [r2, #0]
 8002016:	b01c      	add	sp, #112	; 0x70
 8002018:	bc08      	pop	{r3}
 800201a:	b003      	add	sp, #12
 800201c:	4718      	bx	r3
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	7fffffff 	.word	0x7fffffff
 8002024:	2000000c 	.word	0x2000000c
 8002028:	ffff0208 	.word	0xffff0208

0800202c <std>:
 800202c:	2300      	movs	r3, #0
 800202e:	b510      	push	{r4, lr}
 8002030:	0004      	movs	r4, r0
 8002032:	6003      	str	r3, [r0, #0]
 8002034:	6043      	str	r3, [r0, #4]
 8002036:	6083      	str	r3, [r0, #8]
 8002038:	8181      	strh	r1, [r0, #12]
 800203a:	6643      	str	r3, [r0, #100]	; 0x64
 800203c:	0019      	movs	r1, r3
 800203e:	81c2      	strh	r2, [r0, #14]
 8002040:	6103      	str	r3, [r0, #16]
 8002042:	6143      	str	r3, [r0, #20]
 8002044:	6183      	str	r3, [r0, #24]
 8002046:	2208      	movs	r2, #8
 8002048:	305c      	adds	r0, #92	; 0x5c
 800204a:	f7ff ffad 	bl	8001fa8 <memset>
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <std+0x38>)
 8002050:	6224      	str	r4, [r4, #32]
 8002052:	6263      	str	r3, [r4, #36]	; 0x24
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <std+0x3c>)
 8002056:	62a3      	str	r3, [r4, #40]	; 0x28
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <std+0x40>)
 800205a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <std+0x44>)
 800205e:	6323      	str	r3, [r4, #48]	; 0x30
 8002060:	bd10      	pop	{r4, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	08002c19 	.word	0x08002c19
 8002068:	08002c41 	.word	0x08002c41
 800206c:	08002c79 	.word	0x08002c79
 8002070:	08002ca5 	.word	0x08002ca5

08002074 <_cleanup_r>:
 8002074:	b510      	push	{r4, lr}
 8002076:	4902      	ldr	r1, [pc, #8]	; (8002080 <_cleanup_r+0xc>)
 8002078:	f000 f8ba 	bl	80021f0 <_fwalk_reent>
 800207c:	bd10      	pop	{r4, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	08002fb1 	.word	0x08002fb1

08002084 <__sfmoreglue>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	2568      	movs	r5, #104	; 0x68
 8002088:	1e4a      	subs	r2, r1, #1
 800208a:	4355      	muls	r5, r2
 800208c:	000e      	movs	r6, r1
 800208e:	0029      	movs	r1, r5
 8002090:	3174      	adds	r1, #116	; 0x74
 8002092:	f000 f8f3 	bl	800227c <_malloc_r>
 8002096:	1e04      	subs	r4, r0, #0
 8002098:	d008      	beq.n	80020ac <__sfmoreglue+0x28>
 800209a:	2100      	movs	r1, #0
 800209c:	002a      	movs	r2, r5
 800209e:	6001      	str	r1, [r0, #0]
 80020a0:	6046      	str	r6, [r0, #4]
 80020a2:	300c      	adds	r0, #12
 80020a4:	60a0      	str	r0, [r4, #8]
 80020a6:	3268      	adds	r2, #104	; 0x68
 80020a8:	f7ff ff7e 	bl	8001fa8 <memset>
 80020ac:	0020      	movs	r0, r4
 80020ae:	bd70      	pop	{r4, r5, r6, pc}

080020b0 <__sfp_lock_acquire>:
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4802      	ldr	r0, [pc, #8]	; (80020bc <__sfp_lock_acquire+0xc>)
 80020b4:	f000 f8bd 	bl	8002232 <__retarget_lock_acquire_recursive>
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000921 	.word	0x20000921

080020c0 <__sfp_lock_release>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4802      	ldr	r0, [pc, #8]	; (80020cc <__sfp_lock_release+0xc>)
 80020c4:	f000 f8b6 	bl	8002234 <__retarget_lock_release_recursive>
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000921 	.word	0x20000921

080020d0 <__sinit_lock_acquire>:
 80020d0:	b510      	push	{r4, lr}
 80020d2:	4802      	ldr	r0, [pc, #8]	; (80020dc <__sinit_lock_acquire+0xc>)
 80020d4:	f000 f8ad 	bl	8002232 <__retarget_lock_acquire_recursive>
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	20000922 	.word	0x20000922

080020e0 <__sinit_lock_release>:
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <__sinit_lock_release+0xc>)
 80020e4:	f000 f8a6 	bl	8002234 <__retarget_lock_release_recursive>
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	20000922 	.word	0x20000922

080020f0 <__sinit>:
 80020f0:	b513      	push	{r0, r1, r4, lr}
 80020f2:	0004      	movs	r4, r0
 80020f4:	f7ff ffec 	bl	80020d0 <__sinit_lock_acquire>
 80020f8:	69a3      	ldr	r3, [r4, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <__sinit+0x14>
 80020fe:	f7ff ffef 	bl	80020e0 <__sinit_lock_release>
 8002102:	bd13      	pop	{r0, r1, r4, pc}
 8002104:	64a3      	str	r3, [r4, #72]	; 0x48
 8002106:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002108:	6523      	str	r3, [r4, #80]	; 0x50
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <__sinit+0x68>)
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <__sinit+0x6c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	62a2      	str	r2, [r4, #40]	; 0x28
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	42a3      	cmp	r3, r4
 8002116:	d101      	bne.n	800211c <__sinit+0x2c>
 8002118:	2301      	movs	r3, #1
 800211a:	61a3      	str	r3, [r4, #24]
 800211c:	0020      	movs	r0, r4
 800211e:	f000 f81f 	bl	8002160 <__sfp>
 8002122:	6060      	str	r0, [r4, #4]
 8002124:	0020      	movs	r0, r4
 8002126:	f000 f81b 	bl	8002160 <__sfp>
 800212a:	60a0      	str	r0, [r4, #8]
 800212c:	0020      	movs	r0, r4
 800212e:	f000 f817 	bl	8002160 <__sfp>
 8002132:	2200      	movs	r2, #0
 8002134:	2104      	movs	r1, #4
 8002136:	60e0      	str	r0, [r4, #12]
 8002138:	6860      	ldr	r0, [r4, #4]
 800213a:	f7ff ff77 	bl	800202c <std>
 800213e:	2201      	movs	r2, #1
 8002140:	2109      	movs	r1, #9
 8002142:	68a0      	ldr	r0, [r4, #8]
 8002144:	f7ff ff72 	bl	800202c <std>
 8002148:	2202      	movs	r2, #2
 800214a:	2112      	movs	r1, #18
 800214c:	68e0      	ldr	r0, [r4, #12]
 800214e:	f7ff ff6d 	bl	800202c <std>
 8002152:	2301      	movs	r3, #1
 8002154:	61a3      	str	r3, [r4, #24]
 8002156:	e7d2      	b.n	80020fe <__sinit+0xe>
 8002158:	08003384 	.word	0x08003384
 800215c:	08002075 	.word	0x08002075

08002160 <__sfp>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	0007      	movs	r7, r0
 8002164:	f7ff ffa4 	bl	80020b0 <__sfp_lock_acquire>
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <__sfp+0x88>)
 800216a:	681e      	ldr	r6, [r3, #0]
 800216c:	69b3      	ldr	r3, [r6, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <__sfp+0x18>
 8002172:	0030      	movs	r0, r6
 8002174:	f7ff ffbc 	bl	80020f0 <__sinit>
 8002178:	3648      	adds	r6, #72	; 0x48
 800217a:	68b4      	ldr	r4, [r6, #8]
 800217c:	6873      	ldr	r3, [r6, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	d504      	bpl.n	800218c <__sfp+0x2c>
 8002182:	6833      	ldr	r3, [r6, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d022      	beq.n	80021ce <__sfp+0x6e>
 8002188:	6836      	ldr	r6, [r6, #0]
 800218a:	e7f6      	b.n	800217a <__sfp+0x1a>
 800218c:	220c      	movs	r2, #12
 800218e:	5ea5      	ldrsh	r5, [r4, r2]
 8002190:	2d00      	cmp	r5, #0
 8002192:	d11a      	bne.n	80021ca <__sfp+0x6a>
 8002194:	0020      	movs	r0, r4
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <__sfp+0x8c>)
 8002198:	3058      	adds	r0, #88	; 0x58
 800219a:	60e3      	str	r3, [r4, #12]
 800219c:	6665      	str	r5, [r4, #100]	; 0x64
 800219e:	f000 f847 	bl	8002230 <__retarget_lock_init_recursive>
 80021a2:	f7ff ff8d 	bl	80020c0 <__sfp_lock_release>
 80021a6:	0020      	movs	r0, r4
 80021a8:	2208      	movs	r2, #8
 80021aa:	0029      	movs	r1, r5
 80021ac:	6025      	str	r5, [r4, #0]
 80021ae:	60a5      	str	r5, [r4, #8]
 80021b0:	6065      	str	r5, [r4, #4]
 80021b2:	6125      	str	r5, [r4, #16]
 80021b4:	6165      	str	r5, [r4, #20]
 80021b6:	61a5      	str	r5, [r4, #24]
 80021b8:	305c      	adds	r0, #92	; 0x5c
 80021ba:	f7ff fef5 	bl	8001fa8 <memset>
 80021be:	6365      	str	r5, [r4, #52]	; 0x34
 80021c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80021c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80021c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80021c6:	0020      	movs	r0, r4
 80021c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ca:	3468      	adds	r4, #104	; 0x68
 80021cc:	e7d7      	b.n	800217e <__sfp+0x1e>
 80021ce:	2104      	movs	r1, #4
 80021d0:	0038      	movs	r0, r7
 80021d2:	f7ff ff57 	bl	8002084 <__sfmoreglue>
 80021d6:	1e04      	subs	r4, r0, #0
 80021d8:	6030      	str	r0, [r6, #0]
 80021da:	d1d5      	bne.n	8002188 <__sfp+0x28>
 80021dc:	f7ff ff70 	bl	80020c0 <__sfp_lock_release>
 80021e0:	230c      	movs	r3, #12
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	e7ef      	b.n	80021c6 <__sfp+0x66>
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	08003384 	.word	0x08003384
 80021ec:	ffff0001 	.word	0xffff0001

080021f0 <_fwalk_reent>:
 80021f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021f2:	0004      	movs	r4, r0
 80021f4:	0006      	movs	r6, r0
 80021f6:	2700      	movs	r7, #0
 80021f8:	9101      	str	r1, [sp, #4]
 80021fa:	3448      	adds	r4, #72	; 0x48
 80021fc:	6863      	ldr	r3, [r4, #4]
 80021fe:	68a5      	ldr	r5, [r4, #8]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	9b00      	ldr	r3, [sp, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	d504      	bpl.n	8002214 <_fwalk_reent+0x24>
 800220a:	6824      	ldr	r4, [r4, #0]
 800220c:	2c00      	cmp	r4, #0
 800220e:	d1f5      	bne.n	80021fc <_fwalk_reent+0xc>
 8002210:	0038      	movs	r0, r7
 8002212:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002214:	89ab      	ldrh	r3, [r5, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d908      	bls.n	800222c <_fwalk_reent+0x3c>
 800221a:	220e      	movs	r2, #14
 800221c:	5eab      	ldrsh	r3, [r5, r2]
 800221e:	3301      	adds	r3, #1
 8002220:	d004      	beq.n	800222c <_fwalk_reent+0x3c>
 8002222:	0029      	movs	r1, r5
 8002224:	0030      	movs	r0, r6
 8002226:	9b01      	ldr	r3, [sp, #4]
 8002228:	4798      	blx	r3
 800222a:	4307      	orrs	r7, r0
 800222c:	3568      	adds	r5, #104	; 0x68
 800222e:	e7e8      	b.n	8002202 <_fwalk_reent+0x12>

08002230 <__retarget_lock_init_recursive>:
 8002230:	4770      	bx	lr

08002232 <__retarget_lock_acquire_recursive>:
 8002232:	4770      	bx	lr

08002234 <__retarget_lock_release_recursive>:
 8002234:	4770      	bx	lr
	...

08002238 <sbrk_aligned>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4e0f      	ldr	r6, [pc, #60]	; (8002278 <sbrk_aligned+0x40>)
 800223c:	000d      	movs	r5, r1
 800223e:	6831      	ldr	r1, [r6, #0]
 8002240:	0004      	movs	r4, r0
 8002242:	2900      	cmp	r1, #0
 8002244:	d102      	bne.n	800224c <sbrk_aligned+0x14>
 8002246:	f000 fcd5 	bl	8002bf4 <_sbrk_r>
 800224a:	6030      	str	r0, [r6, #0]
 800224c:	0029      	movs	r1, r5
 800224e:	0020      	movs	r0, r4
 8002250:	f000 fcd0 	bl	8002bf4 <_sbrk_r>
 8002254:	1c43      	adds	r3, r0, #1
 8002256:	d00a      	beq.n	800226e <sbrk_aligned+0x36>
 8002258:	2303      	movs	r3, #3
 800225a:	1cc5      	adds	r5, r0, #3
 800225c:	439d      	bics	r5, r3
 800225e:	42a8      	cmp	r0, r5
 8002260:	d007      	beq.n	8002272 <sbrk_aligned+0x3a>
 8002262:	1a29      	subs	r1, r5, r0
 8002264:	0020      	movs	r0, r4
 8002266:	f000 fcc5 	bl	8002bf4 <_sbrk_r>
 800226a:	1c43      	adds	r3, r0, #1
 800226c:	d101      	bne.n	8002272 <sbrk_aligned+0x3a>
 800226e:	2501      	movs	r5, #1
 8002270:	426d      	negs	r5, r5
 8002272:	0028      	movs	r0, r5
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	20000928 	.word	0x20000928

0800227c <_malloc_r>:
 800227c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800227e:	2203      	movs	r2, #3
 8002280:	1ccb      	adds	r3, r1, #3
 8002282:	4393      	bics	r3, r2
 8002284:	3308      	adds	r3, #8
 8002286:	0006      	movs	r6, r0
 8002288:	001f      	movs	r7, r3
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d232      	bcs.n	80022f4 <_malloc_r+0x78>
 800228e:	270c      	movs	r7, #12
 8002290:	42b9      	cmp	r1, r7
 8002292:	d831      	bhi.n	80022f8 <_malloc_r+0x7c>
 8002294:	0030      	movs	r0, r6
 8002296:	f000 ff73 	bl	8003180 <__malloc_lock>
 800229a:	4d32      	ldr	r5, [pc, #200]	; (8002364 <_malloc_r+0xe8>)
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	001c      	movs	r4, r3
 80022a0:	2c00      	cmp	r4, #0
 80022a2:	d12e      	bne.n	8002302 <_malloc_r+0x86>
 80022a4:	0039      	movs	r1, r7
 80022a6:	0030      	movs	r0, r6
 80022a8:	f7ff ffc6 	bl	8002238 <sbrk_aligned>
 80022ac:	0004      	movs	r4, r0
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d11e      	bne.n	80022f0 <_malloc_r+0x74>
 80022b2:	682c      	ldr	r4, [r5, #0]
 80022b4:	0025      	movs	r5, r4
 80022b6:	2d00      	cmp	r5, #0
 80022b8:	d14a      	bne.n	8002350 <_malloc_r+0xd4>
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	0029      	movs	r1, r5
 80022be:	18e3      	adds	r3, r4, r3
 80022c0:	0030      	movs	r0, r6
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	f000 fc96 	bl	8002bf4 <_sbrk_r>
 80022c8:	9b01      	ldr	r3, [sp, #4]
 80022ca:	4283      	cmp	r3, r0
 80022cc:	d143      	bne.n	8002356 <_malloc_r+0xda>
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	3703      	adds	r7, #3
 80022d2:	1aff      	subs	r7, r7, r3
 80022d4:	2303      	movs	r3, #3
 80022d6:	439f      	bics	r7, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	2f0c      	cmp	r7, #12
 80022dc:	d200      	bcs.n	80022e0 <_malloc_r+0x64>
 80022de:	270c      	movs	r7, #12
 80022e0:	0039      	movs	r1, r7
 80022e2:	0030      	movs	r0, r6
 80022e4:	f7ff ffa8 	bl	8002238 <sbrk_aligned>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d034      	beq.n	8002356 <_malloc_r+0xda>
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	19df      	adds	r7, r3, r7
 80022f0:	6027      	str	r7, [r4, #0]
 80022f2:	e013      	b.n	800231c <_malloc_r+0xa0>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	dacb      	bge.n	8002290 <_malloc_r+0x14>
 80022f8:	230c      	movs	r3, #12
 80022fa:	2500      	movs	r5, #0
 80022fc:	6033      	str	r3, [r6, #0]
 80022fe:	0028      	movs	r0, r5
 8002300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002302:	6822      	ldr	r2, [r4, #0]
 8002304:	1bd1      	subs	r1, r2, r7
 8002306:	d420      	bmi.n	800234a <_malloc_r+0xce>
 8002308:	290b      	cmp	r1, #11
 800230a:	d917      	bls.n	800233c <_malloc_r+0xc0>
 800230c:	19e2      	adds	r2, r4, r7
 800230e:	6027      	str	r7, [r4, #0]
 8002310:	42a3      	cmp	r3, r4
 8002312:	d111      	bne.n	8002338 <_malloc_r+0xbc>
 8002314:	602a      	str	r2, [r5, #0]
 8002316:	6863      	ldr	r3, [r4, #4]
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	6053      	str	r3, [r2, #4]
 800231c:	0030      	movs	r0, r6
 800231e:	0025      	movs	r5, r4
 8002320:	f000 ff36 	bl	8003190 <__malloc_unlock>
 8002324:	2207      	movs	r2, #7
 8002326:	350b      	adds	r5, #11
 8002328:	1d23      	adds	r3, r4, #4
 800232a:	4395      	bics	r5, r2
 800232c:	1aea      	subs	r2, r5, r3
 800232e:	429d      	cmp	r5, r3
 8002330:	d0e5      	beq.n	80022fe <_malloc_r+0x82>
 8002332:	1b5b      	subs	r3, r3, r5
 8002334:	50a3      	str	r3, [r4, r2]
 8002336:	e7e2      	b.n	80022fe <_malloc_r+0x82>
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	e7ec      	b.n	8002316 <_malloc_r+0x9a>
 800233c:	6862      	ldr	r2, [r4, #4]
 800233e:	42a3      	cmp	r3, r4
 8002340:	d101      	bne.n	8002346 <_malloc_r+0xca>
 8002342:	602a      	str	r2, [r5, #0]
 8002344:	e7ea      	b.n	800231c <_malloc_r+0xa0>
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	e7e8      	b.n	800231c <_malloc_r+0xa0>
 800234a:	0023      	movs	r3, r4
 800234c:	6864      	ldr	r4, [r4, #4]
 800234e:	e7a7      	b.n	80022a0 <_malloc_r+0x24>
 8002350:	002c      	movs	r4, r5
 8002352:	686d      	ldr	r5, [r5, #4]
 8002354:	e7af      	b.n	80022b6 <_malloc_r+0x3a>
 8002356:	230c      	movs	r3, #12
 8002358:	0030      	movs	r0, r6
 800235a:	6033      	str	r3, [r6, #0]
 800235c:	f000 ff18 	bl	8003190 <__malloc_unlock>
 8002360:	e7cd      	b.n	80022fe <_malloc_r+0x82>
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	20000924 	.word	0x20000924

08002368 <__ssputs_r>:
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	688e      	ldr	r6, [r1, #8]
 800236c:	b085      	sub	sp, #20
 800236e:	0007      	movs	r7, r0
 8002370:	000c      	movs	r4, r1
 8002372:	9203      	str	r2, [sp, #12]
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	429e      	cmp	r6, r3
 8002378:	d83c      	bhi.n	80023f4 <__ssputs_r+0x8c>
 800237a:	2390      	movs	r3, #144	; 0x90
 800237c:	898a      	ldrh	r2, [r1, #12]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	421a      	tst	r2, r3
 8002382:	d034      	beq.n	80023ee <__ssputs_r+0x86>
 8002384:	6909      	ldr	r1, [r1, #16]
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	6960      	ldr	r0, [r4, #20]
 800238a:	1a5b      	subs	r3, r3, r1
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	2303      	movs	r3, #3
 8002390:	4343      	muls	r3, r0
 8002392:	0fdd      	lsrs	r5, r3, #31
 8002394:	18ed      	adds	r5, r5, r3
 8002396:	9b01      	ldr	r3, [sp, #4]
 8002398:	9802      	ldr	r0, [sp, #8]
 800239a:	3301      	adds	r3, #1
 800239c:	181b      	adds	r3, r3, r0
 800239e:	106d      	asrs	r5, r5, #1
 80023a0:	42ab      	cmp	r3, r5
 80023a2:	d900      	bls.n	80023a6 <__ssputs_r+0x3e>
 80023a4:	001d      	movs	r5, r3
 80023a6:	0553      	lsls	r3, r2, #21
 80023a8:	d532      	bpl.n	8002410 <__ssputs_r+0xa8>
 80023aa:	0029      	movs	r1, r5
 80023ac:	0038      	movs	r0, r7
 80023ae:	f7ff ff65 	bl	800227c <_malloc_r>
 80023b2:	1e06      	subs	r6, r0, #0
 80023b4:	d109      	bne.n	80023ca <__ssputs_r+0x62>
 80023b6:	230c      	movs	r3, #12
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	2340      	movs	r3, #64	; 0x40
 80023bc:	2001      	movs	r0, #1
 80023be:	89a2      	ldrh	r2, [r4, #12]
 80023c0:	4240      	negs	r0, r0
 80023c2:	4313      	orrs	r3, r2
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	b005      	add	sp, #20
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	9a02      	ldr	r2, [sp, #8]
 80023cc:	6921      	ldr	r1, [r4, #16]
 80023ce:	f000 feba 	bl	8003146 <memcpy>
 80023d2:	89a3      	ldrh	r3, [r4, #12]
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <__ssputs_r+0xc0>)
 80023d6:	401a      	ands	r2, r3
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	4313      	orrs	r3, r2
 80023dc:	81a3      	strh	r3, [r4, #12]
 80023de:	9b02      	ldr	r3, [sp, #8]
 80023e0:	6126      	str	r6, [r4, #16]
 80023e2:	18f6      	adds	r6, r6, r3
 80023e4:	6026      	str	r6, [r4, #0]
 80023e6:	6165      	str	r5, [r4, #20]
 80023e8:	9e01      	ldr	r6, [sp, #4]
 80023ea:	1aed      	subs	r5, r5, r3
 80023ec:	60a5      	str	r5, [r4, #8]
 80023ee:	9b01      	ldr	r3, [sp, #4]
 80023f0:	429e      	cmp	r6, r3
 80023f2:	d900      	bls.n	80023f6 <__ssputs_r+0x8e>
 80023f4:	9e01      	ldr	r6, [sp, #4]
 80023f6:	0032      	movs	r2, r6
 80023f8:	9903      	ldr	r1, [sp, #12]
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	f000 feac 	bl	8003158 <memmove>
 8002400:	68a3      	ldr	r3, [r4, #8]
 8002402:	2000      	movs	r0, #0
 8002404:	1b9b      	subs	r3, r3, r6
 8002406:	60a3      	str	r3, [r4, #8]
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	199e      	adds	r6, r3, r6
 800240c:	6026      	str	r6, [r4, #0]
 800240e:	e7da      	b.n	80023c6 <__ssputs_r+0x5e>
 8002410:	002a      	movs	r2, r5
 8002412:	0038      	movs	r0, r7
 8002414:	f000 ff0e 	bl	8003234 <_realloc_r>
 8002418:	1e06      	subs	r6, r0, #0
 800241a:	d1e0      	bne.n	80023de <__ssputs_r+0x76>
 800241c:	0038      	movs	r0, r7
 800241e:	6921      	ldr	r1, [r4, #16]
 8002420:	f000 febe 	bl	80031a0 <_free_r>
 8002424:	e7c7      	b.n	80023b6 <__ssputs_r+0x4e>
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	fffffb7f 	.word	0xfffffb7f

0800242c <_svfiprintf_r>:
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242e:	b0a1      	sub	sp, #132	; 0x84
 8002430:	9003      	str	r0, [sp, #12]
 8002432:	001d      	movs	r5, r3
 8002434:	898b      	ldrh	r3, [r1, #12]
 8002436:	000f      	movs	r7, r1
 8002438:	0016      	movs	r6, r2
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	d511      	bpl.n	8002462 <_svfiprintf_r+0x36>
 800243e:	690b      	ldr	r3, [r1, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10e      	bne.n	8002462 <_svfiprintf_r+0x36>
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	f7ff ff19 	bl	800227c <_malloc_r>
 800244a:	6038      	str	r0, [r7, #0]
 800244c:	6138      	str	r0, [r7, #16]
 800244e:	2800      	cmp	r0, #0
 8002450:	d105      	bne.n	800245e <_svfiprintf_r+0x32>
 8002452:	230c      	movs	r3, #12
 8002454:	9a03      	ldr	r2, [sp, #12]
 8002456:	3801      	subs	r0, #1
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	b021      	add	sp, #132	; 0x84
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245e:	2340      	movs	r3, #64	; 0x40
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	2300      	movs	r3, #0
 8002464:	ac08      	add	r4, sp, #32
 8002466:	6163      	str	r3, [r4, #20]
 8002468:	3320      	adds	r3, #32
 800246a:	7663      	strb	r3, [r4, #25]
 800246c:	3310      	adds	r3, #16
 800246e:	76a3      	strb	r3, [r4, #26]
 8002470:	9507      	str	r5, [sp, #28]
 8002472:	0035      	movs	r5, r6
 8002474:	782b      	ldrb	r3, [r5, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <_svfiprintf_r+0x52>
 800247a:	2b25      	cmp	r3, #37	; 0x25
 800247c:	d147      	bne.n	800250e <_svfiprintf_r+0xe2>
 800247e:	1bab      	subs	r3, r5, r6
 8002480:	9305      	str	r3, [sp, #20]
 8002482:	42b5      	cmp	r5, r6
 8002484:	d00c      	beq.n	80024a0 <_svfiprintf_r+0x74>
 8002486:	0032      	movs	r2, r6
 8002488:	0039      	movs	r1, r7
 800248a:	9803      	ldr	r0, [sp, #12]
 800248c:	f7ff ff6c 	bl	8002368 <__ssputs_r>
 8002490:	1c43      	adds	r3, r0, #1
 8002492:	d100      	bne.n	8002496 <_svfiprintf_r+0x6a>
 8002494:	e0ae      	b.n	80025f4 <_svfiprintf_r+0x1c8>
 8002496:	6962      	ldr	r2, [r4, #20]
 8002498:	9b05      	ldr	r3, [sp, #20]
 800249a:	4694      	mov	ip, r2
 800249c:	4463      	add	r3, ip
 800249e:	6163      	str	r3, [r4, #20]
 80024a0:	782b      	ldrb	r3, [r5, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d100      	bne.n	80024a8 <_svfiprintf_r+0x7c>
 80024a6:	e0a5      	b.n	80025f4 <_svfiprintf_r+0x1c8>
 80024a8:	2201      	movs	r2, #1
 80024aa:	2300      	movs	r3, #0
 80024ac:	4252      	negs	r2, r2
 80024ae:	6062      	str	r2, [r4, #4]
 80024b0:	a904      	add	r1, sp, #16
 80024b2:	3254      	adds	r2, #84	; 0x54
 80024b4:	1852      	adds	r2, r2, r1
 80024b6:	1c6e      	adds	r6, r5, #1
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	60e3      	str	r3, [r4, #12]
 80024bc:	60a3      	str	r3, [r4, #8]
 80024be:	7013      	strb	r3, [r2, #0]
 80024c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80024c2:	2205      	movs	r2, #5
 80024c4:	7831      	ldrb	r1, [r6, #0]
 80024c6:	4854      	ldr	r0, [pc, #336]	; (8002618 <_svfiprintf_r+0x1ec>)
 80024c8:	f000 fe32 	bl	8003130 <memchr>
 80024cc:	1c75      	adds	r5, r6, #1
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d11f      	bne.n	8002512 <_svfiprintf_r+0xe6>
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	06d3      	lsls	r3, r2, #27
 80024d6:	d504      	bpl.n	80024e2 <_svfiprintf_r+0xb6>
 80024d8:	2353      	movs	r3, #83	; 0x53
 80024da:	a904      	add	r1, sp, #16
 80024dc:	185b      	adds	r3, r3, r1
 80024de:	2120      	movs	r1, #32
 80024e0:	7019      	strb	r1, [r3, #0]
 80024e2:	0713      	lsls	r3, r2, #28
 80024e4:	d504      	bpl.n	80024f0 <_svfiprintf_r+0xc4>
 80024e6:	2353      	movs	r3, #83	; 0x53
 80024e8:	a904      	add	r1, sp, #16
 80024ea:	185b      	adds	r3, r3, r1
 80024ec:	212b      	movs	r1, #43	; 0x2b
 80024ee:	7019      	strb	r1, [r3, #0]
 80024f0:	7833      	ldrb	r3, [r6, #0]
 80024f2:	2b2a      	cmp	r3, #42	; 0x2a
 80024f4:	d016      	beq.n	8002524 <_svfiprintf_r+0xf8>
 80024f6:	0035      	movs	r5, r6
 80024f8:	2100      	movs	r1, #0
 80024fa:	200a      	movs	r0, #10
 80024fc:	68e3      	ldr	r3, [r4, #12]
 80024fe:	782a      	ldrb	r2, [r5, #0]
 8002500:	1c6e      	adds	r6, r5, #1
 8002502:	3a30      	subs	r2, #48	; 0x30
 8002504:	2a09      	cmp	r2, #9
 8002506:	d94e      	bls.n	80025a6 <_svfiprintf_r+0x17a>
 8002508:	2900      	cmp	r1, #0
 800250a:	d111      	bne.n	8002530 <_svfiprintf_r+0x104>
 800250c:	e017      	b.n	800253e <_svfiprintf_r+0x112>
 800250e:	3501      	adds	r5, #1
 8002510:	e7b0      	b.n	8002474 <_svfiprintf_r+0x48>
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <_svfiprintf_r+0x1ec>)
 8002514:	6822      	ldr	r2, [r4, #0]
 8002516:	1ac0      	subs	r0, r0, r3
 8002518:	2301      	movs	r3, #1
 800251a:	4083      	lsls	r3, r0
 800251c:	4313      	orrs	r3, r2
 800251e:	002e      	movs	r6, r5
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	e7ce      	b.n	80024c2 <_svfiprintf_r+0x96>
 8002524:	9b07      	ldr	r3, [sp, #28]
 8002526:	1d19      	adds	r1, r3, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	9107      	str	r1, [sp, #28]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db01      	blt.n	8002534 <_svfiprintf_r+0x108>
 8002530:	930b      	str	r3, [sp, #44]	; 0x2c
 8002532:	e004      	b.n	800253e <_svfiprintf_r+0x112>
 8002534:	425b      	negs	r3, r3
 8002536:	60e3      	str	r3, [r4, #12]
 8002538:	2302      	movs	r3, #2
 800253a:	4313      	orrs	r3, r2
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	782b      	ldrb	r3, [r5, #0]
 8002540:	2b2e      	cmp	r3, #46	; 0x2e
 8002542:	d10a      	bne.n	800255a <_svfiprintf_r+0x12e>
 8002544:	786b      	ldrb	r3, [r5, #1]
 8002546:	2b2a      	cmp	r3, #42	; 0x2a
 8002548:	d135      	bne.n	80025b6 <_svfiprintf_r+0x18a>
 800254a:	9b07      	ldr	r3, [sp, #28]
 800254c:	3502      	adds	r5, #2
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	9207      	str	r2, [sp, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db2b      	blt.n	80025b0 <_svfiprintf_r+0x184>
 8002558:	9309      	str	r3, [sp, #36]	; 0x24
 800255a:	4e30      	ldr	r6, [pc, #192]	; (800261c <_svfiprintf_r+0x1f0>)
 800255c:	2203      	movs	r2, #3
 800255e:	0030      	movs	r0, r6
 8002560:	7829      	ldrb	r1, [r5, #0]
 8002562:	f000 fde5 	bl	8003130 <memchr>
 8002566:	2800      	cmp	r0, #0
 8002568:	d006      	beq.n	8002578 <_svfiprintf_r+0x14c>
 800256a:	2340      	movs	r3, #64	; 0x40
 800256c:	1b80      	subs	r0, r0, r6
 800256e:	4083      	lsls	r3, r0
 8002570:	6822      	ldr	r2, [r4, #0]
 8002572:	3501      	adds	r5, #1
 8002574:	4313      	orrs	r3, r2
 8002576:	6023      	str	r3, [r4, #0]
 8002578:	7829      	ldrb	r1, [r5, #0]
 800257a:	2206      	movs	r2, #6
 800257c:	4828      	ldr	r0, [pc, #160]	; (8002620 <_svfiprintf_r+0x1f4>)
 800257e:	1c6e      	adds	r6, r5, #1
 8002580:	7621      	strb	r1, [r4, #24]
 8002582:	f000 fdd5 	bl	8003130 <memchr>
 8002586:	2800      	cmp	r0, #0
 8002588:	d03c      	beq.n	8002604 <_svfiprintf_r+0x1d8>
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <_svfiprintf_r+0x1f8>)
 800258c:	2b00      	cmp	r3, #0
 800258e:	d125      	bne.n	80025dc <_svfiprintf_r+0x1b0>
 8002590:	2207      	movs	r2, #7
 8002592:	9b07      	ldr	r3, [sp, #28]
 8002594:	3307      	adds	r3, #7
 8002596:	4393      	bics	r3, r2
 8002598:	3308      	adds	r3, #8
 800259a:	9307      	str	r3, [sp, #28]
 800259c:	6963      	ldr	r3, [r4, #20]
 800259e:	9a04      	ldr	r2, [sp, #16]
 80025a0:	189b      	adds	r3, r3, r2
 80025a2:	6163      	str	r3, [r4, #20]
 80025a4:	e765      	b.n	8002472 <_svfiprintf_r+0x46>
 80025a6:	4343      	muls	r3, r0
 80025a8:	0035      	movs	r5, r6
 80025aa:	2101      	movs	r1, #1
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	e7a6      	b.n	80024fe <_svfiprintf_r+0xd2>
 80025b0:	2301      	movs	r3, #1
 80025b2:	425b      	negs	r3, r3
 80025b4:	e7d0      	b.n	8002558 <_svfiprintf_r+0x12c>
 80025b6:	2300      	movs	r3, #0
 80025b8:	200a      	movs	r0, #10
 80025ba:	001a      	movs	r2, r3
 80025bc:	3501      	adds	r5, #1
 80025be:	6063      	str	r3, [r4, #4]
 80025c0:	7829      	ldrb	r1, [r5, #0]
 80025c2:	1c6e      	adds	r6, r5, #1
 80025c4:	3930      	subs	r1, #48	; 0x30
 80025c6:	2909      	cmp	r1, #9
 80025c8:	d903      	bls.n	80025d2 <_svfiprintf_r+0x1a6>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0c5      	beq.n	800255a <_svfiprintf_r+0x12e>
 80025ce:	9209      	str	r2, [sp, #36]	; 0x24
 80025d0:	e7c3      	b.n	800255a <_svfiprintf_r+0x12e>
 80025d2:	4342      	muls	r2, r0
 80025d4:	0035      	movs	r5, r6
 80025d6:	2301      	movs	r3, #1
 80025d8:	1852      	adds	r2, r2, r1
 80025da:	e7f1      	b.n	80025c0 <_svfiprintf_r+0x194>
 80025dc:	ab07      	add	r3, sp, #28
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	003a      	movs	r2, r7
 80025e2:	0021      	movs	r1, r4
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <_svfiprintf_r+0x1fc>)
 80025e6:	9803      	ldr	r0, [sp, #12]
 80025e8:	e000      	b.n	80025ec <_svfiprintf_r+0x1c0>
 80025ea:	bf00      	nop
 80025ec:	9004      	str	r0, [sp, #16]
 80025ee:	9b04      	ldr	r3, [sp, #16]
 80025f0:	3301      	adds	r3, #1
 80025f2:	d1d3      	bne.n	800259c <_svfiprintf_r+0x170>
 80025f4:	89bb      	ldrh	r3, [r7, #12]
 80025f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80025f8:	065b      	lsls	r3, r3, #25
 80025fa:	d400      	bmi.n	80025fe <_svfiprintf_r+0x1d2>
 80025fc:	e72d      	b.n	800245a <_svfiprintf_r+0x2e>
 80025fe:	2001      	movs	r0, #1
 8002600:	4240      	negs	r0, r0
 8002602:	e72a      	b.n	800245a <_svfiprintf_r+0x2e>
 8002604:	ab07      	add	r3, sp, #28
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	003a      	movs	r2, r7
 800260a:	0021      	movs	r1, r4
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <_svfiprintf_r+0x1fc>)
 800260e:	9803      	ldr	r0, [sp, #12]
 8002610:	f000 f9de 	bl	80029d0 <_printf_i>
 8002614:	e7ea      	b.n	80025ec <_svfiprintf_r+0x1c0>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	080033e8 	.word	0x080033e8
 800261c:	080033ee 	.word	0x080033ee
 8002620:	080033f2 	.word	0x080033f2
 8002624:	00000000 	.word	0x00000000
 8002628:	08002369 	.word	0x08002369

0800262c <__sfputc_r>:
 800262c:	6893      	ldr	r3, [r2, #8]
 800262e:	b510      	push	{r4, lr}
 8002630:	3b01      	subs	r3, #1
 8002632:	6093      	str	r3, [r2, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	da04      	bge.n	8002642 <__sfputc_r+0x16>
 8002638:	6994      	ldr	r4, [r2, #24]
 800263a:	42a3      	cmp	r3, r4
 800263c:	db07      	blt.n	800264e <__sfputc_r+0x22>
 800263e:	290a      	cmp	r1, #10
 8002640:	d005      	beq.n	800264e <__sfputc_r+0x22>
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	1c58      	adds	r0, r3, #1
 8002646:	6010      	str	r0, [r2, #0]
 8002648:	7019      	strb	r1, [r3, #0]
 800264a:	0008      	movs	r0, r1
 800264c:	bd10      	pop	{r4, pc}
 800264e:	f000 fb2f 	bl	8002cb0 <__swbuf_r>
 8002652:	0001      	movs	r1, r0
 8002654:	e7f9      	b.n	800264a <__sfputc_r+0x1e>

08002656 <__sfputs_r>:
 8002656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002658:	0006      	movs	r6, r0
 800265a:	000f      	movs	r7, r1
 800265c:	0014      	movs	r4, r2
 800265e:	18d5      	adds	r5, r2, r3
 8002660:	42ac      	cmp	r4, r5
 8002662:	d101      	bne.n	8002668 <__sfputs_r+0x12>
 8002664:	2000      	movs	r0, #0
 8002666:	e007      	b.n	8002678 <__sfputs_r+0x22>
 8002668:	7821      	ldrb	r1, [r4, #0]
 800266a:	003a      	movs	r2, r7
 800266c:	0030      	movs	r0, r6
 800266e:	f7ff ffdd 	bl	800262c <__sfputc_r>
 8002672:	3401      	adds	r4, #1
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d1f3      	bne.n	8002660 <__sfputs_r+0xa>
 8002678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800267c <_vfiprintf_r>:
 800267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267e:	b0a1      	sub	sp, #132	; 0x84
 8002680:	0006      	movs	r6, r0
 8002682:	000c      	movs	r4, r1
 8002684:	001f      	movs	r7, r3
 8002686:	9203      	str	r2, [sp, #12]
 8002688:	2800      	cmp	r0, #0
 800268a:	d004      	beq.n	8002696 <_vfiprintf_r+0x1a>
 800268c:	6983      	ldr	r3, [r0, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <_vfiprintf_r+0x1a>
 8002692:	f7ff fd2d 	bl	80020f0 <__sinit>
 8002696:	4b8e      	ldr	r3, [pc, #568]	; (80028d0 <_vfiprintf_r+0x254>)
 8002698:	429c      	cmp	r4, r3
 800269a:	d11c      	bne.n	80026d6 <_vfiprintf_r+0x5a>
 800269c:	6874      	ldr	r4, [r6, #4]
 800269e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026a0:	07db      	lsls	r3, r3, #31
 80026a2:	d405      	bmi.n	80026b0 <_vfiprintf_r+0x34>
 80026a4:	89a3      	ldrh	r3, [r4, #12]
 80026a6:	059b      	lsls	r3, r3, #22
 80026a8:	d402      	bmi.n	80026b0 <_vfiprintf_r+0x34>
 80026aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ac:	f7ff fdc1 	bl	8002232 <__retarget_lock_acquire_recursive>
 80026b0:	89a3      	ldrh	r3, [r4, #12]
 80026b2:	071b      	lsls	r3, r3, #28
 80026b4:	d502      	bpl.n	80026bc <_vfiprintf_r+0x40>
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11d      	bne.n	80026f8 <_vfiprintf_r+0x7c>
 80026bc:	0021      	movs	r1, r4
 80026be:	0030      	movs	r0, r6
 80026c0:	f000 fb60 	bl	8002d84 <__swsetup_r>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d017      	beq.n	80026f8 <_vfiprintf_r+0x7c>
 80026c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026ca:	07db      	lsls	r3, r3, #31
 80026cc:	d50d      	bpl.n	80026ea <_vfiprintf_r+0x6e>
 80026ce:	2001      	movs	r0, #1
 80026d0:	4240      	negs	r0, r0
 80026d2:	b021      	add	sp, #132	; 0x84
 80026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <_vfiprintf_r+0x258>)
 80026d8:	429c      	cmp	r4, r3
 80026da:	d101      	bne.n	80026e0 <_vfiprintf_r+0x64>
 80026dc:	68b4      	ldr	r4, [r6, #8]
 80026de:	e7de      	b.n	800269e <_vfiprintf_r+0x22>
 80026e0:	4b7d      	ldr	r3, [pc, #500]	; (80028d8 <_vfiprintf_r+0x25c>)
 80026e2:	429c      	cmp	r4, r3
 80026e4:	d1db      	bne.n	800269e <_vfiprintf_r+0x22>
 80026e6:	68f4      	ldr	r4, [r6, #12]
 80026e8:	e7d9      	b.n	800269e <_vfiprintf_r+0x22>
 80026ea:	89a3      	ldrh	r3, [r4, #12]
 80026ec:	059b      	lsls	r3, r3, #22
 80026ee:	d4ee      	bmi.n	80026ce <_vfiprintf_r+0x52>
 80026f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026f2:	f7ff fd9f 	bl	8002234 <__retarget_lock_release_recursive>
 80026f6:	e7ea      	b.n	80026ce <_vfiprintf_r+0x52>
 80026f8:	2300      	movs	r3, #0
 80026fa:	ad08      	add	r5, sp, #32
 80026fc:	616b      	str	r3, [r5, #20]
 80026fe:	3320      	adds	r3, #32
 8002700:	766b      	strb	r3, [r5, #25]
 8002702:	3310      	adds	r3, #16
 8002704:	76ab      	strb	r3, [r5, #26]
 8002706:	9707      	str	r7, [sp, #28]
 8002708:	9f03      	ldr	r7, [sp, #12]
 800270a:	783b      	ldrb	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <_vfiprintf_r+0x98>
 8002710:	2b25      	cmp	r3, #37	; 0x25
 8002712:	d14e      	bne.n	80027b2 <_vfiprintf_r+0x136>
 8002714:	9b03      	ldr	r3, [sp, #12]
 8002716:	1afb      	subs	r3, r7, r3
 8002718:	9305      	str	r3, [sp, #20]
 800271a:	9b03      	ldr	r3, [sp, #12]
 800271c:	429f      	cmp	r7, r3
 800271e:	d00d      	beq.n	800273c <_vfiprintf_r+0xc0>
 8002720:	9b05      	ldr	r3, [sp, #20]
 8002722:	0021      	movs	r1, r4
 8002724:	0030      	movs	r0, r6
 8002726:	9a03      	ldr	r2, [sp, #12]
 8002728:	f7ff ff95 	bl	8002656 <__sfputs_r>
 800272c:	1c43      	adds	r3, r0, #1
 800272e:	d100      	bne.n	8002732 <_vfiprintf_r+0xb6>
 8002730:	e0b5      	b.n	800289e <_vfiprintf_r+0x222>
 8002732:	696a      	ldr	r2, [r5, #20]
 8002734:	9b05      	ldr	r3, [sp, #20]
 8002736:	4694      	mov	ip, r2
 8002738:	4463      	add	r3, ip
 800273a:	616b      	str	r3, [r5, #20]
 800273c:	783b      	ldrb	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d100      	bne.n	8002744 <_vfiprintf_r+0xc8>
 8002742:	e0ac      	b.n	800289e <_vfiprintf_r+0x222>
 8002744:	2201      	movs	r2, #1
 8002746:	1c7b      	adds	r3, r7, #1
 8002748:	9303      	str	r3, [sp, #12]
 800274a:	2300      	movs	r3, #0
 800274c:	4252      	negs	r2, r2
 800274e:	606a      	str	r2, [r5, #4]
 8002750:	a904      	add	r1, sp, #16
 8002752:	3254      	adds	r2, #84	; 0x54
 8002754:	1852      	adds	r2, r2, r1
 8002756:	602b      	str	r3, [r5, #0]
 8002758:	60eb      	str	r3, [r5, #12]
 800275a:	60ab      	str	r3, [r5, #8]
 800275c:	7013      	strb	r3, [r2, #0]
 800275e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002760:	9b03      	ldr	r3, [sp, #12]
 8002762:	2205      	movs	r2, #5
 8002764:	7819      	ldrb	r1, [r3, #0]
 8002766:	485d      	ldr	r0, [pc, #372]	; (80028dc <_vfiprintf_r+0x260>)
 8002768:	f000 fce2 	bl	8003130 <memchr>
 800276c:	9b03      	ldr	r3, [sp, #12]
 800276e:	1c5f      	adds	r7, r3, #1
 8002770:	2800      	cmp	r0, #0
 8002772:	d120      	bne.n	80027b6 <_vfiprintf_r+0x13a>
 8002774:	682a      	ldr	r2, [r5, #0]
 8002776:	06d3      	lsls	r3, r2, #27
 8002778:	d504      	bpl.n	8002784 <_vfiprintf_r+0x108>
 800277a:	2353      	movs	r3, #83	; 0x53
 800277c:	a904      	add	r1, sp, #16
 800277e:	185b      	adds	r3, r3, r1
 8002780:	2120      	movs	r1, #32
 8002782:	7019      	strb	r1, [r3, #0]
 8002784:	0713      	lsls	r3, r2, #28
 8002786:	d504      	bpl.n	8002792 <_vfiprintf_r+0x116>
 8002788:	2353      	movs	r3, #83	; 0x53
 800278a:	a904      	add	r1, sp, #16
 800278c:	185b      	adds	r3, r3, r1
 800278e:	212b      	movs	r1, #43	; 0x2b
 8002790:	7019      	strb	r1, [r3, #0]
 8002792:	9b03      	ldr	r3, [sp, #12]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b2a      	cmp	r3, #42	; 0x2a
 8002798:	d016      	beq.n	80027c8 <_vfiprintf_r+0x14c>
 800279a:	2100      	movs	r1, #0
 800279c:	68eb      	ldr	r3, [r5, #12]
 800279e:	9f03      	ldr	r7, [sp, #12]
 80027a0:	783a      	ldrb	r2, [r7, #0]
 80027a2:	1c78      	adds	r0, r7, #1
 80027a4:	3a30      	subs	r2, #48	; 0x30
 80027a6:	4684      	mov	ip, r0
 80027a8:	2a09      	cmp	r2, #9
 80027aa:	d94f      	bls.n	800284c <_vfiprintf_r+0x1d0>
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d111      	bne.n	80027d4 <_vfiprintf_r+0x158>
 80027b0:	e017      	b.n	80027e2 <_vfiprintf_r+0x166>
 80027b2:	3701      	adds	r7, #1
 80027b4:	e7a9      	b.n	800270a <_vfiprintf_r+0x8e>
 80027b6:	4b49      	ldr	r3, [pc, #292]	; (80028dc <_vfiprintf_r+0x260>)
 80027b8:	682a      	ldr	r2, [r5, #0]
 80027ba:	1ac0      	subs	r0, r0, r3
 80027bc:	2301      	movs	r3, #1
 80027be:	4083      	lsls	r3, r0
 80027c0:	4313      	orrs	r3, r2
 80027c2:	602b      	str	r3, [r5, #0]
 80027c4:	9703      	str	r7, [sp, #12]
 80027c6:	e7cb      	b.n	8002760 <_vfiprintf_r+0xe4>
 80027c8:	9b07      	ldr	r3, [sp, #28]
 80027ca:	1d19      	adds	r1, r3, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	9107      	str	r1, [sp, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db01      	blt.n	80027d8 <_vfiprintf_r+0x15c>
 80027d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80027d6:	e004      	b.n	80027e2 <_vfiprintf_r+0x166>
 80027d8:	425b      	negs	r3, r3
 80027da:	60eb      	str	r3, [r5, #12]
 80027dc:	2302      	movs	r3, #2
 80027de:	4313      	orrs	r3, r2
 80027e0:	602b      	str	r3, [r5, #0]
 80027e2:	783b      	ldrb	r3, [r7, #0]
 80027e4:	2b2e      	cmp	r3, #46	; 0x2e
 80027e6:	d10a      	bne.n	80027fe <_vfiprintf_r+0x182>
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b2a      	cmp	r3, #42	; 0x2a
 80027ec:	d137      	bne.n	800285e <_vfiprintf_r+0x1e2>
 80027ee:	9b07      	ldr	r3, [sp, #28]
 80027f0:	3702      	adds	r7, #2
 80027f2:	1d1a      	adds	r2, r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	9207      	str	r2, [sp, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db2d      	blt.n	8002858 <_vfiprintf_r+0x1dc>
 80027fc:	9309      	str	r3, [sp, #36]	; 0x24
 80027fe:	2203      	movs	r2, #3
 8002800:	7839      	ldrb	r1, [r7, #0]
 8002802:	4837      	ldr	r0, [pc, #220]	; (80028e0 <_vfiprintf_r+0x264>)
 8002804:	f000 fc94 	bl	8003130 <memchr>
 8002808:	2800      	cmp	r0, #0
 800280a:	d007      	beq.n	800281c <_vfiprintf_r+0x1a0>
 800280c:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <_vfiprintf_r+0x264>)
 800280e:	682a      	ldr	r2, [r5, #0]
 8002810:	1ac0      	subs	r0, r0, r3
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	4083      	lsls	r3, r0
 8002816:	4313      	orrs	r3, r2
 8002818:	3701      	adds	r7, #1
 800281a:	602b      	str	r3, [r5, #0]
 800281c:	7839      	ldrb	r1, [r7, #0]
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	2206      	movs	r2, #6
 8002822:	4830      	ldr	r0, [pc, #192]	; (80028e4 <_vfiprintf_r+0x268>)
 8002824:	9303      	str	r3, [sp, #12]
 8002826:	7629      	strb	r1, [r5, #24]
 8002828:	f000 fc82 	bl	8003130 <memchr>
 800282c:	2800      	cmp	r0, #0
 800282e:	d045      	beq.n	80028bc <_vfiprintf_r+0x240>
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <_vfiprintf_r+0x26c>)
 8002832:	2b00      	cmp	r3, #0
 8002834:	d127      	bne.n	8002886 <_vfiprintf_r+0x20a>
 8002836:	2207      	movs	r2, #7
 8002838:	9b07      	ldr	r3, [sp, #28]
 800283a:	3307      	adds	r3, #7
 800283c:	4393      	bics	r3, r2
 800283e:	3308      	adds	r3, #8
 8002840:	9307      	str	r3, [sp, #28]
 8002842:	696b      	ldr	r3, [r5, #20]
 8002844:	9a04      	ldr	r2, [sp, #16]
 8002846:	189b      	adds	r3, r3, r2
 8002848:	616b      	str	r3, [r5, #20]
 800284a:	e75d      	b.n	8002708 <_vfiprintf_r+0x8c>
 800284c:	210a      	movs	r1, #10
 800284e:	434b      	muls	r3, r1
 8002850:	4667      	mov	r7, ip
 8002852:	189b      	adds	r3, r3, r2
 8002854:	3909      	subs	r1, #9
 8002856:	e7a3      	b.n	80027a0 <_vfiprintf_r+0x124>
 8002858:	2301      	movs	r3, #1
 800285a:	425b      	negs	r3, r3
 800285c:	e7ce      	b.n	80027fc <_vfiprintf_r+0x180>
 800285e:	2300      	movs	r3, #0
 8002860:	001a      	movs	r2, r3
 8002862:	3701      	adds	r7, #1
 8002864:	606b      	str	r3, [r5, #4]
 8002866:	7839      	ldrb	r1, [r7, #0]
 8002868:	1c78      	adds	r0, r7, #1
 800286a:	3930      	subs	r1, #48	; 0x30
 800286c:	4684      	mov	ip, r0
 800286e:	2909      	cmp	r1, #9
 8002870:	d903      	bls.n	800287a <_vfiprintf_r+0x1fe>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0c3      	beq.n	80027fe <_vfiprintf_r+0x182>
 8002876:	9209      	str	r2, [sp, #36]	; 0x24
 8002878:	e7c1      	b.n	80027fe <_vfiprintf_r+0x182>
 800287a:	230a      	movs	r3, #10
 800287c:	435a      	muls	r2, r3
 800287e:	4667      	mov	r7, ip
 8002880:	1852      	adds	r2, r2, r1
 8002882:	3b09      	subs	r3, #9
 8002884:	e7ef      	b.n	8002866 <_vfiprintf_r+0x1ea>
 8002886:	ab07      	add	r3, sp, #28
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	0022      	movs	r2, r4
 800288c:	0029      	movs	r1, r5
 800288e:	0030      	movs	r0, r6
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <_vfiprintf_r+0x270>)
 8002892:	e000      	b.n	8002896 <_vfiprintf_r+0x21a>
 8002894:	bf00      	nop
 8002896:	9004      	str	r0, [sp, #16]
 8002898:	9b04      	ldr	r3, [sp, #16]
 800289a:	3301      	adds	r3, #1
 800289c:	d1d1      	bne.n	8002842 <_vfiprintf_r+0x1c6>
 800289e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028a0:	07db      	lsls	r3, r3, #31
 80028a2:	d405      	bmi.n	80028b0 <_vfiprintf_r+0x234>
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	059b      	lsls	r3, r3, #22
 80028a8:	d402      	bmi.n	80028b0 <_vfiprintf_r+0x234>
 80028aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028ac:	f7ff fcc2 	bl	8002234 <__retarget_lock_release_recursive>
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	065b      	lsls	r3, r3, #25
 80028b4:	d500      	bpl.n	80028b8 <_vfiprintf_r+0x23c>
 80028b6:	e70a      	b.n	80026ce <_vfiprintf_r+0x52>
 80028b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80028ba:	e70a      	b.n	80026d2 <_vfiprintf_r+0x56>
 80028bc:	ab07      	add	r3, sp, #28
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	0022      	movs	r2, r4
 80028c2:	0029      	movs	r1, r5
 80028c4:	0030      	movs	r0, r6
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <_vfiprintf_r+0x270>)
 80028c8:	f000 f882 	bl	80029d0 <_printf_i>
 80028cc:	e7e3      	b.n	8002896 <_vfiprintf_r+0x21a>
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	080033a8 	.word	0x080033a8
 80028d4:	080033c8 	.word	0x080033c8
 80028d8:	08003388 	.word	0x08003388
 80028dc:	080033e8 	.word	0x080033e8
 80028e0:	080033ee 	.word	0x080033ee
 80028e4:	080033f2 	.word	0x080033f2
 80028e8:	00000000 	.word	0x00000000
 80028ec:	08002657 	.word	0x08002657

080028f0 <_printf_common>:
 80028f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028f2:	0015      	movs	r5, r2
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	688a      	ldr	r2, [r1, #8]
 80028f8:	690b      	ldr	r3, [r1, #16]
 80028fa:	000c      	movs	r4, r1
 80028fc:	9000      	str	r0, [sp, #0]
 80028fe:	4293      	cmp	r3, r2
 8002900:	da00      	bge.n	8002904 <_printf_common+0x14>
 8002902:	0013      	movs	r3, r2
 8002904:	0022      	movs	r2, r4
 8002906:	602b      	str	r3, [r5, #0]
 8002908:	3243      	adds	r2, #67	; 0x43
 800290a:	7812      	ldrb	r2, [r2, #0]
 800290c:	2a00      	cmp	r2, #0
 800290e:	d001      	beq.n	8002914 <_printf_common+0x24>
 8002910:	3301      	adds	r3, #1
 8002912:	602b      	str	r3, [r5, #0]
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	d502      	bpl.n	8002920 <_printf_common+0x30>
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	3302      	adds	r3, #2
 800291e:	602b      	str	r3, [r5, #0]
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	2306      	movs	r3, #6
 8002924:	0017      	movs	r7, r2
 8002926:	401f      	ands	r7, r3
 8002928:	421a      	tst	r2, r3
 800292a:	d027      	beq.n	800297c <_printf_common+0x8c>
 800292c:	0023      	movs	r3, r4
 800292e:	3343      	adds	r3, #67	; 0x43
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	4193      	sbcs	r3, r2
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	0692      	lsls	r2, r2, #26
 800293a:	d430      	bmi.n	800299e <_printf_common+0xae>
 800293c:	0022      	movs	r2, r4
 800293e:	9901      	ldr	r1, [sp, #4]
 8002940:	9800      	ldr	r0, [sp, #0]
 8002942:	9e08      	ldr	r6, [sp, #32]
 8002944:	3243      	adds	r2, #67	; 0x43
 8002946:	47b0      	blx	r6
 8002948:	1c43      	adds	r3, r0, #1
 800294a:	d025      	beq.n	8002998 <_printf_common+0xa8>
 800294c:	2306      	movs	r3, #6
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	682a      	ldr	r2, [r5, #0]
 8002952:	68e1      	ldr	r1, [r4, #12]
 8002954:	2500      	movs	r5, #0
 8002956:	4003      	ands	r3, r0
 8002958:	2b04      	cmp	r3, #4
 800295a:	d103      	bne.n	8002964 <_printf_common+0x74>
 800295c:	1a8d      	subs	r5, r1, r2
 800295e:	43eb      	mvns	r3, r5
 8002960:	17db      	asrs	r3, r3, #31
 8002962:	401d      	ands	r5, r3
 8002964:	68a3      	ldr	r3, [r4, #8]
 8002966:	6922      	ldr	r2, [r4, #16]
 8002968:	4293      	cmp	r3, r2
 800296a:	dd01      	ble.n	8002970 <_printf_common+0x80>
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	18ed      	adds	r5, r5, r3
 8002970:	2700      	movs	r7, #0
 8002972:	42bd      	cmp	r5, r7
 8002974:	d120      	bne.n	80029b8 <_printf_common+0xc8>
 8002976:	2000      	movs	r0, #0
 8002978:	e010      	b.n	800299c <_printf_common+0xac>
 800297a:	3701      	adds	r7, #1
 800297c:	68e3      	ldr	r3, [r4, #12]
 800297e:	682a      	ldr	r2, [r5, #0]
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	42bb      	cmp	r3, r7
 8002984:	ddd2      	ble.n	800292c <_printf_common+0x3c>
 8002986:	0022      	movs	r2, r4
 8002988:	2301      	movs	r3, #1
 800298a:	9901      	ldr	r1, [sp, #4]
 800298c:	9800      	ldr	r0, [sp, #0]
 800298e:	9e08      	ldr	r6, [sp, #32]
 8002990:	3219      	adds	r2, #25
 8002992:	47b0      	blx	r6
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	d1f0      	bne.n	800297a <_printf_common+0x8a>
 8002998:	2001      	movs	r0, #1
 800299a:	4240      	negs	r0, r0
 800299c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800299e:	2030      	movs	r0, #48	; 0x30
 80029a0:	18e1      	adds	r1, r4, r3
 80029a2:	3143      	adds	r1, #67	; 0x43
 80029a4:	7008      	strb	r0, [r1, #0]
 80029a6:	0021      	movs	r1, r4
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	3145      	adds	r1, #69	; 0x45
 80029ac:	7809      	ldrb	r1, [r1, #0]
 80029ae:	18a2      	adds	r2, r4, r2
 80029b0:	3243      	adds	r2, #67	; 0x43
 80029b2:	3302      	adds	r3, #2
 80029b4:	7011      	strb	r1, [r2, #0]
 80029b6:	e7c1      	b.n	800293c <_printf_common+0x4c>
 80029b8:	0022      	movs	r2, r4
 80029ba:	2301      	movs	r3, #1
 80029bc:	9901      	ldr	r1, [sp, #4]
 80029be:	9800      	ldr	r0, [sp, #0]
 80029c0:	9e08      	ldr	r6, [sp, #32]
 80029c2:	321a      	adds	r2, #26
 80029c4:	47b0      	blx	r6
 80029c6:	1c43      	adds	r3, r0, #1
 80029c8:	d0e6      	beq.n	8002998 <_printf_common+0xa8>
 80029ca:	3701      	adds	r7, #1
 80029cc:	e7d1      	b.n	8002972 <_printf_common+0x82>
	...

080029d0 <_printf_i>:
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	b08b      	sub	sp, #44	; 0x2c
 80029d4:	9206      	str	r2, [sp, #24]
 80029d6:	000a      	movs	r2, r1
 80029d8:	3243      	adds	r2, #67	; 0x43
 80029da:	9307      	str	r3, [sp, #28]
 80029dc:	9005      	str	r0, [sp, #20]
 80029de:	9204      	str	r2, [sp, #16]
 80029e0:	7e0a      	ldrb	r2, [r1, #24]
 80029e2:	000c      	movs	r4, r1
 80029e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80029e6:	2a78      	cmp	r2, #120	; 0x78
 80029e8:	d807      	bhi.n	80029fa <_printf_i+0x2a>
 80029ea:	2a62      	cmp	r2, #98	; 0x62
 80029ec:	d809      	bhi.n	8002a02 <_printf_i+0x32>
 80029ee:	2a00      	cmp	r2, #0
 80029f0:	d100      	bne.n	80029f4 <_printf_i+0x24>
 80029f2:	e0c1      	b.n	8002b78 <_printf_i+0x1a8>
 80029f4:	2a58      	cmp	r2, #88	; 0x58
 80029f6:	d100      	bne.n	80029fa <_printf_i+0x2a>
 80029f8:	e08c      	b.n	8002b14 <_printf_i+0x144>
 80029fa:	0026      	movs	r6, r4
 80029fc:	3642      	adds	r6, #66	; 0x42
 80029fe:	7032      	strb	r2, [r6, #0]
 8002a00:	e022      	b.n	8002a48 <_printf_i+0x78>
 8002a02:	0010      	movs	r0, r2
 8002a04:	3863      	subs	r0, #99	; 0x63
 8002a06:	2815      	cmp	r0, #21
 8002a08:	d8f7      	bhi.n	80029fa <_printf_i+0x2a>
 8002a0a:	f7fd fb7d 	bl	8000108 <__gnu_thumb1_case_shi>
 8002a0e:	0016      	.short	0x0016
 8002a10:	fff6001f 	.word	0xfff6001f
 8002a14:	fff6fff6 	.word	0xfff6fff6
 8002a18:	001ffff6 	.word	0x001ffff6
 8002a1c:	fff6fff6 	.word	0xfff6fff6
 8002a20:	fff6fff6 	.word	0xfff6fff6
 8002a24:	003600a8 	.word	0x003600a8
 8002a28:	fff6009a 	.word	0xfff6009a
 8002a2c:	00b9fff6 	.word	0x00b9fff6
 8002a30:	0036fff6 	.word	0x0036fff6
 8002a34:	fff6fff6 	.word	0xfff6fff6
 8002a38:	009e      	.short	0x009e
 8002a3a:	0026      	movs	r6, r4
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	3642      	adds	r6, #66	; 0x42
 8002a40:	1d11      	adds	r1, r2, #4
 8002a42:	6019      	str	r1, [r3, #0]
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	7033      	strb	r3, [r6, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0a7      	b.n	8002b9c <_printf_i+0x1cc>
 8002a4c:	6808      	ldr	r0, [r1, #0]
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	1d0a      	adds	r2, r1, #4
 8002a52:	0605      	lsls	r5, r0, #24
 8002a54:	d50b      	bpl.n	8002a6e <_printf_i+0x9e>
 8002a56:	680d      	ldr	r5, [r1, #0]
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	da03      	bge.n	8002a66 <_printf_i+0x96>
 8002a5e:	232d      	movs	r3, #45	; 0x2d
 8002a60:	9a04      	ldr	r2, [sp, #16]
 8002a62:	426d      	negs	r5, r5
 8002a64:	7013      	strb	r3, [r2, #0]
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <_printf_i+0x21c>)
 8002a68:	270a      	movs	r7, #10
 8002a6a:	9303      	str	r3, [sp, #12]
 8002a6c:	e01b      	b.n	8002aa6 <_printf_i+0xd6>
 8002a6e:	680d      	ldr	r5, [r1, #0]
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	0641      	lsls	r1, r0, #25
 8002a74:	d5f1      	bpl.n	8002a5a <_printf_i+0x8a>
 8002a76:	b22d      	sxth	r5, r5
 8002a78:	e7ef      	b.n	8002a5a <_printf_i+0x8a>
 8002a7a:	680d      	ldr	r5, [r1, #0]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	1d08      	adds	r0, r1, #4
 8002a80:	6018      	str	r0, [r3, #0]
 8002a82:	062e      	lsls	r6, r5, #24
 8002a84:	d501      	bpl.n	8002a8a <_printf_i+0xba>
 8002a86:	680d      	ldr	r5, [r1, #0]
 8002a88:	e003      	b.n	8002a92 <_printf_i+0xc2>
 8002a8a:	066d      	lsls	r5, r5, #25
 8002a8c:	d5fb      	bpl.n	8002a86 <_printf_i+0xb6>
 8002a8e:	680d      	ldr	r5, [r1, #0]
 8002a90:	b2ad      	uxth	r5, r5
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <_printf_i+0x21c>)
 8002a94:	2708      	movs	r7, #8
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	2a6f      	cmp	r2, #111	; 0x6f
 8002a9a:	d000      	beq.n	8002a9e <_printf_i+0xce>
 8002a9c:	3702      	adds	r7, #2
 8002a9e:	0023      	movs	r3, r4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	3343      	adds	r3, #67	; 0x43
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	6863      	ldr	r3, [r4, #4]
 8002aa8:	60a3      	str	r3, [r4, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db03      	blt.n	8002ab6 <_printf_i+0xe6>
 8002aae:	2204      	movs	r2, #4
 8002ab0:	6821      	ldr	r1, [r4, #0]
 8002ab2:	4391      	bics	r1, r2
 8002ab4:	6021      	str	r1, [r4, #0]
 8002ab6:	2d00      	cmp	r5, #0
 8002ab8:	d102      	bne.n	8002ac0 <_printf_i+0xf0>
 8002aba:	9e04      	ldr	r6, [sp, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <_printf_i+0x10a>
 8002ac0:	9e04      	ldr	r6, [sp, #16]
 8002ac2:	0028      	movs	r0, r5
 8002ac4:	0039      	movs	r1, r7
 8002ac6:	f7fd fbaf 	bl	8000228 <__aeabi_uidivmod>
 8002aca:	9b03      	ldr	r3, [sp, #12]
 8002acc:	3e01      	subs	r6, #1
 8002ace:	5c5b      	ldrb	r3, [r3, r1]
 8002ad0:	7033      	strb	r3, [r6, #0]
 8002ad2:	002b      	movs	r3, r5
 8002ad4:	0005      	movs	r5, r0
 8002ad6:	429f      	cmp	r7, r3
 8002ad8:	d9f3      	bls.n	8002ac2 <_printf_i+0xf2>
 8002ada:	2f08      	cmp	r7, #8
 8002adc:	d109      	bne.n	8002af2 <_printf_i+0x122>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	07db      	lsls	r3, r3, #31
 8002ae2:	d506      	bpl.n	8002af2 <_printf_i+0x122>
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	6922      	ldr	r2, [r4, #16]
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	dc02      	bgt.n	8002af2 <_printf_i+0x122>
 8002aec:	2330      	movs	r3, #48	; 0x30
 8002aee:	3e01      	subs	r6, #1
 8002af0:	7033      	strb	r3, [r6, #0]
 8002af2:	9b04      	ldr	r3, [sp, #16]
 8002af4:	1b9b      	subs	r3, r3, r6
 8002af6:	6123      	str	r3, [r4, #16]
 8002af8:	9b07      	ldr	r3, [sp, #28]
 8002afa:	0021      	movs	r1, r4
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	9805      	ldr	r0, [sp, #20]
 8002b00:	9b06      	ldr	r3, [sp, #24]
 8002b02:	aa09      	add	r2, sp, #36	; 0x24
 8002b04:	f7ff fef4 	bl	80028f0 <_printf_common>
 8002b08:	1c43      	adds	r3, r0, #1
 8002b0a:	d14c      	bne.n	8002ba6 <_printf_i+0x1d6>
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	4240      	negs	r0, r0
 8002b10:	b00b      	add	sp, #44	; 0x2c
 8002b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b14:	3145      	adds	r1, #69	; 0x45
 8002b16:	700a      	strb	r2, [r1, #0]
 8002b18:	4a34      	ldr	r2, [pc, #208]	; (8002bec <_printf_i+0x21c>)
 8002b1a:	9203      	str	r2, [sp, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	6821      	ldr	r1, [r4, #0]
 8002b20:	ca20      	ldmia	r2!, {r5}
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	0608      	lsls	r0, r1, #24
 8002b26:	d516      	bpl.n	8002b56 <_printf_i+0x186>
 8002b28:	07cb      	lsls	r3, r1, #31
 8002b2a:	d502      	bpl.n	8002b32 <_printf_i+0x162>
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	4319      	orrs	r1, r3
 8002b30:	6021      	str	r1, [r4, #0]
 8002b32:	2710      	movs	r7, #16
 8002b34:	2d00      	cmp	r5, #0
 8002b36:	d1b2      	bne.n	8002a9e <_printf_i+0xce>
 8002b38:	2320      	movs	r3, #32
 8002b3a:	6822      	ldr	r2, [r4, #0]
 8002b3c:	439a      	bics	r2, r3
 8002b3e:	6022      	str	r2, [r4, #0]
 8002b40:	e7ad      	b.n	8002a9e <_printf_i+0xce>
 8002b42:	2220      	movs	r2, #32
 8002b44:	6809      	ldr	r1, [r1, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	6022      	str	r2, [r4, #0]
 8002b4a:	0022      	movs	r2, r4
 8002b4c:	2178      	movs	r1, #120	; 0x78
 8002b4e:	3245      	adds	r2, #69	; 0x45
 8002b50:	7011      	strb	r1, [r2, #0]
 8002b52:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <_printf_i+0x220>)
 8002b54:	e7e1      	b.n	8002b1a <_printf_i+0x14a>
 8002b56:	0648      	lsls	r0, r1, #25
 8002b58:	d5e6      	bpl.n	8002b28 <_printf_i+0x158>
 8002b5a:	b2ad      	uxth	r5, r5
 8002b5c:	e7e4      	b.n	8002b28 <_printf_i+0x158>
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	680d      	ldr	r5, [r1, #0]
 8002b62:	1d10      	adds	r0, r2, #4
 8002b64:	6949      	ldr	r1, [r1, #20]
 8002b66:	6018      	str	r0, [r3, #0]
 8002b68:	6813      	ldr	r3, [r2, #0]
 8002b6a:	062e      	lsls	r6, r5, #24
 8002b6c:	d501      	bpl.n	8002b72 <_printf_i+0x1a2>
 8002b6e:	6019      	str	r1, [r3, #0]
 8002b70:	e002      	b.n	8002b78 <_printf_i+0x1a8>
 8002b72:	066d      	lsls	r5, r5, #25
 8002b74:	d5fb      	bpl.n	8002b6e <_printf_i+0x19e>
 8002b76:	8019      	strh	r1, [r3, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9e04      	ldr	r6, [sp, #16]
 8002b7c:	6123      	str	r3, [r4, #16]
 8002b7e:	e7bb      	b.n	8002af8 <_printf_i+0x128>
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	1d11      	adds	r1, r2, #4
 8002b84:	6019      	str	r1, [r3, #0]
 8002b86:	6816      	ldr	r6, [r2, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	0030      	movs	r0, r6
 8002b8c:	6862      	ldr	r2, [r4, #4]
 8002b8e:	f000 facf 	bl	8003130 <memchr>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d001      	beq.n	8002b9a <_printf_i+0x1ca>
 8002b96:	1b80      	subs	r0, r0, r6
 8002b98:	6060      	str	r0, [r4, #4]
 8002b9a:	6863      	ldr	r3, [r4, #4]
 8002b9c:	6123      	str	r3, [r4, #16]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9a04      	ldr	r2, [sp, #16]
 8002ba2:	7013      	strb	r3, [r2, #0]
 8002ba4:	e7a8      	b.n	8002af8 <_printf_i+0x128>
 8002ba6:	6923      	ldr	r3, [r4, #16]
 8002ba8:	0032      	movs	r2, r6
 8002baa:	9906      	ldr	r1, [sp, #24]
 8002bac:	9805      	ldr	r0, [sp, #20]
 8002bae:	9d07      	ldr	r5, [sp, #28]
 8002bb0:	47a8      	blx	r5
 8002bb2:	1c43      	adds	r3, r0, #1
 8002bb4:	d0aa      	beq.n	8002b0c <_printf_i+0x13c>
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	079b      	lsls	r3, r3, #30
 8002bba:	d415      	bmi.n	8002be8 <_printf_i+0x218>
 8002bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bbe:	68e0      	ldr	r0, [r4, #12]
 8002bc0:	4298      	cmp	r0, r3
 8002bc2:	daa5      	bge.n	8002b10 <_printf_i+0x140>
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	e7a3      	b.n	8002b10 <_printf_i+0x140>
 8002bc8:	0022      	movs	r2, r4
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9906      	ldr	r1, [sp, #24]
 8002bce:	9805      	ldr	r0, [sp, #20]
 8002bd0:	9e07      	ldr	r6, [sp, #28]
 8002bd2:	3219      	adds	r2, #25
 8002bd4:	47b0      	blx	r6
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	d098      	beq.n	8002b0c <_printf_i+0x13c>
 8002bda:	3501      	adds	r5, #1
 8002bdc:	68e3      	ldr	r3, [r4, #12]
 8002bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	42ab      	cmp	r3, r5
 8002be4:	dcf0      	bgt.n	8002bc8 <_printf_i+0x1f8>
 8002be6:	e7e9      	b.n	8002bbc <_printf_i+0x1ec>
 8002be8:	2500      	movs	r5, #0
 8002bea:	e7f7      	b.n	8002bdc <_printf_i+0x20c>
 8002bec:	080033f9 	.word	0x080033f9
 8002bf0:	0800340a 	.word	0x0800340a

08002bf4 <_sbrk_r>:
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	b570      	push	{r4, r5, r6, lr}
 8002bf8:	4d06      	ldr	r5, [pc, #24]	; (8002c14 <_sbrk_r+0x20>)
 8002bfa:	0004      	movs	r4, r0
 8002bfc:	0008      	movs	r0, r1
 8002bfe:	602b      	str	r3, [r5, #0]
 8002c00:	f7fd fc8e 	bl	8000520 <_sbrk>
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	d103      	bne.n	8002c10 <_sbrk_r+0x1c>
 8002c08:	682b      	ldr	r3, [r5, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d000      	beq.n	8002c10 <_sbrk_r+0x1c>
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	2000092c 	.word	0x2000092c

08002c18 <__sread>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	000c      	movs	r4, r1
 8002c1c:	250e      	movs	r5, #14
 8002c1e:	5f49      	ldrsh	r1, [r1, r5]
 8002c20:	f000 fb38 	bl	8003294 <_read_r>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	db03      	blt.n	8002c30 <__sread+0x18>
 8002c28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c2a:	181b      	adds	r3, r3, r0
 8002c2c:	6563      	str	r3, [r4, #84]	; 0x54
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	4a02      	ldr	r2, [pc, #8]	; (8002c3c <__sread+0x24>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	e7f9      	b.n	8002c2e <__sread+0x16>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	ffffefff 	.word	0xffffefff

08002c40 <__swrite>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	001f      	movs	r7, r3
 8002c44:	898b      	ldrh	r3, [r1, #12]
 8002c46:	0005      	movs	r5, r0
 8002c48:	000c      	movs	r4, r1
 8002c4a:	0016      	movs	r6, r2
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	d505      	bpl.n	8002c5c <__swrite+0x1c>
 8002c50:	230e      	movs	r3, #14
 8002c52:	5ec9      	ldrsh	r1, [r1, r3]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2302      	movs	r3, #2
 8002c58:	f000 f9ea 	bl	8003030 <_lseek_r>
 8002c5c:	89a3      	ldrh	r3, [r4, #12]
 8002c5e:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <__swrite+0x34>)
 8002c60:	0028      	movs	r0, r5
 8002c62:	4013      	ands	r3, r2
 8002c64:	81a3      	strh	r3, [r4, #12]
 8002c66:	0032      	movs	r2, r6
 8002c68:	230e      	movs	r3, #14
 8002c6a:	5ee1      	ldrsh	r1, [r4, r3]
 8002c6c:	003b      	movs	r3, r7
 8002c6e:	f000 f875 	bl	8002d5c <_write_r>
 8002c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c74:	ffffefff 	.word	0xffffefff

08002c78 <__sseek>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	000c      	movs	r4, r1
 8002c7c:	250e      	movs	r5, #14
 8002c7e:	5f49      	ldrsh	r1, [r1, r5]
 8002c80:	f000 f9d6 	bl	8003030 <_lseek_r>
 8002c84:	89a3      	ldrh	r3, [r4, #12]
 8002c86:	1c42      	adds	r2, r0, #1
 8002c88:	d103      	bne.n	8002c92 <__sseek+0x1a>
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <__sseek+0x28>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	bd70      	pop	{r4, r5, r6, pc}
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	0152      	lsls	r2, r2, #5
 8002c96:	4313      	orrs	r3, r2
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8002c9c:	e7f8      	b.n	8002c90 <__sseek+0x18>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	ffffefff 	.word	0xffffefff

08002ca4 <__sclose>:
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	230e      	movs	r3, #14
 8002ca8:	5ec9      	ldrsh	r1, [r1, r3]
 8002caa:	f000 f8e3 	bl	8002e74 <_close_r>
 8002cae:	bd10      	pop	{r4, pc}

08002cb0 <__swbuf_r>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	0005      	movs	r5, r0
 8002cb4:	000e      	movs	r6, r1
 8002cb6:	0014      	movs	r4, r2
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d004      	beq.n	8002cc6 <__swbuf_r+0x16>
 8002cbc:	6983      	ldr	r3, [r0, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <__swbuf_r+0x16>
 8002cc2:	f7ff fa15 	bl	80020f0 <__sinit>
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <__swbuf_r+0xa0>)
 8002cc8:	429c      	cmp	r4, r3
 8002cca:	d12e      	bne.n	8002d2a <__swbuf_r+0x7a>
 8002ccc:	686c      	ldr	r4, [r5, #4]
 8002cce:	69a3      	ldr	r3, [r4, #24]
 8002cd0:	60a3      	str	r3, [r4, #8]
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	071b      	lsls	r3, r3, #28
 8002cd6:	d532      	bpl.n	8002d3e <__swbuf_r+0x8e>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d02f      	beq.n	8002d3e <__swbuf_r+0x8e>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	6922      	ldr	r2, [r4, #16]
 8002ce2:	b2f7      	uxtb	r7, r6
 8002ce4:	1a98      	subs	r0, r3, r2
 8002ce6:	6963      	ldr	r3, [r4, #20]
 8002ce8:	b2f6      	uxtb	r6, r6
 8002cea:	4283      	cmp	r3, r0
 8002cec:	dc05      	bgt.n	8002cfa <__swbuf_r+0x4a>
 8002cee:	0021      	movs	r1, r4
 8002cf0:	0028      	movs	r0, r5
 8002cf2:	f000 f95d 	bl	8002fb0 <_fflush_r>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d127      	bne.n	8002d4a <__swbuf_r+0x9a>
 8002cfa:	68a3      	ldr	r3, [r4, #8]
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	60a3      	str	r3, [r4, #8]
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	6022      	str	r2, [r4, #0]
 8002d08:	701f      	strb	r7, [r3, #0]
 8002d0a:	6963      	ldr	r3, [r4, #20]
 8002d0c:	4283      	cmp	r3, r0
 8002d0e:	d004      	beq.n	8002d1a <__swbuf_r+0x6a>
 8002d10:	89a3      	ldrh	r3, [r4, #12]
 8002d12:	07db      	lsls	r3, r3, #31
 8002d14:	d507      	bpl.n	8002d26 <__swbuf_r+0x76>
 8002d16:	2e0a      	cmp	r6, #10
 8002d18:	d105      	bne.n	8002d26 <__swbuf_r+0x76>
 8002d1a:	0021      	movs	r1, r4
 8002d1c:	0028      	movs	r0, r5
 8002d1e:	f000 f947 	bl	8002fb0 <_fflush_r>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d111      	bne.n	8002d4a <__swbuf_r+0x9a>
 8002d26:	0030      	movs	r0, r6
 8002d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <__swbuf_r+0xa4>)
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	d101      	bne.n	8002d34 <__swbuf_r+0x84>
 8002d30:	68ac      	ldr	r4, [r5, #8]
 8002d32:	e7cc      	b.n	8002cce <__swbuf_r+0x1e>
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <__swbuf_r+0xa8>)
 8002d36:	429c      	cmp	r4, r3
 8002d38:	d1c9      	bne.n	8002cce <__swbuf_r+0x1e>
 8002d3a:	68ec      	ldr	r4, [r5, #12]
 8002d3c:	e7c7      	b.n	8002cce <__swbuf_r+0x1e>
 8002d3e:	0021      	movs	r1, r4
 8002d40:	0028      	movs	r0, r5
 8002d42:	f000 f81f 	bl	8002d84 <__swsetup_r>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d0c9      	beq.n	8002cde <__swbuf_r+0x2e>
 8002d4a:	2601      	movs	r6, #1
 8002d4c:	4276      	negs	r6, r6
 8002d4e:	e7ea      	b.n	8002d26 <__swbuf_r+0x76>
 8002d50:	080033a8 	.word	0x080033a8
 8002d54:	080033c8 	.word	0x080033c8
 8002d58:	08003388 	.word	0x08003388

08002d5c <_write_r>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	0004      	movs	r4, r0
 8002d60:	0008      	movs	r0, r1
 8002d62:	0011      	movs	r1, r2
 8002d64:	001a      	movs	r2, r3
 8002d66:	2300      	movs	r3, #0
 8002d68:	4d05      	ldr	r5, [pc, #20]	; (8002d80 <_write_r+0x24>)
 8002d6a:	602b      	str	r3, [r5, #0]
 8002d6c:	f7fd fb90 	bl	8000490 <_write>
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	d103      	bne.n	8002d7c <_write_r+0x20>
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d000      	beq.n	8002d7c <_write_r+0x20>
 8002d7a:	6023      	str	r3, [r4, #0]
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	2000092c 	.word	0x2000092c

08002d84 <__swsetup_r>:
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <__swsetup_r+0xe0>)
 8002d86:	b570      	push	{r4, r5, r6, lr}
 8002d88:	681d      	ldr	r5, [r3, #0]
 8002d8a:	0006      	movs	r6, r0
 8002d8c:	000c      	movs	r4, r1
 8002d8e:	2d00      	cmp	r5, #0
 8002d90:	d005      	beq.n	8002d9e <__swsetup_r+0x1a>
 8002d92:	69ab      	ldr	r3, [r5, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <__swsetup_r+0x1a>
 8002d98:	0028      	movs	r0, r5
 8002d9a:	f7ff f9a9 	bl	80020f0 <__sinit>
 8002d9e:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <__swsetup_r+0xe4>)
 8002da0:	429c      	cmp	r4, r3
 8002da2:	d10f      	bne.n	8002dc4 <__swsetup_r+0x40>
 8002da4:	686c      	ldr	r4, [r5, #4]
 8002da6:	230c      	movs	r3, #12
 8002da8:	5ee2      	ldrsh	r2, [r4, r3]
 8002daa:	b293      	uxth	r3, r2
 8002dac:	0711      	lsls	r1, r2, #28
 8002dae:	d42d      	bmi.n	8002e0c <__swsetup_r+0x88>
 8002db0:	06d9      	lsls	r1, r3, #27
 8002db2:	d411      	bmi.n	8002dd8 <__swsetup_r+0x54>
 8002db4:	2309      	movs	r3, #9
 8002db6:	2001      	movs	r0, #1
 8002db8:	6033      	str	r3, [r6, #0]
 8002dba:	3337      	adds	r3, #55	; 0x37
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	4240      	negs	r0, r0
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <__swsetup_r+0xe8>)
 8002dc6:	429c      	cmp	r4, r3
 8002dc8:	d101      	bne.n	8002dce <__swsetup_r+0x4a>
 8002dca:	68ac      	ldr	r4, [r5, #8]
 8002dcc:	e7eb      	b.n	8002da6 <__swsetup_r+0x22>
 8002dce:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <__swsetup_r+0xec>)
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	d1e8      	bne.n	8002da6 <__swsetup_r+0x22>
 8002dd4:	68ec      	ldr	r4, [r5, #12]
 8002dd6:	e7e6      	b.n	8002da6 <__swsetup_r+0x22>
 8002dd8:	075b      	lsls	r3, r3, #29
 8002dda:	d513      	bpl.n	8002e04 <__swsetup_r+0x80>
 8002ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dde:	2900      	cmp	r1, #0
 8002de0:	d008      	beq.n	8002df4 <__swsetup_r+0x70>
 8002de2:	0023      	movs	r3, r4
 8002de4:	3344      	adds	r3, #68	; 0x44
 8002de6:	4299      	cmp	r1, r3
 8002de8:	d002      	beq.n	8002df0 <__swsetup_r+0x6c>
 8002dea:	0030      	movs	r0, r6
 8002dec:	f000 f9d8 	bl	80031a0 <_free_r>
 8002df0:	2300      	movs	r3, #0
 8002df2:	6363      	str	r3, [r4, #52]	; 0x34
 8002df4:	2224      	movs	r2, #36	; 0x24
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	4393      	bics	r3, r2
 8002dfa:	81a3      	strh	r3, [r4, #12]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	6063      	str	r3, [r4, #4]
 8002e00:	6923      	ldr	r3, [r4, #16]
 8002e02:	6023      	str	r3, [r4, #0]
 8002e04:	2308      	movs	r3, #8
 8002e06:	89a2      	ldrh	r2, [r4, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	81a3      	strh	r3, [r4, #12]
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <__swsetup_r+0xa6>
 8002e12:	21a0      	movs	r1, #160	; 0xa0
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	0089      	lsls	r1, r1, #2
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <__swsetup_r+0xa6>
 8002e22:	0021      	movs	r1, r4
 8002e24:	0030      	movs	r0, r6
 8002e26:	f000 f93f 	bl	80030a8 <__smakebuf_r>
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	5ea3      	ldrsh	r3, [r4, r2]
 8002e2e:	2001      	movs	r0, #1
 8002e30:	001a      	movs	r2, r3
 8002e32:	b299      	uxth	r1, r3
 8002e34:	4002      	ands	r2, r0
 8002e36:	4203      	tst	r3, r0
 8002e38:	d00f      	beq.n	8002e5a <__swsetup_r+0xd6>
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60a2      	str	r2, [r4, #8]
 8002e3e:	6962      	ldr	r2, [r4, #20]
 8002e40:	4252      	negs	r2, r2
 8002e42:	61a2      	str	r2, [r4, #24]
 8002e44:	2000      	movs	r0, #0
 8002e46:	6922      	ldr	r2, [r4, #16]
 8002e48:	4282      	cmp	r2, r0
 8002e4a:	d1ba      	bne.n	8002dc2 <__swsetup_r+0x3e>
 8002e4c:	060a      	lsls	r2, r1, #24
 8002e4e:	d5b8      	bpl.n	8002dc2 <__swsetup_r+0x3e>
 8002e50:	2240      	movs	r2, #64	; 0x40
 8002e52:	4313      	orrs	r3, r2
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	3801      	subs	r0, #1
 8002e58:	e7b3      	b.n	8002dc2 <__swsetup_r+0x3e>
 8002e5a:	0788      	lsls	r0, r1, #30
 8002e5c:	d400      	bmi.n	8002e60 <__swsetup_r+0xdc>
 8002e5e:	6962      	ldr	r2, [r4, #20]
 8002e60:	60a2      	str	r2, [r4, #8]
 8002e62:	e7ef      	b.n	8002e44 <__swsetup_r+0xc0>
 8002e64:	2000000c 	.word	0x2000000c
 8002e68:	080033a8 	.word	0x080033a8
 8002e6c:	080033c8 	.word	0x080033c8
 8002e70:	08003388 	.word	0x08003388

08002e74 <_close_r>:
 8002e74:	2300      	movs	r3, #0
 8002e76:	b570      	push	{r4, r5, r6, lr}
 8002e78:	4d06      	ldr	r5, [pc, #24]	; (8002e94 <_close_r+0x20>)
 8002e7a:	0004      	movs	r4, r0
 8002e7c:	0008      	movs	r0, r1
 8002e7e:	602b      	str	r3, [r5, #0]
 8002e80:	f7fd fb22 	bl	80004c8 <_close>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d103      	bne.n	8002e90 <_close_r+0x1c>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d000      	beq.n	8002e90 <_close_r+0x1c>
 8002e8e:	6023      	str	r3, [r4, #0]
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	2000092c 	.word	0x2000092c

08002e98 <__sflush_r>:
 8002e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e9a:	898b      	ldrh	r3, [r1, #12]
 8002e9c:	0005      	movs	r5, r0
 8002e9e:	000c      	movs	r4, r1
 8002ea0:	071a      	lsls	r2, r3, #28
 8002ea2:	d45f      	bmi.n	8002f64 <__sflush_r+0xcc>
 8002ea4:	684a      	ldr	r2, [r1, #4]
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	dc04      	bgt.n	8002eb4 <__sflush_r+0x1c>
 8002eaa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002eac:	2a00      	cmp	r2, #0
 8002eae:	dc01      	bgt.n	8002eb4 <__sflush_r+0x1c>
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002eb4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002eb6:	2f00      	cmp	r7, #0
 8002eb8:	d0fa      	beq.n	8002eb0 <__sflush_r+0x18>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	682e      	ldr	r6, [r5, #0]
 8002ec0:	602a      	str	r2, [r5, #0]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	0149      	lsls	r1, r1, #5
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	420b      	tst	r3, r1
 8002eca:	d034      	beq.n	8002f36 <__sflush_r+0x9e>
 8002ecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	075b      	lsls	r3, r3, #29
 8002ed2:	d506      	bpl.n	8002ee2 <__sflush_r+0x4a>
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	1ac0      	subs	r0, r0, r3
 8002ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <__sflush_r+0x4a>
 8002ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ee0:	1ac0      	subs	r0, r0, r3
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	6a21      	ldr	r1, [r4, #32]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	0028      	movs	r0, r5
 8002eea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002eec:	47b8      	blx	r7
 8002eee:	89a1      	ldrh	r1, [r4, #12]
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d106      	bne.n	8002f02 <__sflush_r+0x6a>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	2b1d      	cmp	r3, #29
 8002ef8:	d831      	bhi.n	8002f5e <__sflush_r+0xc6>
 8002efa:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <__sflush_r+0x114>)
 8002efc:	40da      	lsrs	r2, r3
 8002efe:	07d3      	lsls	r3, r2, #31
 8002f00:	d52d      	bpl.n	8002f5e <__sflush_r+0xc6>
 8002f02:	2300      	movs	r3, #0
 8002f04:	6063      	str	r3, [r4, #4]
 8002f06:	6923      	ldr	r3, [r4, #16]
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	04cb      	lsls	r3, r1, #19
 8002f0c:	d505      	bpl.n	8002f1a <__sflush_r+0x82>
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	d102      	bne.n	8002f18 <__sflush_r+0x80>
 8002f12:	682b      	ldr	r3, [r5, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d100      	bne.n	8002f1a <__sflush_r+0x82>
 8002f18:	6560      	str	r0, [r4, #84]	; 0x54
 8002f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f1c:	602e      	str	r6, [r5, #0]
 8002f1e:	2900      	cmp	r1, #0
 8002f20:	d0c6      	beq.n	8002eb0 <__sflush_r+0x18>
 8002f22:	0023      	movs	r3, r4
 8002f24:	3344      	adds	r3, #68	; 0x44
 8002f26:	4299      	cmp	r1, r3
 8002f28:	d002      	beq.n	8002f30 <__sflush_r+0x98>
 8002f2a:	0028      	movs	r0, r5
 8002f2c:	f000 f938 	bl	80031a0 <_free_r>
 8002f30:	2000      	movs	r0, #0
 8002f32:	6360      	str	r0, [r4, #52]	; 0x34
 8002f34:	e7bd      	b.n	8002eb2 <__sflush_r+0x1a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	0028      	movs	r0, r5
 8002f3a:	6a21      	ldr	r1, [r4, #32]
 8002f3c:	47b8      	blx	r7
 8002f3e:	1c43      	adds	r3, r0, #1
 8002f40:	d1c5      	bne.n	8002ece <__sflush_r+0x36>
 8002f42:	682b      	ldr	r3, [r5, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0c2      	beq.n	8002ece <__sflush_r+0x36>
 8002f48:	2b1d      	cmp	r3, #29
 8002f4a:	d001      	beq.n	8002f50 <__sflush_r+0xb8>
 8002f4c:	2b16      	cmp	r3, #22
 8002f4e:	d101      	bne.n	8002f54 <__sflush_r+0xbc>
 8002f50:	602e      	str	r6, [r5, #0]
 8002f52:	e7ad      	b.n	8002eb0 <__sflush_r+0x18>
 8002f54:	2340      	movs	r3, #64	; 0x40
 8002f56:	89a2      	ldrh	r2, [r4, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	e7a9      	b.n	8002eb2 <__sflush_r+0x1a>
 8002f5e:	2340      	movs	r3, #64	; 0x40
 8002f60:	430b      	orrs	r3, r1
 8002f62:	e7fa      	b.n	8002f5a <__sflush_r+0xc2>
 8002f64:	690f      	ldr	r7, [r1, #16]
 8002f66:	2f00      	cmp	r7, #0
 8002f68:	d0a2      	beq.n	8002eb0 <__sflush_r+0x18>
 8002f6a:	680a      	ldr	r2, [r1, #0]
 8002f6c:	600f      	str	r7, [r1, #0]
 8002f6e:	1bd2      	subs	r2, r2, r7
 8002f70:	9201      	str	r2, [sp, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	079b      	lsls	r3, r3, #30
 8002f76:	d100      	bne.n	8002f7a <__sflush_r+0xe2>
 8002f78:	694a      	ldr	r2, [r1, #20]
 8002f7a:	60a2      	str	r2, [r4, #8]
 8002f7c:	9b01      	ldr	r3, [sp, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	dc00      	bgt.n	8002f84 <__sflush_r+0xec>
 8002f82:	e795      	b.n	8002eb0 <__sflush_r+0x18>
 8002f84:	003a      	movs	r2, r7
 8002f86:	0028      	movs	r0, r5
 8002f88:	9b01      	ldr	r3, [sp, #4]
 8002f8a:	6a21      	ldr	r1, [r4, #32]
 8002f8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f8e:	47b0      	blx	r6
 8002f90:	2800      	cmp	r0, #0
 8002f92:	dc06      	bgt.n	8002fa2 <__sflush_r+0x10a>
 8002f94:	2340      	movs	r3, #64	; 0x40
 8002f96:	2001      	movs	r0, #1
 8002f98:	89a2      	ldrh	r2, [r4, #12]
 8002f9a:	4240      	negs	r0, r0
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	e787      	b.n	8002eb2 <__sflush_r+0x1a>
 8002fa2:	9b01      	ldr	r3, [sp, #4]
 8002fa4:	183f      	adds	r7, r7, r0
 8002fa6:	1a1b      	subs	r3, r3, r0
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	e7e7      	b.n	8002f7c <__sflush_r+0xe4>
 8002fac:	20400001 	.word	0x20400001

08002fb0 <_fflush_r>:
 8002fb0:	690b      	ldr	r3, [r1, #16]
 8002fb2:	b570      	push	{r4, r5, r6, lr}
 8002fb4:	0005      	movs	r5, r0
 8002fb6:	000c      	movs	r4, r1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <_fflush_r+0x12>
 8002fbc:	2500      	movs	r5, #0
 8002fbe:	0028      	movs	r0, r5
 8002fc0:	bd70      	pop	{r4, r5, r6, pc}
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d004      	beq.n	8002fd0 <_fflush_r+0x20>
 8002fc6:	6983      	ldr	r3, [r0, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <_fflush_r+0x20>
 8002fcc:	f7ff f890 	bl	80020f0 <__sinit>
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <_fflush_r+0x74>)
 8002fd2:	429c      	cmp	r4, r3
 8002fd4:	d11b      	bne.n	800300e <_fflush_r+0x5e>
 8002fd6:	686c      	ldr	r4, [r5, #4]
 8002fd8:	220c      	movs	r2, #12
 8002fda:	5ea3      	ldrsh	r3, [r4, r2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ed      	beq.n	8002fbc <_fflush_r+0xc>
 8002fe0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fe2:	07d2      	lsls	r2, r2, #31
 8002fe4:	d404      	bmi.n	8002ff0 <_fflush_r+0x40>
 8002fe6:	059b      	lsls	r3, r3, #22
 8002fe8:	d402      	bmi.n	8002ff0 <_fflush_r+0x40>
 8002fea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fec:	f7ff f921 	bl	8002232 <__retarget_lock_acquire_recursive>
 8002ff0:	0028      	movs	r0, r5
 8002ff2:	0021      	movs	r1, r4
 8002ff4:	f7ff ff50 	bl	8002e98 <__sflush_r>
 8002ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ffa:	0005      	movs	r5, r0
 8002ffc:	07db      	lsls	r3, r3, #31
 8002ffe:	d4de      	bmi.n	8002fbe <_fflush_r+0xe>
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	059b      	lsls	r3, r3, #22
 8003004:	d4db      	bmi.n	8002fbe <_fflush_r+0xe>
 8003006:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003008:	f7ff f914 	bl	8002234 <__retarget_lock_release_recursive>
 800300c:	e7d7      	b.n	8002fbe <_fflush_r+0xe>
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <_fflush_r+0x78>)
 8003010:	429c      	cmp	r4, r3
 8003012:	d101      	bne.n	8003018 <_fflush_r+0x68>
 8003014:	68ac      	ldr	r4, [r5, #8]
 8003016:	e7df      	b.n	8002fd8 <_fflush_r+0x28>
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <_fflush_r+0x7c>)
 800301a:	429c      	cmp	r4, r3
 800301c:	d1dc      	bne.n	8002fd8 <_fflush_r+0x28>
 800301e:	68ec      	ldr	r4, [r5, #12]
 8003020:	e7da      	b.n	8002fd8 <_fflush_r+0x28>
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	080033a8 	.word	0x080033a8
 8003028:	080033c8 	.word	0x080033c8
 800302c:	08003388 	.word	0x08003388

08003030 <_lseek_r>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	0004      	movs	r4, r0
 8003034:	0008      	movs	r0, r1
 8003036:	0011      	movs	r1, r2
 8003038:	001a      	movs	r2, r3
 800303a:	2300      	movs	r3, #0
 800303c:	4d05      	ldr	r5, [pc, #20]	; (8003054 <_lseek_r+0x24>)
 800303e:	602b      	str	r3, [r5, #0]
 8003040:	f7fd fa63 	bl	800050a <_lseek>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d103      	bne.n	8003050 <_lseek_r+0x20>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d000      	beq.n	8003050 <_lseek_r+0x20>
 800304e:	6023      	str	r3, [r4, #0]
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	2000092c 	.word	0x2000092c

08003058 <__swhatbuf_r>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	000e      	movs	r6, r1
 800305c:	001d      	movs	r5, r3
 800305e:	230e      	movs	r3, #14
 8003060:	5ec9      	ldrsh	r1, [r1, r3]
 8003062:	0014      	movs	r4, r2
 8003064:	b096      	sub	sp, #88	; 0x58
 8003066:	2900      	cmp	r1, #0
 8003068:	da08      	bge.n	800307c <__swhatbuf_r+0x24>
 800306a:	220c      	movs	r2, #12
 800306c:	5eb3      	ldrsh	r3, [r6, r2]
 800306e:	2200      	movs	r2, #0
 8003070:	602a      	str	r2, [r5, #0]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	d411      	bmi.n	800309a <__swhatbuf_r+0x42>
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	e00f      	b.n	800309c <__swhatbuf_r+0x44>
 800307c:	466a      	mov	r2, sp
 800307e:	f000 f91d 	bl	80032bc <_fstat_r>
 8003082:	2800      	cmp	r0, #0
 8003084:	dbf1      	blt.n	800306a <__swhatbuf_r+0x12>
 8003086:	23f0      	movs	r3, #240	; 0xf0
 8003088:	9901      	ldr	r1, [sp, #4]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	4019      	ands	r1, r3
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <__swhatbuf_r+0x4c>)
 8003090:	18c9      	adds	r1, r1, r3
 8003092:	424b      	negs	r3, r1
 8003094:	4159      	adcs	r1, r3
 8003096:	6029      	str	r1, [r5, #0]
 8003098:	e7ed      	b.n	8003076 <__swhatbuf_r+0x1e>
 800309a:	2340      	movs	r3, #64	; 0x40
 800309c:	2000      	movs	r0, #0
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	b016      	add	sp, #88	; 0x58
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	ffffe000 	.word	0xffffe000

080030a8 <__smakebuf_r>:
 80030a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030aa:	2602      	movs	r6, #2
 80030ac:	898b      	ldrh	r3, [r1, #12]
 80030ae:	0005      	movs	r5, r0
 80030b0:	000c      	movs	r4, r1
 80030b2:	4233      	tst	r3, r6
 80030b4:	d006      	beq.n	80030c4 <__smakebuf_r+0x1c>
 80030b6:	0023      	movs	r3, r4
 80030b8:	3347      	adds	r3, #71	; 0x47
 80030ba:	6023      	str	r3, [r4, #0]
 80030bc:	6123      	str	r3, [r4, #16]
 80030be:	2301      	movs	r3, #1
 80030c0:	6163      	str	r3, [r4, #20]
 80030c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80030c4:	466a      	mov	r2, sp
 80030c6:	ab01      	add	r3, sp, #4
 80030c8:	f7ff ffc6 	bl	8003058 <__swhatbuf_r>
 80030cc:	9900      	ldr	r1, [sp, #0]
 80030ce:	0007      	movs	r7, r0
 80030d0:	0028      	movs	r0, r5
 80030d2:	f7ff f8d3 	bl	800227c <_malloc_r>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d108      	bne.n	80030ec <__smakebuf_r+0x44>
 80030da:	220c      	movs	r2, #12
 80030dc:	5ea3      	ldrsh	r3, [r4, r2]
 80030de:	059a      	lsls	r2, r3, #22
 80030e0:	d4ef      	bmi.n	80030c2 <__smakebuf_r+0x1a>
 80030e2:	2203      	movs	r2, #3
 80030e4:	4393      	bics	r3, r2
 80030e6:	431e      	orrs	r6, r3
 80030e8:	81a6      	strh	r6, [r4, #12]
 80030ea:	e7e4      	b.n	80030b6 <__smakebuf_r+0xe>
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <__smakebuf_r+0x84>)
 80030ee:	62ab      	str	r3, [r5, #40]	; 0x28
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	89a2      	ldrh	r2, [r4, #12]
 80030f4:	6020      	str	r0, [r4, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	9b00      	ldr	r3, [sp, #0]
 80030fc:	6120      	str	r0, [r4, #16]
 80030fe:	6163      	str	r3, [r4, #20]
 8003100:	9b01      	ldr	r3, [sp, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <__smakebuf_r+0x7a>
 8003106:	0028      	movs	r0, r5
 8003108:	230e      	movs	r3, #14
 800310a:	5ee1      	ldrsh	r1, [r4, r3]
 800310c:	f000 f8e8 	bl	80032e0 <_isatty_r>
 8003110:	2800      	cmp	r0, #0
 8003112:	d006      	beq.n	8003122 <__smakebuf_r+0x7a>
 8003114:	2203      	movs	r2, #3
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	4393      	bics	r3, r2
 800311a:	001a      	movs	r2, r3
 800311c:	2301      	movs	r3, #1
 800311e:	4313      	orrs	r3, r2
 8003120:	81a3      	strh	r3, [r4, #12]
 8003122:	89a0      	ldrh	r0, [r4, #12]
 8003124:	4307      	orrs	r7, r0
 8003126:	81a7      	strh	r7, [r4, #12]
 8003128:	e7cb      	b.n	80030c2 <__smakebuf_r+0x1a>
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	08002075 	.word	0x08002075

08003130 <memchr>:
 8003130:	b2c9      	uxtb	r1, r1
 8003132:	1882      	adds	r2, r0, r2
 8003134:	4290      	cmp	r0, r2
 8003136:	d101      	bne.n	800313c <memchr+0xc>
 8003138:	2000      	movs	r0, #0
 800313a:	4770      	bx	lr
 800313c:	7803      	ldrb	r3, [r0, #0]
 800313e:	428b      	cmp	r3, r1
 8003140:	d0fb      	beq.n	800313a <memchr+0xa>
 8003142:	3001      	adds	r0, #1
 8003144:	e7f6      	b.n	8003134 <memchr+0x4>

08003146 <memcpy>:
 8003146:	2300      	movs	r3, #0
 8003148:	b510      	push	{r4, lr}
 800314a:	429a      	cmp	r2, r3
 800314c:	d100      	bne.n	8003150 <memcpy+0xa>
 800314e:	bd10      	pop	{r4, pc}
 8003150:	5ccc      	ldrb	r4, [r1, r3]
 8003152:	54c4      	strb	r4, [r0, r3]
 8003154:	3301      	adds	r3, #1
 8003156:	e7f8      	b.n	800314a <memcpy+0x4>

08003158 <memmove>:
 8003158:	b510      	push	{r4, lr}
 800315a:	4288      	cmp	r0, r1
 800315c:	d902      	bls.n	8003164 <memmove+0xc>
 800315e:	188b      	adds	r3, r1, r2
 8003160:	4298      	cmp	r0, r3
 8003162:	d303      	bcc.n	800316c <memmove+0x14>
 8003164:	2300      	movs	r3, #0
 8003166:	e007      	b.n	8003178 <memmove+0x20>
 8003168:	5c8b      	ldrb	r3, [r1, r2]
 800316a:	5483      	strb	r3, [r0, r2]
 800316c:	3a01      	subs	r2, #1
 800316e:	d2fb      	bcs.n	8003168 <memmove+0x10>
 8003170:	bd10      	pop	{r4, pc}
 8003172:	5ccc      	ldrb	r4, [r1, r3]
 8003174:	54c4      	strb	r4, [r0, r3]
 8003176:	3301      	adds	r3, #1
 8003178:	429a      	cmp	r2, r3
 800317a:	d1fa      	bne.n	8003172 <memmove+0x1a>
 800317c:	e7f8      	b.n	8003170 <memmove+0x18>
	...

08003180 <__malloc_lock>:
 8003180:	b510      	push	{r4, lr}
 8003182:	4802      	ldr	r0, [pc, #8]	; (800318c <__malloc_lock+0xc>)
 8003184:	f7ff f855 	bl	8002232 <__retarget_lock_acquire_recursive>
 8003188:	bd10      	pop	{r4, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	20000920 	.word	0x20000920

08003190 <__malloc_unlock>:
 8003190:	b510      	push	{r4, lr}
 8003192:	4802      	ldr	r0, [pc, #8]	; (800319c <__malloc_unlock+0xc>)
 8003194:	f7ff f84e 	bl	8002234 <__retarget_lock_release_recursive>
 8003198:	bd10      	pop	{r4, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	20000920 	.word	0x20000920

080031a0 <_free_r>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	0005      	movs	r5, r0
 80031a4:	2900      	cmp	r1, #0
 80031a6:	d010      	beq.n	80031ca <_free_r+0x2a>
 80031a8:	1f0c      	subs	r4, r1, #4
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da00      	bge.n	80031b2 <_free_r+0x12>
 80031b0:	18e4      	adds	r4, r4, r3
 80031b2:	0028      	movs	r0, r5
 80031b4:	f7ff ffe4 	bl	8003180 <__malloc_lock>
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <_free_r+0x90>)
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <_free_r+0x2c>
 80031c0:	6063      	str	r3, [r4, #4]
 80031c2:	6014      	str	r4, [r2, #0]
 80031c4:	0028      	movs	r0, r5
 80031c6:	f7ff ffe3 	bl	8003190 <__malloc_unlock>
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	d908      	bls.n	80031e2 <_free_r+0x42>
 80031d0:	6821      	ldr	r1, [r4, #0]
 80031d2:	1860      	adds	r0, r4, r1
 80031d4:	4283      	cmp	r3, r0
 80031d6:	d1f3      	bne.n	80031c0 <_free_r+0x20>
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	1841      	adds	r1, r0, r1
 80031de:	6021      	str	r1, [r4, #0]
 80031e0:	e7ee      	b.n	80031c0 <_free_r+0x20>
 80031e2:	001a      	movs	r2, r3
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <_free_r+0x4e>
 80031ea:	42a3      	cmp	r3, r4
 80031ec:	d9f9      	bls.n	80031e2 <_free_r+0x42>
 80031ee:	6811      	ldr	r1, [r2, #0]
 80031f0:	1850      	adds	r0, r2, r1
 80031f2:	42a0      	cmp	r0, r4
 80031f4:	d10b      	bne.n	800320e <_free_r+0x6e>
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	1809      	adds	r1, r1, r0
 80031fa:	1850      	adds	r0, r2, r1
 80031fc:	6011      	str	r1, [r2, #0]
 80031fe:	4283      	cmp	r3, r0
 8003200:	d1e0      	bne.n	80031c4 <_free_r+0x24>
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	1841      	adds	r1, r0, r1
 8003208:	6011      	str	r1, [r2, #0]
 800320a:	6053      	str	r3, [r2, #4]
 800320c:	e7da      	b.n	80031c4 <_free_r+0x24>
 800320e:	42a0      	cmp	r0, r4
 8003210:	d902      	bls.n	8003218 <_free_r+0x78>
 8003212:	230c      	movs	r3, #12
 8003214:	602b      	str	r3, [r5, #0]
 8003216:	e7d5      	b.n	80031c4 <_free_r+0x24>
 8003218:	6821      	ldr	r1, [r4, #0]
 800321a:	1860      	adds	r0, r4, r1
 800321c:	4283      	cmp	r3, r0
 800321e:	d103      	bne.n	8003228 <_free_r+0x88>
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	1841      	adds	r1, r0, r1
 8003226:	6021      	str	r1, [r4, #0]
 8003228:	6063      	str	r3, [r4, #4]
 800322a:	6054      	str	r4, [r2, #4]
 800322c:	e7ca      	b.n	80031c4 <_free_r+0x24>
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	20000924 	.word	0x20000924

08003234 <_realloc_r>:
 8003234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003236:	0007      	movs	r7, r0
 8003238:	000e      	movs	r6, r1
 800323a:	0014      	movs	r4, r2
 800323c:	2900      	cmp	r1, #0
 800323e:	d105      	bne.n	800324c <_realloc_r+0x18>
 8003240:	0011      	movs	r1, r2
 8003242:	f7ff f81b 	bl	800227c <_malloc_r>
 8003246:	0005      	movs	r5, r0
 8003248:	0028      	movs	r0, r5
 800324a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800324c:	2a00      	cmp	r2, #0
 800324e:	d103      	bne.n	8003258 <_realloc_r+0x24>
 8003250:	f7ff ffa6 	bl	80031a0 <_free_r>
 8003254:	0025      	movs	r5, r4
 8003256:	e7f7      	b.n	8003248 <_realloc_r+0x14>
 8003258:	f000 f854 	bl	8003304 <_malloc_usable_size_r>
 800325c:	9001      	str	r0, [sp, #4]
 800325e:	4284      	cmp	r4, r0
 8003260:	d803      	bhi.n	800326a <_realloc_r+0x36>
 8003262:	0035      	movs	r5, r6
 8003264:	0843      	lsrs	r3, r0, #1
 8003266:	42a3      	cmp	r3, r4
 8003268:	d3ee      	bcc.n	8003248 <_realloc_r+0x14>
 800326a:	0021      	movs	r1, r4
 800326c:	0038      	movs	r0, r7
 800326e:	f7ff f805 	bl	800227c <_malloc_r>
 8003272:	1e05      	subs	r5, r0, #0
 8003274:	d0e8      	beq.n	8003248 <_realloc_r+0x14>
 8003276:	9b01      	ldr	r3, [sp, #4]
 8003278:	0022      	movs	r2, r4
 800327a:	429c      	cmp	r4, r3
 800327c:	d900      	bls.n	8003280 <_realloc_r+0x4c>
 800327e:	001a      	movs	r2, r3
 8003280:	0031      	movs	r1, r6
 8003282:	0028      	movs	r0, r5
 8003284:	f7ff ff5f 	bl	8003146 <memcpy>
 8003288:	0031      	movs	r1, r6
 800328a:	0038      	movs	r0, r7
 800328c:	f7ff ff88 	bl	80031a0 <_free_r>
 8003290:	e7da      	b.n	8003248 <_realloc_r+0x14>
	...

08003294 <_read_r>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	0004      	movs	r4, r0
 8003298:	0008      	movs	r0, r1
 800329a:	0011      	movs	r1, r2
 800329c:	001a      	movs	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	4d05      	ldr	r5, [pc, #20]	; (80032b8 <_read_r+0x24>)
 80032a2:	602b      	str	r3, [r5, #0]
 80032a4:	f7fd f8d7 	bl	8000456 <_read>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d103      	bne.n	80032b4 <_read_r+0x20>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d000      	beq.n	80032b4 <_read_r+0x20>
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	2000092c 	.word	0x2000092c

080032bc <_fstat_r>:
 80032bc:	2300      	movs	r3, #0
 80032be:	b570      	push	{r4, r5, r6, lr}
 80032c0:	4d06      	ldr	r5, [pc, #24]	; (80032dc <_fstat_r+0x20>)
 80032c2:	0004      	movs	r4, r0
 80032c4:	0008      	movs	r0, r1
 80032c6:	0011      	movs	r1, r2
 80032c8:	602b      	str	r3, [r5, #0]
 80032ca:	f7fd f907 	bl	80004dc <_fstat>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	d103      	bne.n	80032da <_fstat_r+0x1e>
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d000      	beq.n	80032da <_fstat_r+0x1e>
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	2000092c 	.word	0x2000092c

080032e0 <_isatty_r>:
 80032e0:	2300      	movs	r3, #0
 80032e2:	b570      	push	{r4, r5, r6, lr}
 80032e4:	4d06      	ldr	r5, [pc, #24]	; (8003300 <_isatty_r+0x20>)
 80032e6:	0004      	movs	r4, r0
 80032e8:	0008      	movs	r0, r1
 80032ea:	602b      	str	r3, [r5, #0]
 80032ec:	f7fd f904 	bl	80004f8 <_isatty>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d103      	bne.n	80032fc <_isatty_r+0x1c>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d000      	beq.n	80032fc <_isatty_r+0x1c>
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	2000092c 	.word	0x2000092c

08003304 <_malloc_usable_size_r>:
 8003304:	1f0b      	subs	r3, r1, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1f18      	subs	r0, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	da01      	bge.n	8003312 <_malloc_usable_size_r+0xe>
 800330e:	580b      	ldr	r3, [r1, r0]
 8003310:	18c0      	adds	r0, r0, r3
 8003312:	4770      	bx	lr

08003314 <_init>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr

08003320 <_fini>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003326:	bc08      	pop	{r3}
 8003328:	469e      	mov	lr, r3
 800332a:	4770      	bx	lr
