
FreeRtosTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e5c  08002e5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002e5c  08002e5c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e5c  08002e5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  20000074  08002ed8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  08002ed8  000210e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d68d  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002475  00000000  00000000  0002d729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002fba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f95  00000000  00000000  000315b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efc3  00000000  00000000  0004254d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068050  00000000  00000000  00051510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9560  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032cc  00000000  00000000  000b95b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d34 	.word	0x08002d34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08002d34 	.word	0x08002d34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:

static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]

}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000009c 	.word	0x2000009c
 800024c:	20000150 	.word	0x20000150

08000250 <MX_FREERTOS_Init>:

void MX_FREERTOS_Init(void) {
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b096      	sub	sp, #88	; 0x58
 8000254:	af00      	add	r7, sp, #0

	osThreadDef(RedTask, MainTask, osPriorityNormal, 0, 128);
 8000256:	213c      	movs	r1, #60	; 0x3c
 8000258:	187b      	adds	r3, r7, r1
 800025a:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <MX_FREERTOS_Init+0x74>)
 800025c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800025e:	c331      	stmia	r3!, {r0, r4, r5}
 8000260:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000262:	c331      	stmia	r3!, {r0, r4, r5}
 8000264:	6812      	ldr	r2, [r2, #0]
 8000266:	601a      	str	r2, [r3, #0]
	RedTaskHandle = osThreadCreate(osThread(RedTask), NULL);
 8000268:	187b      	adds	r3, r7, r1
 800026a:	2100      	movs	r1, #0
 800026c:	0018      	movs	r0, r3
 800026e:	f001 fbc8 	bl	8001a02 <osThreadCreate>
 8000272:	0002      	movs	r2, r0
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <MX_FREERTOS_Init+0x78>)
 8000276:	601a      	str	r2, [r3, #0]

	/* definition and creation of GreemTask */
	osThreadDef(GreemTask, SecondTask, osPriorityNormal, 0, 128);
 8000278:	2120      	movs	r1, #32
 800027a:	187b      	adds	r3, r7, r1
 800027c:	4a13      	ldr	r2, [pc, #76]	; (80002cc <MX_FREERTOS_Init+0x7c>)
 800027e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000280:	c331      	stmia	r3!, {r0, r4, r5}
 8000282:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000284:	c331      	stmia	r3!, {r0, r4, r5}
 8000286:	6812      	ldr	r2, [r2, #0]
 8000288:	601a      	str	r2, [r3, #0]
	GreemTaskHandle = osThreadCreate(osThread(GreemTask), NULL);
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2100      	movs	r1, #0
 800028e:	0018      	movs	r0, r3
 8000290:	f001 fbb7 	bl	8001a02 <osThreadCreate>
 8000294:	0002      	movs	r2, r0
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_FREERTOS_Init+0x80>)
 8000298:	601a      	str	r2, [r3, #0]

	/* definition and creation of BlueLed */
	osThreadDef(BlueLed, ThirdTask, osPriorityNormal, 0, 128);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <MX_FREERTOS_Init+0x84>)
 800029e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002a0:	c313      	stmia	r3!, {r0, r1, r4}
 80002a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002a4:	c313      	stmia	r3!, {r0, r1, r4}
 80002a6:	6812      	ldr	r2, [r2, #0]
 80002a8:	601a      	str	r2, [r3, #0]
	BlueLedHandle = osThreadCreate(osThread(BlueLed), NULL);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 fba7 	bl	8001a02 <osThreadCreate>
 80002b4:	0002      	movs	r2, r0
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <MX_FREERTOS_Init+0x88>)
 80002b8:	601a      	str	r2, [r3, #0]

}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	b016      	add	sp, #88	; 0x58
 80002c0:	bdb0      	pop	{r4, r5, r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	08002d68 	.word	0x08002d68
 80002c8:	20000090 	.word	0x20000090
 80002cc:	08002d84 	.word	0x08002d84
 80002d0:	20000094 	.word	0x20000094
 80002d4:	08002da0 	.word	0x08002da0
 80002d8:	20000098 	.word	0x20000098

080002dc <MainTask>:

void MainTask(void const *argument) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	for (;;) {
		HAL_GPIO_TogglePin(RedLed_GPIO_Port, RedLed_Pin);
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	019b      	lsls	r3, r3, #6
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <MainTask+0x24>)
 80002ea:	0019      	movs	r1, r3
 80002ec:	0010      	movs	r0, r2
 80002ee:	f000 fc64 	bl	8000bba <HAL_GPIO_TogglePin>
		vTaskDelay(1000/portTICK_PERIOD_MS);
 80002f2:	23fa      	movs	r3, #250	; 0xfa
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 fdfc 	bl	8001ef4 <vTaskDelay>
		HAL_GPIO_TogglePin(RedLed_GPIO_Port, RedLed_Pin);
 80002fc:	e7f2      	b.n	80002e4 <MainTask+0x8>
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	48000800 	.word	0x48000800

08000304 <SecondTask>:
	}

}

void SecondTask(void const *argument) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

	for (;;) {
		HAL_GPIO_TogglePin(BlueLed_GPIO_Port, BlueLed_Pin);
 800030c:	2390      	movs	r3, #144	; 0x90
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	2102      	movs	r1, #2
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fc51 	bl	8000bba <HAL_GPIO_TogglePin>
		vTaskDelay(200/portTICK_PERIOD_MS);
 8000318:	20c8      	movs	r0, #200	; 0xc8
 800031a:	f001 fdeb 	bl	8001ef4 <vTaskDelay>
		HAL_GPIO_TogglePin(BlueLed_GPIO_Port, BlueLed_Pin);
 800031e:	e7f5      	b.n	800030c <SecondTask+0x8>

08000320 <ThirdTask>:
	}

}

void ThirdTask(void const *argument) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]

	for (;;) {
		HAL_GPIO_TogglePin(GreenLed_GPIO_Port, GreenLed_Pin);
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2101      	movs	r1, #1
 800032e:	0018      	movs	r0, r3
 8000330:	f000 fc43 	bl	8000bba <HAL_GPIO_TogglePin>
		vTaskDelay(500/portTICK_PERIOD_MS);
 8000334:	23fa      	movs	r3, #250	; 0xfa
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fddb 	bl	8001ef4 <vTaskDelay>
		HAL_GPIO_TogglePin(GreenLed_GPIO_Port, GreenLed_Pin);
 800033e:	e7f3      	b.n	8000328 <ThirdTask+0x8>

08000340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b089      	sub	sp, #36	; 0x24
 8000344:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	240c      	movs	r4, #12
 8000348:	193b      	adds	r3, r7, r4
 800034a:	0018      	movs	r0, r3
 800034c:	2314      	movs	r3, #20
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f002 fc19 	bl	8002b88 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	4b31      	ldr	r3, [pc, #196]	; (800041c <MX_GPIO_Init+0xdc>)
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	4b30      	ldr	r3, [pc, #192]	; (800041c <MX_GPIO_Init+0xdc>)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	0309      	lsls	r1, r1, #12
 8000360:	430a      	orrs	r2, r1
 8000362:	615a      	str	r2, [r3, #20]
 8000364:	4b2d      	ldr	r3, [pc, #180]	; (800041c <MX_GPIO_Init+0xdc>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	031b      	lsls	r3, r3, #12
 800036c:	4013      	ands	r3, r2
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <MX_GPIO_Init+0xdc>)
 8000374:	695a      	ldr	r2, [r3, #20]
 8000376:	4b29      	ldr	r3, [pc, #164]	; (800041c <MX_GPIO_Init+0xdc>)
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	03c9      	lsls	r1, r1, #15
 800037c:	430a      	orrs	r2, r1
 800037e:	615a      	str	r2, [r3, #20]
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <MX_GPIO_Init+0xdc>)
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	03db      	lsls	r3, r3, #15
 8000388:	4013      	ands	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b23      	ldr	r3, [pc, #140]	; (800041c <MX_GPIO_Init+0xdc>)
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	4b22      	ldr	r3, [pc, #136]	; (800041c <MX_GPIO_Init+0xdc>)
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0289      	lsls	r1, r1, #10
 8000398:	430a      	orrs	r2, r1
 800039a:	615a      	str	r2, [r3, #20]
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <MX_GPIO_Init+0xdc>)
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	029b      	lsls	r3, r3, #10
 80003a4:	4013      	ands	r3, r2
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	019b      	lsls	r3, r3, #6
 80003ae:	481c      	ldr	r0, [pc, #112]	; (8000420 <MX_GPIO_Init+0xe0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	0019      	movs	r1, r3
 80003b4:	f000 fbe4 	bl	8000b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GreenLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 80003b8:	2390      	movs	r3, #144	; 0x90
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	2200      	movs	r2, #0
 80003be:	2103      	movs	r1, #3
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 fbdd 	bl	8000b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RedLed_Pin;
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	0192      	lsls	r2, r2, #6
 80003cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2201      	movs	r2, #1
 80003d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RedLed_GPIO_Port, &GPIO_InitStruct);
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <MX_GPIO_Init+0xe0>)
 80003e4:	0019      	movs	r1, r3
 80003e6:	0010      	movs	r0, r2
 80003e8:	f000 fa5a 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GreenLed_Pin|BlueLed_Pin;
 80003ec:	0021      	movs	r1, r4
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2203      	movs	r2, #3
 80003f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2201      	movs	r2, #1
 80003f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000406:	187a      	adds	r2, r7, r1
 8000408:	2390      	movs	r3, #144	; 0x90
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fa46 	bl	80008a0 <HAL_GPIO_Init>

}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b009      	add	sp, #36	; 0x24
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	48000800 	.word	0x48000800

08000424 <main>:
#include "gpio.h"

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

	HAL_Init();
 8000428:	f000 f95c 	bl	80006e4 <HAL_Init>

	SystemClock_Config();
 800042c:	f000 f807 	bl	800043e <SystemClock_Config>

	MX_GPIO_Init();
 8000430:	f7ff ff86 	bl	8000340 <MX_GPIO_Init>

	MX_FREERTOS_Init();
 8000434:	f7ff ff0c 	bl	8000250 <MX_FREERTOS_Init>

	osKernelStart();
 8000438:	f001 fadb 	bl	80019f2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
 800043c:	e7fe      	b.n	800043c <main+0x18>

0800043e <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 800043e:	b590      	push	{r4, r7, lr}
 8000440:	b091      	sub	sp, #68	; 0x44
 8000442:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000444:	2410      	movs	r4, #16
 8000446:	193b      	adds	r3, r7, r4
 8000448:	0018      	movs	r0, r3
 800044a:	2330      	movs	r3, #48	; 0x30
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f002 fb9a 	bl	8002b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000454:	003b      	movs	r3, r7
 8000456:	0018      	movs	r0, r3
 8000458:	2310      	movs	r3, #16
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f002 fb93 	bl	8002b88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2202      	movs	r2, #2
 8000468:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2201      	movs	r2, #1
 800046e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2210      	movs	r2, #16
 8000474:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2202      	movs	r2, #2
 800047a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	22a0      	movs	r2, #160	; 0xa0
 8000486:	0392      	lsls	r2, r2, #14
 8000488:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	187b      	adds	r3, r7, r1
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fbac 	bl	8000bf0 <HAL_RCC_OscConfig>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800049c:	f000 f82c 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	003b      	movs	r3, r7
 80004a2:	2207      	movs	r2, #7
 80004a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2202      	movs	r2, #2
 80004aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b2:	003b      	movs	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b8:	003b      	movs	r3, r7
 80004ba:	2101      	movs	r1, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 feb1 	bl	8001224 <HAL_RCC_ClockConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004c6:	f000 f817 	bl	80004f8 <Error_Handler>
  }
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b011      	add	sp, #68	; 0x44
 80004d0:	bd90      	pop	{r4, r7, pc}
	...

080004d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d101      	bne.n	80004ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004e6:	f000 f911 	bl	800070c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40000400 	.word	0x40000400

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>
	...

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x50>)
 800050c:	699a      	ldr	r2, [r3, #24]
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_MspInit+0x50>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x50>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x50>)
 8000524:	69da      	ldr	r2, [r3, #28]
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_MspInit+0x50>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0549      	lsls	r1, r1, #21
 800052c:	430a      	orrs	r2, r1
 800052e:	61da      	str	r2, [r3, #28]
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_MspInit+0x50>)
 8000532:	69da      	ldr	r2, [r3, #28]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	055b      	lsls	r3, r3, #21
 8000538:	4013      	ands	r3, r2
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800053e:	2302      	movs	r3, #2
 8000540:	425b      	negs	r3, r3
 8000542:	2200      	movs	r2, #0
 8000544:	2103      	movs	r1, #3
 8000546:	0018      	movs	r0, r3
 8000548:	f000 f984 	bl	8000854 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000560:	2300      	movs	r3, #0
 8000562:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000568:	4b37      	ldr	r3, [pc, #220]	; (8000648 <HAL_InitTick+0xf0>)
 800056a:	69da      	ldr	r2, [r3, #28]
 800056c:	4b36      	ldr	r3, [pc, #216]	; (8000648 <HAL_InitTick+0xf0>)
 800056e:	2102      	movs	r1, #2
 8000570:	430a      	orrs	r2, r1
 8000572:	61da      	str	r2, [r3, #28]
 8000574:	4b34      	ldr	r3, [pc, #208]	; (8000648 <HAL_InitTick+0xf0>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	2202      	movs	r2, #2
 800057a:	4013      	ands	r3, r2
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000580:	230c      	movs	r3, #12
 8000582:	18fa      	adds	r2, r7, r3
 8000584:	2410      	movs	r4, #16
 8000586:	193b      	adds	r3, r7, r4
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 ff8e 	bl	80014ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800059c:	f000 ff70 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 80005a0:	0003      	movs	r3, r0
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005a4:	e004      	b.n	80005b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005a6:	f000 ff6b 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 80005aa:	0003      	movs	r3, r0
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b2:	4926      	ldr	r1, [pc, #152]	; (800064c <HAL_InitTick+0xf4>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff fda7 	bl	8000108 <__udivsi3>
 80005ba:	0003      	movs	r3, r0
 80005bc:	3b01      	subs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <HAL_InitTick+0xf8>)
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <HAL_InitTick+0xfc>)
 80005c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <HAL_InitTick+0xf8>)
 80005c8:	4a23      	ldr	r2, [pc, #140]	; (8000658 <HAL_InitTick+0x100>)
 80005ca:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <HAL_InitTick+0xf8>)
 80005ce:	6a3a      	ldr	r2, [r7, #32]
 80005d0:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <HAL_InitTick+0xf8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <HAL_InitTick+0xf8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <HAL_InitTick+0xf8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80005e4:	252b      	movs	r5, #43	; 0x2b
 80005e6:	197c      	adds	r4, r7, r5
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <HAL_InitTick+0xf8>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 ff88 	bl	8001500 <HAL_TIM_Base_Init>
 80005f0:	0003      	movs	r3, r0
 80005f2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80005f4:	197b      	adds	r3, r7, r5
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d11e      	bne.n	800063a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80005fc:	197c      	adds	r4, r7, r5
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_InitTick+0xf8>)
 8000600:	0018      	movs	r0, r3
 8000602:	f000 ffd5 	bl	80015b0 <HAL_TIM_Base_Start_IT>
 8000606:	0003      	movs	r3, r0
 8000608:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800060a:	197b      	adds	r3, r7, r5
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d113      	bne.n	800063a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000612:	2010      	movs	r0, #16
 8000614:	f000 f933 	bl	800087e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d809      	bhi.n	8000632 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	0019      	movs	r1, r3
 8000624:	2010      	movs	r0, #16
 8000626:	f000 f915 	bl	8000854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_InitTick+0x104>)
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	e003      	b.n	800063a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000632:	232b      	movs	r3, #43	; 0x2b
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800063a:	232b      	movs	r3, #43	; 0x2b
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	781b      	ldrb	r3, [r3, #0]
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b00c      	add	sp, #48	; 0x30
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	000f4240 	.word	0x000f4240
 8000650:	20000350 	.word	0x20000350
 8000654:	40000400 	.word	0x40000400
 8000658:	000003e7 	.word	0x000003e7
 800065c:	20000004 	.word	0x20000004

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <TIM3_IRQHandler+0x14>)
 8000672:	0018      	movs	r0, r3
 8000674:	f000 ffe8 	bl	8001648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000350 	.word	0x20000350

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000694:	f7ff fff6 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006be:	f002 fa3d 	bl	8002b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff feaf 	bl	8000424 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006d4:	08002e64 	.word	0x08002e64
  ldr r2, =_sbss
 80006d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006dc:	200010e8 	.word	0x200010e8

080006e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_IRQHandler>
	...

080006e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <HAL_Init+0x24>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_Init+0x24>)
 80006ee:	2110      	movs	r1, #16
 80006f0:	430a      	orrs	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f7ff ff2f 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fa:	f7ff ff03 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	18d2      	adds	r2, r2, r3
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <HAL_IncTick+0x20>)
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000008 	.word	0x20000008
 800072c:	20000398 	.word	0x20000398

08000730 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <HAL_GetTick+0x10>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	20000398 	.word	0x20000398

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	0002      	movs	r2, r0
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b7f      	cmp	r3, #127	; 0x7f
 8000756:	d809      	bhi.n	800076c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	001a      	movs	r2, r3
 800075e:	231f      	movs	r3, #31
 8000760:	401a      	ands	r2, r3
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_EnableIRQ+0x30>)
 8000764:	2101      	movs	r1, #1
 8000766:	4091      	lsls	r1, r2
 8000768:	000a      	movs	r2, r1
 800076a:	601a      	str	r2, [r3, #0]
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}
 8000774:	e000e100 	.word	0xe000e100

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b7f      	cmp	r3, #127	; 0x7f
 800078c:	d828      	bhi.n	80007e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <__NVIC_SetPriority+0xd4>)
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b25b      	sxtb	r3, r3
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	33c0      	adds	r3, #192	; 0xc0
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	589b      	ldr	r3, [r3, r2]
 800079e:	1dfa      	adds	r2, r7, #7
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	0011      	movs	r1, r2
 80007a4:	2203      	movs	r2, #3
 80007a6:	400a      	ands	r2, r1
 80007a8:	00d2      	lsls	r2, r2, #3
 80007aa:	21ff      	movs	r1, #255	; 0xff
 80007ac:	4091      	lsls	r1, r2
 80007ae:	000a      	movs	r2, r1
 80007b0:	43d2      	mvns	r2, r2
 80007b2:	401a      	ands	r2, r3
 80007b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	22ff      	movs	r2, #255	; 0xff
 80007bc:	401a      	ands	r2, r3
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	0018      	movs	r0, r3
 80007c4:	2303      	movs	r3, #3
 80007c6:	4003      	ands	r3, r0
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	481f      	ldr	r0, [pc, #124]	; (800084c <__NVIC_SetPriority+0xd4>)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	430a      	orrs	r2, r1
 80007d8:	33c0      	adds	r3, #192	; 0xc0
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007de:	e031      	b.n	8000844 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <__NVIC_SetPriority+0xd8>)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	0019      	movs	r1, r3
 80007e8:	230f      	movs	r3, #15
 80007ea:	400b      	ands	r3, r1
 80007ec:	3b08      	subs	r3, #8
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	3306      	adds	r3, #6
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	1dfa      	adds	r2, r7, #7
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	0011      	movs	r1, r2
 8000800:	2203      	movs	r2, #3
 8000802:	400a      	ands	r2, r1
 8000804:	00d2      	lsls	r2, r2, #3
 8000806:	21ff      	movs	r1, #255	; 0xff
 8000808:	4091      	lsls	r1, r2
 800080a:	000a      	movs	r2, r1
 800080c:	43d2      	mvns	r2, r2
 800080e:	401a      	ands	r2, r3
 8000810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	019b      	lsls	r3, r3, #6
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	401a      	ands	r2, r3
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	0018      	movs	r0, r3
 8000820:	2303      	movs	r3, #3
 8000822:	4003      	ands	r3, r0
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <__NVIC_SetPriority+0xd8>)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	001c      	movs	r4, r3
 8000830:	230f      	movs	r3, #15
 8000832:	4023      	ands	r3, r4
 8000834:	3b08      	subs	r3, #8
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	430a      	orrs	r2, r1
 800083a:	3306      	adds	r3, #6
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	18c3      	adds	r3, r0, r3
 8000840:	3304      	adds	r3, #4
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b003      	add	sp, #12
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	210f      	movs	r1, #15
 8000860:	187b      	adds	r3, r7, r1
 8000862:	1c02      	adds	r2, r0, #0
 8000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	187b      	adds	r3, r7, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff81 	bl	8000778 <__NVIC_SetPriority>
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	0002      	movs	r2, r0
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b25b      	sxtb	r3, r3
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff ff57 	bl	8000744 <__NVIC_EnableIRQ>
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	e14f      	b.n	8000b50 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2101      	movs	r1, #1
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d100      	bne.n	80008c8 <HAL_GPIO_Init+0x28>
 80008c6:	e140      	b.n	8000b4a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2203      	movs	r2, #3
 80008ce:	4013      	ands	r3, r2
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d005      	beq.n	80008e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2203      	movs	r2, #3
 80008da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d130      	bne.n	8000942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	409a      	lsls	r2, r3
 80008ee:	0013      	movs	r3, r2
 80008f0:	43da      	mvns	r2, r3
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	409a      	lsls	r2, r3
 8000902:	0013      	movs	r3, r2
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000916:	2201      	movs	r2, #1
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
 800091c:	0013      	movs	r3, r2
 800091e:	43da      	mvns	r2, r3
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	2201      	movs	r2, #1
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2203      	movs	r2, #3
 8000948:	4013      	ands	r3, r2
 800094a:	2b03      	cmp	r3, #3
 800094c:	d017      	beq.n	800097e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	409a      	lsls	r2, r3
 800095c:	0013      	movs	r3, r2
 800095e:	43da      	mvns	r2, r3
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	409a      	lsls	r2, r3
 8000970:	0013      	movs	r3, r2
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2203      	movs	r2, #3
 8000984:	4013      	ands	r3, r2
 8000986:	2b02      	cmp	r3, #2
 8000988:	d123      	bne.n	80009d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	08da      	lsrs	r2, r3, #3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3208      	adds	r2, #8
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	58d3      	ldr	r3, [r2, r3]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	2207      	movs	r2, #7
 800099c:	4013      	ands	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	220f      	movs	r2, #15
 80009a2:	409a      	lsls	r2, r3
 80009a4:	0013      	movs	r3, r2
 80009a6:	43da      	mvns	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	691a      	ldr	r2, [r3, #16]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	2107      	movs	r1, #7
 80009b6:	400b      	ands	r3, r1
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	08da      	lsrs	r2, r3, #3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3208      	adds	r2, #8
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	6939      	ldr	r1, [r7, #16]
 80009d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2203      	movs	r2, #3
 80009de:	409a      	lsls	r2, r3
 80009e0:	0013      	movs	r3, r2
 80009e2:	43da      	mvns	r2, r3
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2203      	movs	r2, #3
 80009f0:	401a      	ands	r2, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	23c0      	movs	r3, #192	; 0xc0
 8000a0c:	029b      	lsls	r3, r3, #10
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d100      	bne.n	8000a14 <HAL_GPIO_Init+0x174>
 8000a12:	e09a      	b.n	8000b4a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a14:	4b54      	ldr	r3, [pc, #336]	; (8000b68 <HAL_GPIO_Init+0x2c8>)
 8000a16:	699a      	ldr	r2, [r3, #24]
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <HAL_GPIO_Init+0x2c8>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	619a      	str	r2, [r3, #24]
 8000a20:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <HAL_GPIO_Init+0x2c8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	2201      	movs	r2, #1
 8000a26:	4013      	ands	r3, r2
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a2c:	4a4f      	ldr	r2, [pc, #316]	; (8000b6c <HAL_GPIO_Init+0x2cc>)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	589b      	ldr	r3, [r3, r2]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	4013      	ands	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	409a      	lsls	r2, r3
 8000a46:	0013      	movs	r3, r2
 8000a48:	43da      	mvns	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	2390      	movs	r3, #144	; 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0x1e2>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00d      	beq.n	8000a7e <HAL_GPIO_Init+0x1de>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a43      	ldr	r2, [pc, #268]	; (8000b74 <HAL_GPIO_Init+0x2d4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d007      	beq.n	8000a7a <HAL_GPIO_Init+0x1da>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a42      	ldr	r2, [pc, #264]	; (8000b78 <HAL_GPIO_Init+0x2d8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_GPIO_Init+0x1d6>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x1e4>
 8000a76:	2305      	movs	r3, #5
 8000a78:	e004      	b.n	8000a84 <HAL_GPIO_Init+0x1e4>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_Init+0x1e4>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x1e4>
 8000a82:	2300      	movs	r3, #0
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	2103      	movs	r1, #3
 8000a88:	400a      	ands	r2, r1
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a94:	4935      	ldr	r1, [pc, #212]	; (8000b6c <HAL_GPIO_Init+0x2cc>)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa2:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	035b      	lsls	r3, r3, #13
 8000aba:	4013      	ands	r3, r2
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43da      	mvns	r2, r3
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	039b      	lsls	r3, r3, #14
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43da      	mvns	r2, r3
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	029b      	lsls	r3, r3, #10
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	025b      	lsls	r3, r3, #9
 8000b38:	4013      	ands	r3, r2
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_GPIO_Init+0x2dc>)
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	40da      	lsrs	r2, r3
 8000b58:	1e13      	subs	r3, r2, #0
 8000b5a:	d000      	beq.n	8000b5e <HAL_GPIO_Init+0x2be>
 8000b5c:	e6a8      	b.n	80008b0 <HAL_GPIO_Init+0x10>
  } 
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b006      	add	sp, #24
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000c00 	.word	0x48000c00
 8000b7c:	40010400 	.word	0x40010400

08000b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	0008      	movs	r0, r1
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	1cbb      	adds	r3, r7, #2
 8000b8e:	1c02      	adds	r2, r0, #0
 8000b90:	801a      	strh	r2, [r3, #0]
 8000b92:	1c7b      	adds	r3, r7, #1
 8000b94:	1c0a      	adds	r2, r1, #0
 8000b96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b98:	1c7b      	adds	r3, r7, #1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d004      	beq.n	8000baa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba0:	1cbb      	adds	r3, r7, #2
 8000ba2:	881a      	ldrh	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ba8:	e003      	b.n	8000bb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000baa:	1cbb      	adds	r3, r7, #2
 8000bac:	881a      	ldrh	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	1cbb      	adds	r3, r7, #2
 8000bc6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bce:	1cbb      	adds	r3, r7, #2
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	041a      	lsls	r2, r3, #16
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	1cb9      	adds	r1, r7, #2
 8000bde:	8809      	ldrh	r1, [r1, #0]
 8000be0:	400b      	ands	r3, r1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	619a      	str	r2, [r3, #24]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b004      	add	sp, #16
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e301      	b.n	8001206 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2201      	movs	r2, #1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d100      	bne.n	8000c0e <HAL_RCC_OscConfig+0x1e>
 8000c0c:	e08d      	b.n	8000d2a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c0e:	4bc3      	ldr	r3, [pc, #780]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	220c      	movs	r2, #12
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d00e      	beq.n	8000c38 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c1a:	4bc0      	ldr	r3, [pc, #768]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	220c      	movs	r2, #12
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d116      	bne.n	8000c54 <HAL_RCC_OscConfig+0x64>
 8000c26:	4bbd      	ldr	r3, [pc, #756]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	025b      	lsls	r3, r3, #9
 8000c2e:	401a      	ands	r2, r3
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	025b      	lsls	r3, r3, #9
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d10d      	bne.n	8000c54 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c38:	4bb8      	ldr	r3, [pc, #736]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	029b      	lsls	r3, r3, #10
 8000c40:	4013      	ands	r3, r2
 8000c42:	d100      	bne.n	8000c46 <HAL_RCC_OscConfig+0x56>
 8000c44:	e070      	b.n	8000d28 <HAL_RCC_OscConfig+0x138>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d000      	beq.n	8000c50 <HAL_RCC_OscConfig+0x60>
 8000c4e:	e06b      	b.n	8000d28 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e2d8      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d107      	bne.n	8000c6c <HAL_RCC_OscConfig+0x7c>
 8000c5c:	4baf      	ldr	r3, [pc, #700]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4bae      	ldr	r3, [pc, #696]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	0249      	lsls	r1, r1, #9
 8000c66:	430a      	orrs	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e02f      	b.n	8000ccc <HAL_RCC_OscConfig+0xdc>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10c      	bne.n	8000c8e <HAL_RCC_OscConfig+0x9e>
 8000c74:	4ba9      	ldr	r3, [pc, #676]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4ba8      	ldr	r3, [pc, #672]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c7a:	49a9      	ldr	r1, [pc, #676]	; (8000f20 <HAL_RCC_OscConfig+0x330>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	4ba6      	ldr	r3, [pc, #664]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4ba5      	ldr	r3, [pc, #660]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c86:	49a7      	ldr	r1, [pc, #668]	; (8000f24 <HAL_RCC_OscConfig+0x334>)
 8000c88:	400a      	ands	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e01e      	b.n	8000ccc <HAL_RCC_OscConfig+0xdc>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	d10e      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xc4>
 8000c96:	4ba1      	ldr	r3, [pc, #644]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4ba0      	ldr	r3, [pc, #640]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	02c9      	lsls	r1, r1, #11
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	4b9d      	ldr	r3, [pc, #628]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b9c      	ldr	r3, [pc, #624]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0249      	lsls	r1, r1, #9
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	e00b      	b.n	8000ccc <HAL_RCC_OscConfig+0xdc>
 8000cb4:	4b99      	ldr	r3, [pc, #612]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b98      	ldr	r3, [pc, #608]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cba:	4999      	ldr	r1, [pc, #612]	; (8000f20 <HAL_RCC_OscConfig+0x330>)
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	4b96      	ldr	r3, [pc, #600]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b95      	ldr	r3, [pc, #596]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cc6:	4997      	ldr	r1, [pc, #604]	; (8000f24 <HAL_RCC_OscConfig+0x334>)
 8000cc8:	400a      	ands	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d014      	beq.n	8000cfe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fd2c 	bl	8000730 <HAL_GetTick>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cde:	f7ff fd27 	bl	8000730 <HAL_GetTick>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b64      	cmp	r3, #100	; 0x64
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e28a      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf0:	4b8a      	ldr	r3, [pc, #552]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d0f0      	beq.n	8000cde <HAL_RCC_OscConfig+0xee>
 8000cfc:	e015      	b.n	8000d2a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fd17 	bl	8000730 <HAL_GetTick>
 8000d02:	0003      	movs	r3, r0
 8000d04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff fd12 	bl	8000730 <HAL_GetTick>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e275      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1a:	4b80      	ldr	r3, [pc, #512]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0x118>
 8000d26:	e000      	b.n	8000d2a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4013      	ands	r3, r2
 8000d32:	d100      	bne.n	8000d36 <HAL_RCC_OscConfig+0x146>
 8000d34:	e069      	b.n	8000e0a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d36:	4b79      	ldr	r3, [pc, #484]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d00b      	beq.n	8000d58 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d40:	4b76      	ldr	r3, [pc, #472]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	220c      	movs	r2, #12
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d11c      	bne.n	8000d86 <HAL_RCC_OscConfig+0x196>
 8000d4c:	4b73      	ldr	r3, [pc, #460]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	4013      	ands	r3, r2
 8000d56:	d116      	bne.n	8000d86 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d58:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d005      	beq.n	8000d6e <HAL_RCC_OscConfig+0x17e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d001      	beq.n	8000d6e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e24b      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6e:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	22f8      	movs	r2, #248	; 0xf8
 8000d74:	4393      	bics	r3, r2
 8000d76:	0019      	movs	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	00da      	lsls	r2, r3, #3
 8000d7e:	4b67      	ldr	r3, [pc, #412]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d84:	e041      	b.n	8000e0a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d024      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8e:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fcc9 	bl	8000730 <HAL_GetTick>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fcc4 	bl	8000730 <HAL_GetTick>
 8000da8:	0002      	movs	r2, r0
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e227      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db6:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d0f1      	beq.n	8000da4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	22f8      	movs	r2, #248	; 0xf8
 8000dc6:	4393      	bics	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	00da      	lsls	r2, r3, #3
 8000dd0:	4b52      	ldr	r3, [pc, #328]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e018      	b.n	8000e0a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd8:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b4f      	ldr	r3, [pc, #316]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	438a      	bics	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fca4 	bl	8000730 <HAL_GetTick>
 8000de8:	0003      	movs	r3, r0
 8000dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dee:	f7ff fc9f 	bl	8000730 <HAL_GetTick>
 8000df2:	0002      	movs	r2, r0
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e202      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e00:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2202      	movs	r2, #2
 8000e06:	4013      	ands	r3, r2
 8000e08:	d1f1      	bne.n	8000dee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2208      	movs	r2, #8
 8000e10:	4013      	ands	r3, r2
 8000e12:	d036      	beq.n	8000e82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d019      	beq.n	8000e50 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1c:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e20:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e28:	f7ff fc82 	bl	8000730 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc7d 	bl	8000730 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e1e0      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e44:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d0f1      	beq.n	8000e32 <HAL_RCC_OscConfig+0x242>
 8000e4e:	e018      	b.n	8000e82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	438a      	bics	r2, r1
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc68 	bl	8000730 <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc63 	bl	8000730 <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1c6      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d1f1      	bne.n	8000e66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2204      	movs	r2, #4
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <HAL_RCC_OscConfig+0x29e>
 8000e8c:	e0b4      	b.n	8000ff8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8e:	201f      	movs	r0, #31
 8000e90:	183b      	adds	r3, r7, r0
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e98:	69da      	ldr	r2, [r3, #28]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	055b      	lsls	r3, r3, #21
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d110      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	69da      	ldr	r2, [r3, #28]
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0549      	lsls	r1, r1, #21
 8000eac:	430a      	orrs	r2, r1
 8000eae:	61da      	str	r2, [r3, #28]
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	69da      	ldr	r2, [r3, #28]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	055b      	lsls	r3, r3, #21
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ebe:	183b      	adds	r3, r7, r0
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d11a      	bne.n	8000f06 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	0049      	lsls	r1, r1, #1
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fc27 	bl	8000730 <HAL_GetTick>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee8:	f7ff fc22 	bl	8000730 <HAL_GetTick>
 8000eec:	0002      	movs	r2, r0
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e185      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d10e      	bne.n	8000f2c <HAL_RCC_OscConfig+0x33c>
 8000f0e:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	621a      	str	r2, [r3, #32]
 8000f1a:	e035      	b.n	8000f88 <HAL_RCC_OscConfig+0x398>
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	fffeffff 	.word	0xfffeffff
 8000f24:	fffbffff 	.word	0xfffbffff
 8000f28:	40007000 	.word	0x40007000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x35e>
 8000f34:	4bb6      	ldr	r3, [pc, #728]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f36:	6a1a      	ldr	r2, [r3, #32]
 8000f38:	4bb5      	ldr	r3, [pc, #724]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	621a      	str	r2, [r3, #32]
 8000f40:	4bb3      	ldr	r3, [pc, #716]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	4bb2      	ldr	r3, [pc, #712]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f46:	2104      	movs	r1, #4
 8000f48:	438a      	bics	r2, r1
 8000f4a:	621a      	str	r2, [r3, #32]
 8000f4c:	e01c      	b.n	8000f88 <HAL_RCC_OscConfig+0x398>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x380>
 8000f56:	4bae      	ldr	r3, [pc, #696]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f58:	6a1a      	ldr	r2, [r3, #32]
 8000f5a:	4bad      	ldr	r3, [pc, #692]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	621a      	str	r2, [r3, #32]
 8000f62:	4bab      	ldr	r3, [pc, #684]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f64:	6a1a      	ldr	r2, [r3, #32]
 8000f66:	4baa      	ldr	r3, [pc, #680]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	621a      	str	r2, [r3, #32]
 8000f6e:	e00b      	b.n	8000f88 <HAL_RCC_OscConfig+0x398>
 8000f70:	4ba7      	ldr	r3, [pc, #668]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	4ba6      	ldr	r3, [pc, #664]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	438a      	bics	r2, r1
 8000f7a:	621a      	str	r2, [r3, #32]
 8000f7c:	4ba4      	ldr	r3, [pc, #656]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
 8000f80:	4ba3      	ldr	r3, [pc, #652]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f82:	2104      	movs	r1, #4
 8000f84:	438a      	bics	r2, r1
 8000f86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d014      	beq.n	8000fba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fbce 	bl	8000730 <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f98:	e009      	b.n	8000fae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fbc9 	bl	8000730 <HAL_GetTick>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	4a9b      	ldr	r2, [pc, #620]	; (8001214 <HAL_RCC_OscConfig+0x624>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e12b      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fae:	4b98      	ldr	r3, [pc, #608]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x3aa>
 8000fb8:	e013      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fbb9 	bl	8000730 <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc2:	e009      	b.n	8000fd8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fbb4 	bl	8000730 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	4a91      	ldr	r2, [pc, #580]	; (8001214 <HAL_RCC_OscConfig+0x624>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e116      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd8:	4b8d      	ldr	r3, [pc, #564]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d105      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fec:	4b88      	ldr	r3, [pc, #544]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000fee:	69da      	ldr	r2, [r3, #28]
 8000ff0:	4b87      	ldr	r3, [pc, #540]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000ff2:	4989      	ldr	r1, [pc, #548]	; (8001218 <HAL_RCC_OscConfig+0x628>)
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	4013      	ands	r3, r2
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d12a      	bne.n	8001060 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800100c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100e:	4b80      	ldr	r3, [pc, #512]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001010:	2104      	movs	r1, #4
 8001012:	430a      	orrs	r2, r1
 8001014:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001016:	4b7e      	ldr	r3, [pc, #504]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101a:	4b7d      	ldr	r3, [pc, #500]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff fb85 	bl	8000730 <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800102c:	f7ff fb80 	bl	8000730 <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e0e3      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800103e:	4b74      	ldr	r3, [pc, #464]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d0f1      	beq.n	800102c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001048:	4b71      	ldr	r3, [pc, #452]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800104a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104c:	22f8      	movs	r2, #248	; 0xf8
 800104e:	4393      	bics	r3, r2
 8001050:	0019      	movs	r1, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	00da      	lsls	r2, r3, #3
 8001058:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
 800105e:	e034      	b.n	80010ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	3305      	adds	r3, #5
 8001066:	d111      	bne.n	800108c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800106a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800106e:	2104      	movs	r1, #4
 8001070:	438a      	bics	r2, r1
 8001072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001074:	4b66      	ldr	r3, [pc, #408]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001078:	22f8      	movs	r2, #248	; 0xf8
 800107a:	4393      	bics	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	4b62      	ldr	r3, [pc, #392]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001086:	430a      	orrs	r2, r1
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
 800108a:	e01e      	b.n	80010ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800108c:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800108e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001090:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001092:	2104      	movs	r1, #4
 8001094:	430a      	orrs	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001098:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800109a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109c:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800109e:	2101      	movs	r1, #1
 80010a0:	438a      	bics	r2, r1
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fb44 	bl	8000730 <HAL_GetTick>
 80010a8:	0003      	movs	r3, r0
 80010aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ae:	f7ff fb3f 	bl	8000730 <HAL_GetTick>
 80010b2:	0002      	movs	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e0a2      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010c0:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c4:	2202      	movs	r2, #2
 80010c6:	4013      	ands	r3, r2
 80010c8:	d1f1      	bne.n	80010ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d100      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4e4>
 80010d2:	e097      	b.n	8001204 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d4:	4b4e      	ldr	r3, [pc, #312]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	220c      	movs	r2, #12
 80010da:	4013      	ands	r3, r2
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d100      	bne.n	80010e2 <HAL_RCC_OscConfig+0x4f2>
 80010e0:	e06b      	b.n	80011ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d14c      	bne.n	8001184 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010f0:	494a      	ldr	r1, [pc, #296]	; (800121c <HAL_RCC_OscConfig+0x62c>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb1b 	bl	8000730 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff fb16 	bl	8000730 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e079      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	049b      	lsls	r3, r3, #18
 800111a:	4013      	ands	r3, r2
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800111e:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	220f      	movs	r2, #15
 8001124:	4393      	bics	r3, r2
 8001126:	0019      	movs	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800112e:	430a      	orrs	r2, r1
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a3a      	ldr	r2, [pc, #232]	; (8001220 <HAL_RCC_OscConfig+0x630>)
 8001138:	4013      	ands	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	431a      	orrs	r2, r3
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001148:	430a      	orrs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0449      	lsls	r1, r1, #17
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fae9 	bl	8000730 <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fae4 	bl	8000730 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e047      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	049b      	lsls	r3, r3, #18
 800117e:	4013      	ands	r3, r2
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x574>
 8001182:	e03f      	b.n	8001204 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800118a:	4924      	ldr	r1, [pc, #144]	; (800121c <HAL_RCC_OscConfig+0x62c>)
 800118c:	400a      	ands	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff face 	bl	8000730 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fac9 	bl	8000730 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e02c      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	049b      	lsls	r3, r3, #18
 80011b4:	4013      	ands	r3, r2
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x5aa>
 80011b8:	e024      	b.n	8001204 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e01f      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	025b      	lsls	r3, r3, #9
 80011d8:	401a      	ands	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	429a      	cmp	r2, r3
 80011e0:	d10e      	bne.n	8001200 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	220f      	movs	r2, #15
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d107      	bne.n	8001200 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	23f0      	movs	r3, #240	; 0xf0
 80011f4:	039b      	lsls	r3, r3, #14
 80011f6:	401a      	ands	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b008      	add	sp, #32
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40021000 	.word	0x40021000
 8001214:	00001388 	.word	0x00001388
 8001218:	efffffff 	.word	0xefffffff
 800121c:	feffffff 	.word	0xfeffffff
 8001220:	ffc2ffff 	.word	0xffc2ffff

08001224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0b3      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001238:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	4013      	ands	r3, r2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d911      	bls.n	800126a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	4393      	bics	r3, r2
 800124e:	0019      	movs	r1, r3
 8001250:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d001      	beq.n	800126a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e09a      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2202      	movs	r2, #2
 8001270:	4013      	ands	r3, r2
 8001272:	d015      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2204      	movs	r2, #4
 800127a:	4013      	ands	r3, r2
 800127c:	d006      	beq.n	800128c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800127e:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001284:	21e0      	movs	r1, #224	; 0xe0
 8001286:	00c9      	lsls	r1, r1, #3
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128c:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	22f0      	movs	r2, #240	; 0xf0
 8001292:	4393      	bics	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800129c:	430a      	orrs	r2, r1
 800129e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	d040      	beq.n	800132c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	029b      	lsls	r3, r3, #10
 80012ba:	4013      	ands	r3, r2
 80012bc:	d114      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e06e      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	049b      	lsls	r3, r3, #18
 80012d2:	4013      	ands	r3, r2
 80012d4:	d108      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e062      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e05b      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4393      	bics	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fa18 	bl	8000730 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001304:	e009      	b.n	800131a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001306:	f7ff fa13 	bl	8000730 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <HAL_RCC_ClockConfig+0x18c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e042      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	220c      	movs	r2, #12
 8001320:	401a      	ands	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1ec      	bne.n	8001306 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d211      	bcs.n	800135e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4393      	bics	r3, r2
 8001342:	0019      	movs	r1, r3
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2201      	movs	r2, #1
 8001352:	4013      	ands	r3, r2
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d001      	beq.n	800135e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e020      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2204      	movs	r2, #4
 8001364:	4013      	ands	r3, r2
 8001366:	d009      	beq.n	800137c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_RCC_ClockConfig+0x190>)
 800136e:	4013      	ands	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800137c:	f000 f820 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 8001380:	0001      	movs	r1, r0
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_RCC_ClockConfig+0x194>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	000a      	movs	r2, r1
 8001392:	40da      	lsrs	r2, r3
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_ClockConfig+0x198>)
 8001396:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff f8dd 	bl	8000558 <HAL_InitTick>
  
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b004      	add	sp, #16
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	00001388 	.word	0x00001388
 80013b4:	fffff8ff 	.word	0xfffff8ff
 80013b8:	08002dc4 	.word	0x08002dc4
 80013bc:	20000000 	.word	0x20000000

080013c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	220c      	movs	r2, #12
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d002      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d003      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ee:	e02c      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f2:	613b      	str	r3, [r7, #16]
      break;
 80013f4:	e02c      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	220f      	movs	r2, #15
 80013fc:	4013      	ands	r3, r2
 80013fe:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	220f      	movs	r2, #15
 800140a:	4013      	ands	r3, r2
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_RCC_GetSysClockFreq+0xa8>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	4013      	ands	r3, r2
 800141a:	d009      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001420:	f7fe fe72 	bl	8000108 <__udivsi3>
 8001424:	0003      	movs	r3, r0
 8001426:	001a      	movs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4353      	muls	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	000a      	movs	r2, r1
 8001434:	0152      	lsls	r2, r2, #5
 8001436:	1a52      	subs	r2, r2, r1
 8001438:	0193      	lsls	r3, r2, #6
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	185b      	adds	r3, r3, r1
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
      break;
 8001448:	e002      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800144c:	613b      	str	r3, [r7, #16]
      break;
 800144e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001450:	693b      	ldr	r3, [r7, #16]
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b006      	add	sp, #24
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	08002ddc 	.word	0x08002ddc
 8001468:	08002dec 	.word	0x08002dec

0800146c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_RCC_GetHCLKFreq+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001484:	f7ff fff2 	bl	800146c <HAL_RCC_GetHCLKFreq>
 8001488:	0001      	movs	r1, r0
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	2207      	movs	r2, #7
 8001492:	4013      	ands	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	40d9      	lsrs	r1, r3
 800149a:	000b      	movs	r3, r1
}    
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08002dd4 	.word	0x08002dd4

080014ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_RCC_GetClockConfig+0x4c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	401a      	ands	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_GetClockConfig+0x4c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	22f0      	movs	r2, #240	; 0xf0
 80014ce:	401a      	ands	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_RCC_GetClockConfig+0x4c>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	23e0      	movs	r3, #224	; 0xe0
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	401a      	ands	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_RCC_GetClockConfig+0x50>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	401a      	ands	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e042      	b.n	8001598 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	223d      	movs	r2, #61	; 0x3d
 8001516:	5c9b      	ldrb	r3, [r3, r2]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	223c      	movs	r2, #60	; 0x3c
 8001522:	2100      	movs	r1, #0
 8001524:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f000 f839 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	223d      	movs	r2, #61	; 0x3d
 8001532:	2102      	movs	r1, #2
 8001534:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3304      	adds	r3, #4
 800153e:	0019      	movs	r1, r3
 8001540:	0010      	movs	r0, r2
 8001542:	f000 f9b7 	bl	80018b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2246      	movs	r2, #70	; 0x46
 800154a:	2101      	movs	r1, #1
 800154c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	223e      	movs	r2, #62	; 0x3e
 8001552:	2101      	movs	r1, #1
 8001554:	5499      	strb	r1, [r3, r2]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	2101      	movs	r1, #1
 800155c:	5499      	strb	r1, [r3, r2]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2240      	movs	r2, #64	; 0x40
 8001562:	2101      	movs	r1, #1
 8001564:	5499      	strb	r1, [r3, r2]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2241      	movs	r2, #65	; 0x41
 800156a:	2101      	movs	r1, #1
 800156c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2242      	movs	r2, #66	; 0x42
 8001572:	2101      	movs	r1, #1
 8001574:	5499      	strb	r1, [r3, r2]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2243      	movs	r2, #67	; 0x43
 800157a:	2101      	movs	r1, #1
 800157c:	5499      	strb	r1, [r3, r2]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2244      	movs	r2, #68	; 0x44
 8001582:	2101      	movs	r1, #1
 8001584:	5499      	strb	r1, [r3, r2]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2245      	movs	r2, #69	; 0x45
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	223d      	movs	r2, #61	; 0x3d
 8001592:	2101      	movs	r1, #1
 8001594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	223d      	movs	r2, #61	; 0x3d
 80015bc:	5c9b      	ldrb	r3, [r3, r2]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d001      	beq.n	80015c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e035      	b.n	8001634 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	223d      	movs	r2, #61	; 0x3d
 80015cc:	2102      	movs	r1, #2
 80015ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a15      	ldr	r2, [pc, #84]	; (800163c <HAL_TIM_Base_Start_IT+0x8c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d009      	beq.n	80015fe <HAL_TIM_Base_Start_IT+0x4e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_TIM_Base_Start_IT+0x90>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d004      	beq.n	80015fe <HAL_TIM_Base_Start_IT+0x4e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_TIM_Base_Start_IT+0x94>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d111      	bne.n	8001622 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2207      	movs	r2, #7
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d010      	beq.n	8001632 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2101      	movs	r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001620:	e007      	b.n	8001632 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40012c00 	.word	0x40012c00
 8001640:	40000400 	.word	0x40000400
 8001644:	40014000 	.word	0x40014000

08001648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	2b02      	cmp	r3, #2
 800165c:	d124      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d11d      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2203      	movs	r2, #3
 8001672:	4252      	negs	r2, r2
 8001674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2203      	movs	r2, #3
 8001684:	4013      	ands	r3, r2
 8001686:	d004      	beq.n	8001692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	0018      	movs	r0, r3
 800168c:	f000 f8fa 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 8001690:	e007      	b.n	80016a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f000 f8ed 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0018      	movs	r0, r3
 800169e:	f000 f8f9 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2204      	movs	r2, #4
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d125      	bne.n	8001702 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2204      	movs	r2, #4
 80016be:	4013      	ands	r3, r2
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d11e      	bne.n	8001702 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2205      	movs	r2, #5
 80016ca:	4252      	negs	r2, r2
 80016cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2202      	movs	r2, #2
 80016d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	23c0      	movs	r3, #192	; 0xc0
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d004      	beq.n	80016ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f8cd 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 80016ea:	e007      	b.n	80016fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 f8c0 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 f8cc 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2208      	movs	r2, #8
 800170a:	4013      	ands	r3, r2
 800170c:	2b08      	cmp	r3, #8
 800170e:	d124      	bne.n	800175a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2208      	movs	r2, #8
 8001718:	4013      	ands	r3, r2
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11d      	bne.n	800175a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2209      	movs	r2, #9
 8001724:	4252      	negs	r2, r2
 8001726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2204      	movs	r2, #4
 800172c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	2203      	movs	r2, #3
 8001736:	4013      	ands	r3, r2
 8001738:	d004      	beq.n	8001744 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0018      	movs	r0, r3
 800173e:	f000 f8a1 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 8001742:	e007      	b.n	8001754 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f894 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	0018      	movs	r0, r3
 8001750:	f000 f8a0 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2210      	movs	r2, #16
 8001762:	4013      	ands	r3, r2
 8001764:	2b10      	cmp	r3, #16
 8001766:	d125      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2210      	movs	r2, #16
 8001770:	4013      	ands	r3, r2
 8001772:	2b10      	cmp	r3, #16
 8001774:	d11e      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2211      	movs	r2, #17
 800177c:	4252      	negs	r2, r2
 800177e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2208      	movs	r2, #8
 8001784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	23c0      	movs	r3, #192	; 0xc0
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d004      	beq.n	800179e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	0018      	movs	r0, r3
 8001798:	f000 f874 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 800179c:	e007      	b.n	80017ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f000 f867 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 f873 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10f      	bne.n	80017e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d108      	bne.n	80017e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2202      	movs	r2, #2
 80017d6:	4252      	negs	r2, r2
 80017d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f7fe fe79 	bl	80004d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b80      	cmp	r3, #128	; 0x80
 80017ee:	d10f      	bne.n	8001810 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b80      	cmp	r3, #128	; 0x80
 80017fc:	d108      	bne.n	8001810 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2281      	movs	r2, #129	; 0x81
 8001804:	4252      	negs	r2, r2
 8001806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f8d0 	bl	80019b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	4013      	ands	r3, r2
 800181a:	2b40      	cmp	r3, #64	; 0x40
 800181c:	d10f      	bne.n	800183e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2240      	movs	r2, #64	; 0x40
 8001826:	4013      	ands	r3, r2
 8001828:	2b40      	cmp	r3, #64	; 0x40
 800182a:	d108      	bne.n	800183e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2241      	movs	r2, #65	; 0x41
 8001832:	4252      	negs	r2, r2
 8001834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	0018      	movs	r0, r3
 800183a:	f000 f833 	bl	80018a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2220      	movs	r2, #32
 8001846:	4013      	ands	r3, r2
 8001848:	2b20      	cmp	r3, #32
 800184a:	d10f      	bne.n	800186c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2220      	movs	r2, #32
 8001854:	4013      	ands	r3, r2
 8001856:	2b20      	cmp	r3, #32
 8001858:	d108      	bne.n	800186c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2221      	movs	r2, #33	; 0x21
 8001860:	4252      	negs	r2, r2
 8001862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	0018      	movs	r0, r3
 8001868:	f000 f89a 	bl	80019a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <TIM_Base_SetConfig+0xd0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d003      	beq.n	80018d4 <TIM_Base_SetConfig+0x20>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <TIM_Base_SetConfig+0xd4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d108      	bne.n	80018e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2270      	movs	r2, #112	; 0x70
 80018d8:	4393      	bics	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <TIM_Base_SetConfig+0xd0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a25      	ldr	r2, [pc, #148]	; (8001988 <TIM_Base_SetConfig+0xd4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00f      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <TIM_Base_SetConfig+0xd8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00b      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <TIM_Base_SetConfig+0xdc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a22      	ldr	r2, [pc, #136]	; (8001994 <TIM_Base_SetConfig+0xe0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d003      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <TIM_Base_SetConfig+0xe4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d108      	bne.n	8001928 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <TIM_Base_SetConfig+0xe8>)
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	4393      	bics	r3, r2
 800192e:	001a      	movs	r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <TIM_Base_SetConfig+0xd0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00b      	beq.n	800196e <TIM_Base_SetConfig+0xba>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <TIM_Base_SetConfig+0xdc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <TIM_Base_SetConfig+0xba>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <TIM_Base_SetConfig+0xe0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d003      	beq.n	800196e <TIM_Base_SetConfig+0xba>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <TIM_Base_SetConfig+0xe4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d103      	bne.n	8001976 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	615a      	str	r2, [r3, #20]
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40000400 	.word	0x40000400
 800198c:	40002000 	.word	0x40002000
 8001990:	40014000 	.word	0x40014000
 8001994:	40014400 	.word	0x40014400
 8001998:	40014800 	.word	0x40014800
 800199c:	fffffcff 	.word	0xfffffcff

080019a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	0002      	movs	r2, r0
 80019c8:	1dbb      	adds	r3, r7, #6
 80019ca:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019d0:	1dbb      	adds	r3, r7, #6
 80019d2:	2200      	movs	r2, #0
 80019d4:	5e9b      	ldrsh	r3, [r3, r2]
 80019d6:	2b84      	cmp	r3, #132	; 0x84
 80019d8:	d006      	beq.n	80019e8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80019da:	1dbb      	adds	r3, r7, #6
 80019dc:	2200      	movs	r2, #0
 80019de:	5e9a      	ldrsh	r2, [r3, r2]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	3303      	adds	r3, #3
 80019e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019f6:	f000 faa3 	bl	8001f40 <vTaskStartScheduler>
  
  return osOK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a04:	b089      	sub	sp, #36	; 0x24
 8001a06:	af04      	add	r7, sp, #16
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <osThreadCreate+0x54>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01c      	beq.n	8001a56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685c      	ldr	r4, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681d      	ldr	r5, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691e      	ldr	r6, [r3, #16]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7ff ffc6 	bl	80019c0 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	9000      	str	r0, [sp, #0]
 8001a44:	000b      	movs	r3, r1
 8001a46:	0032      	movs	r2, r6
 8001a48:	0029      	movs	r1, r5
 8001a4a:	0020      	movs	r0, r4
 8001a4c:	f000 f8cf 	bl	8001bee <xTaskCreateStatic>
 8001a50:	0003      	movs	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e01d      	b.n	8001a92 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685c      	ldr	r4, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a62:	b29e      	uxth	r6, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2208      	movs	r2, #8
 8001a68:	5e9b      	ldrsh	r3, [r3, r2]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff ffa8 	bl	80019c0 <makeFreeRtosPriority>
 8001a70:	0001      	movs	r1, r0
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	230c      	movs	r3, #12
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	9100      	str	r1, [sp, #0]
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	0032      	movs	r2, r6
 8001a80:	0029      	movs	r1, r5
 8001a82:	0020      	movs	r0, r4
 8001a84:	f000 f8f6 	bl	8001c74 <xTaskCreate>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d001      	beq.n	8001a92 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b005      	add	sp, #20
 8001a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4252      	negs	r2, r2
 8001ab4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3308      	adds	r3, #8
 8001aba:	001a      	movs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b002      	add	sp, #8
 8001aec:	bd80      	pop	{r7, pc}

08001aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	d103      	bne.n	8001b50 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e00c      	b.n	8001b6a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3308      	adds	r3, #8
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	e002      	b.n	8001b5e <vListInsert+0x2c>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d2f6      	bcs.n	8001b58 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b004      	add	sp, #16
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6892      	ldr	r2, [r2, #8]
 8001bb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6852      	ldr	r2, [r2, #4]
 8001bbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d103      	bne.n	8001bd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b004      	add	sp, #16
 8001bec:	bd80      	pop	{r7, pc}

08001bee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b08d      	sub	sp, #52	; 0x34
 8001bf2:	af04      	add	r7, sp, #16
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <xTaskCreateStatic+0x18>
 8001c02:	b672      	cpsid	i
 8001c04:	e7fe      	b.n	8001c04 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8001c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <xTaskCreateStatic+0x22>
 8001c0c:	b672      	cpsid	i
 8001c0e:	e7fe      	b.n	8001c0e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c10:	23b4      	movs	r3, #180	; 0xb4
 8001c12:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2bb4      	cmp	r3, #180	; 0xb4
 8001c18:	d001      	beq.n	8001c1e <xTaskCreateStatic+0x30>
 8001c1a:	b672      	cpsid	i
 8001c1c:	e7fe      	b.n	8001c1c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <xTaskCreateStatic+0x78>
 8001c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01d      	beq.n	8001c66 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	22b1      	movs	r2, #177	; 0xb1
 8001c38:	2102      	movs	r1, #2
 8001c3a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001c3c:	683c      	ldr	r4, [r7, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9303      	str	r3, [sp, #12]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2318      	movs	r3, #24
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	0023      	movs	r3, r4
 8001c58:	f000 f858 	bl	8001d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f8e4 	bl	8001e2c <prvAddNewTaskToReadyList>
 8001c64:	e001      	b.n	8001c6a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
	}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b009      	add	sp, #36	; 0x24
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b08d      	sub	sp, #52	; 0x34
 8001c78:	af04      	add	r7, sp, #16
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	1dbb      	adds	r3, r7, #6
 8001c82:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c84:	1dbb      	adds	r3, r7, #6
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 fdb0 	bl	80027f0 <pvPortMalloc>
 8001c90:	0003      	movs	r3, r0
 8001c92:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c9a:	20b4      	movs	r0, #180	; 0xb4
 8001c9c:	f000 fda8 	bl	80027f0 <pvPortMalloc>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb0:	e006      	b.n	8001cc0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 fe41 	bl	800293c <vPortFree>
 8001cba:	e001      	b.n	8001cc0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01a      	beq.n	8001cfc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	22b1      	movs	r2, #177	; 0xb1
 8001cca:	2100      	movs	r1, #0
 8001ccc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001cce:	1dbb      	adds	r3, r7, #6
 8001cd0:	881a      	ldrh	r2, [r3, #0]
 8001cd2:	683c      	ldr	r4, [r7, #0]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	0023      	movs	r3, r4
 8001cea:	f000 f80f 	bl	8001d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 f89b 	bl	8001e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	e002      	b.n	8001d02 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	425b      	negs	r3, r3
 8001d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d02:	69bb      	ldr	r3, [r7, #24]
	}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b009      	add	sp, #36	; 0x24
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	493e      	ldr	r1, [pc, #248]	; (8001e1c <prvInitialiseNewTask+0x110>)
 8001d22:	468c      	mov	ip, r1
 8001d24:	4463      	add	r3, ip
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4393      	bics	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2207      	movs	r2, #7
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d001      	beq.n	8001d40 <prvInitialiseNewTask+0x34>
 8001d3c:	b672      	cpsid	i
 8001d3e:	e7fe      	b.n	8001d3e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e013      	b.n	8001d6e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	18d3      	adds	r3, r2, r3
 8001d4c:	7818      	ldrb	r0, [r3, #0]
 8001d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d50:	2134      	movs	r1, #52	; 0x34
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	18d3      	adds	r3, r2, r3
 8001d56:	185b      	adds	r3, r3, r1
 8001d58:	1c02      	adds	r2, r0, #0
 8001d5a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d9e8      	bls.n	8001d46 <prvInitialiseNewTask+0x3a>
 8001d74:	e000      	b.n	8001d78 <prvInitialiseNewTask+0x6c>
		{
			break;
 8001d76:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	2243      	movs	r2, #67	; 0x43
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d901      	bls.n	8001d8a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d86:	2306      	movs	r3, #6
 8001d88:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	6a3a      	ldr	r2, [r7, #32]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	3304      	adds	r3, #4
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fe99 	bl	8001ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	3318      	adds	r3, #24
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff fe94 	bl	8001ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001db4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	2207      	movs	r2, #7
 8001dba:	1ad2      	subs	r2, r2, r3
 8001dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	22ac      	movs	r2, #172	; 0xac
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	22b0      	movs	r2, #176	; 0xb0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	334c      	adds	r3, #76	; 0x4c
 8001dda:	2260      	movs	r2, #96	; 0x60
 8001ddc:	2100      	movs	r1, #0
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 fed2 	bl	8002b88 <memset>
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <prvInitialiseNewTask+0x114>)
 8001de8:	651a      	str	r2, [r3, #80]	; 0x50
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <prvInitialiseNewTask+0x118>)
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <prvInitialiseNewTask+0x11c>)
 8001df4:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fbc5 	bl	800258c <pxPortInitialiseStack>
 8001e02:	0002      	movs	r2, r0
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b006      	add	sp, #24
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	3fffffff 	.word	0x3fffffff
 8001e20:	08002e1c 	.word	0x08002e1c
 8001e24:	08002e3c 	.word	0x08002e3c
 8001e28:	08002dfc 	.word	0x08002dfc

08001e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e34:	f000 fc44 	bl	80026c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <prvAddNewTaskToReadyList+0xb0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <prvAddNewTaskToReadyList+0xb0>)
 8001e40:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <prvAddNewTaskToReadyList+0xb4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <prvAddNewTaskToReadyList+0xb4>)
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <prvAddNewTaskToReadyList+0xb0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d110      	bne.n	8001e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001e58:	f000 fa80 	bl	800235c <prvInitialiseTaskLists>
 8001e5c:	e00d      	b.n	8001e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <prvAddNewTaskToReadyList+0xb8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <prvAddNewTaskToReadyList+0xb4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d802      	bhi.n	8001e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <prvAddNewTaskToReadyList+0xb4>)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <prvAddNewTaskToReadyList+0xbc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <prvAddNewTaskToReadyList+0xbc>)
 8001e82:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <prvAddNewTaskToReadyList+0xc0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d903      	bls.n	8001e98 <prvAddNewTaskToReadyList+0x6c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <prvAddNewTaskToReadyList+0xc0>)
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	189b      	adds	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <prvAddNewTaskToReadyList+0xc4>)
 8001ea6:	189a      	adds	r2, r3, r2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	0019      	movs	r1, r3
 8001eae:	0010      	movs	r0, r2
 8001eb0:	f7ff fe1d 	bl	8001aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001eb4:	f000 fc16 	bl	80026e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <prvAddNewTaskToReadyList+0xb8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <prvAddNewTaskToReadyList+0xb4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d201      	bcs.n	8001ed2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ece:	f000 fbe7 	bl	80026a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	2000049c 	.word	0x2000049c
 8001ee0:	2000039c 	.word	0x2000039c
 8001ee4:	200004a8 	.word	0x200004a8
 8001ee8:	200004b8 	.word	0x200004b8
 8001eec:	200004a4 	.word	0x200004a4
 8001ef0:	200003a0 	.word	0x200003a0

08001ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <vTaskDelay+0x48>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <vTaskDelay+0x1e>
 8001f0e:	b672      	cpsid	i
 8001f10:	e7fe      	b.n	8001f10 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8001f12:	f000 f86d 	bl	8001ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2100      	movs	r1, #0
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fae2 	bl	80024e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001f20:	f000 f872 	bl	8002008 <xTaskResumeAll>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8001f2e:	f000 fbb7 	bl	80026a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	200004c4 	.word	0x200004c4

08001f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001f4e:	003a      	movs	r2, r7
 8001f50:	1d39      	adds	r1, r7, #4
 8001f52:	2308      	movs	r3, #8
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7fe f962 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001f5c:	683c      	ldr	r4, [r7, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	491b      	ldr	r1, [pc, #108]	; (8001fd0 <vTaskStartScheduler+0x90>)
 8001f64:	481b      	ldr	r0, [pc, #108]	; (8001fd4 <vTaskStartScheduler+0x94>)
 8001f66:	9202      	str	r2, [sp, #8]
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	0022      	movs	r2, r4
 8001f72:	f7ff fe3c 	bl	8001bee <xTaskCreateStatic>
 8001f76:	0002      	movs	r2, r0
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <vTaskStartScheduler+0x98>)
 8001f7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <vTaskStartScheduler+0x98>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001f84:	2301      	movs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e001      	b.n	8001f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d113      	bne.n	8001fbc <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001f94:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <vTaskStartScheduler+0x9c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	334c      	adds	r3, #76	; 0x4c
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <vTaskStartScheduler+0xa0>)
 8001fa0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <vTaskStartScheduler+0xa4>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <vTaskStartScheduler+0xa8>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <vTaskStartScheduler+0xac>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001fb6:	f000 fb4f 	bl	8002658 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001fba:	e004      	b.n	8001fc6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <vTaskStartScheduler+0x86>
 8001fc2:	b672      	cpsid	i
 8001fc4:	e7fe      	b.n	8001fc4 <vTaskStartScheduler+0x84>
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b005      	add	sp, #20
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	08002dbc 	.word	0x08002dbc
 8001fd4:	0800233d 	.word	0x0800233d
 8001fd8:	200004c0 	.word	0x200004c0
 8001fdc:	2000039c 	.word	0x2000039c
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	200004bc 	.word	0x200004bc
 8001fe8:	200004a8 	.word	0x200004a8
 8001fec:	200004a0 	.word	0x200004a0

08001ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <vTaskSuspendAll+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	4b02      	ldr	r3, [pc, #8]	; (8002004 <vTaskSuspendAll+0x14>)
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200004c4 	.word	0x200004c4

08002008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002016:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <xTaskResumeAll+0xf8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <xTaskResumeAll+0x1a>
 800201e:	b672      	cpsid	i
 8002020:	e7fe      	b.n	8002020 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002022:	f000 fb4d 	bl	80026c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <xTaskResumeAll+0xf8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <xTaskResumeAll+0xf8>)
 800202e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <xTaskResumeAll+0xf8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d15b      	bne.n	80020f0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <xTaskResumeAll+0xfc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d057      	beq.n	80020f0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002040:	e02f      	b.n	80020a2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <xTaskResumeAll+0x100>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3318      	adds	r3, #24
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff fda5 	bl	8001b9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3304      	adds	r3, #4
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff fda0 	bl	8001b9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <xTaskResumeAll+0x104>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d903      	bls.n	8002072 <xTaskResumeAll+0x6a>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <xTaskResumeAll+0x104>)
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002076:	0013      	movs	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	189b      	adds	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4a24      	ldr	r2, [pc, #144]	; (8002110 <xTaskResumeAll+0x108>)
 8002080:	189a      	adds	r2, r3, r2
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3304      	adds	r3, #4
 8002086:	0019      	movs	r1, r3
 8002088:	0010      	movs	r0, r2
 800208a:	f7ff fd30 	bl	8001aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <xTaskResumeAll+0x10c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	429a      	cmp	r2, r3
 800209a:	d302      	bcc.n	80020a2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <xTaskResumeAll+0x110>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <xTaskResumeAll+0x100>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1cb      	bne.n	8002042 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80020b0:	f000 f9f4 	bl	800249c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <xTaskResumeAll+0x114>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00f      	beq.n	80020e0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80020c0:	f000 f82e 	bl	8002120 <xTaskIncrementTick>
 80020c4:	1e03      	subs	r3, r0, #0
 80020c6:	d002      	beq.n	80020ce <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <xTaskResumeAll+0x110>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f2      	bne.n	80020c0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <xTaskResumeAll+0x114>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <xTaskResumeAll+0x110>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80020ec:	f000 fad8 	bl	80026a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020f0:	f000 faf8 	bl	80026e4 <vPortExitCritical>

	return xAlreadyYielded;
 80020f4:	68bb      	ldr	r3, [r7, #8]
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	200004c4 	.word	0x200004c4
 8002104:	2000049c 	.word	0x2000049c
 8002108:	2000045c 	.word	0x2000045c
 800210c:	200004a4 	.word	0x200004a4
 8002110:	200003a0 	.word	0x200003a0
 8002114:	2000039c 	.word	0x2000039c
 8002118:	200004b0 	.word	0x200004b0
 800211c:	200004ac 	.word	0x200004ac

08002120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <xTaskIncrementTick+0x13c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d000      	beq.n	8002134 <xTaskIncrementTick+0x14>
 8002132:	e083      	b.n	800223c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002134:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <xTaskIncrementTick+0x140>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800213c:	4b48      	ldr	r3, [pc, #288]	; (8002260 <xTaskIncrementTick+0x140>)
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d117      	bne.n	8002178 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002148:	4b46      	ldr	r3, [pc, #280]	; (8002264 <xTaskIncrementTick+0x144>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <xTaskIncrementTick+0x36>
 8002152:	b672      	cpsid	i
 8002154:	e7fe      	b.n	8002154 <xTaskIncrementTick+0x34>
 8002156:	4b43      	ldr	r3, [pc, #268]	; (8002264 <xTaskIncrementTick+0x144>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4b42      	ldr	r3, [pc, #264]	; (8002268 <xTaskIncrementTick+0x148>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b40      	ldr	r3, [pc, #256]	; (8002264 <xTaskIncrementTick+0x144>)
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <xTaskIncrementTick+0x148>)
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	4b40      	ldr	r3, [pc, #256]	; (800226c <xTaskIncrementTick+0x14c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	4b3e      	ldr	r3, [pc, #248]	; (800226c <xTaskIncrementTick+0x14c>)
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f000 f992 	bl	800249c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002178:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <xTaskIncrementTick+0x150>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d34e      	bcc.n	8002220 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <xTaskIncrementTick+0x144>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <xTaskIncrementTick+0x70>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <xTaskIncrementTick+0x72>
 8002190:	2300      	movs	r3, #0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <xTaskIncrementTick+0x150>)
 8002198:	2201      	movs	r2, #1
 800219a:	4252      	negs	r2, r2
 800219c:	601a      	str	r2, [r3, #0]
					break;
 800219e:	e03f      	b.n	8002220 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <xTaskIncrementTick+0x144>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d203      	bcs.n	80021c0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <xTaskIncrementTick+0x150>)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	601a      	str	r2, [r3, #0]
						break;
 80021be:	e02f      	b.n	8002220 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3304      	adds	r3, #4
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff fcea 	bl	8001b9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3318      	adds	r3, #24
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff fce1 	bl	8001b9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <xTaskIncrementTick+0x154>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d903      	bls.n	80021f0 <xTaskIncrementTick+0xd0>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <xTaskIncrementTick+0x154>)
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	0013      	movs	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4a1e      	ldr	r2, [pc, #120]	; (8002278 <xTaskIncrementTick+0x158>)
 80021fe:	189a      	adds	r2, r3, r2
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3304      	adds	r3, #4
 8002204:	0019      	movs	r1, r3
 8002206:	0010      	movs	r0, r2
 8002208:	f7ff fc71 	bl	8001aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <xTaskIncrementTick+0x15c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	429a      	cmp	r2, r3
 8002218:	d3b3      	bcc.n	8002182 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800221a:	2301      	movs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800221e:	e7b0      	b.n	8002182 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <xTaskIncrementTick+0x15c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	4914      	ldr	r1, [pc, #80]	; (8002278 <xTaskIncrementTick+0x158>)
 8002228:	0013      	movs	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	189b      	adds	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	585b      	ldr	r3, [r3, r1]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d907      	bls.n	8002246 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e004      	b.n	8002246 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <xTaskIncrementTick+0x160>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <xTaskIncrementTick+0x160>)
 8002244:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <xTaskIncrementTick+0x164>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800224e:	2301      	movs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002252:	697b      	ldr	r3, [r7, #20]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b006      	add	sp, #24
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200004c4 	.word	0x200004c4
 8002260:	200004a0 	.word	0x200004a0
 8002264:	20000454 	.word	0x20000454
 8002268:	20000458 	.word	0x20000458
 800226c:	200004b4 	.word	0x200004b4
 8002270:	200004bc 	.word	0x200004bc
 8002274:	200004a4 	.word	0x200004a4
 8002278:	200003a0 	.word	0x200003a0
 800227c:	2000039c 	.word	0x2000039c
 8002280:	200004ac 	.word	0x200004ac
 8002284:	200004b0 	.word	0x200004b0

08002288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <vTaskSwitchContext+0x9c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <vTaskSwitchContext+0xa0>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800229c:	e03d      	b.n	800231a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <vTaskSwitchContext+0xa0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <vTaskSwitchContext+0xa4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	e007      	b.n	80022bc <vTaskSwitchContext+0x34>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <vTaskSwitchContext+0x2e>
 80022b2:	b672      	cpsid	i
 80022b4:	e7fe      	b.n	80022b4 <vTaskSwitchContext+0x2c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	491c      	ldr	r1, [pc, #112]	; (8002330 <vTaskSwitchContext+0xa8>)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	0013      	movs	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	189b      	adds	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	585b      	ldr	r3, [r3, r1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ee      	beq.n	80022ac <vTaskSwitchContext+0x24>
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	0013      	movs	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	189b      	adds	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <vTaskSwitchContext+0xa8>)
 80022da:	189b      	adds	r3, r3, r2
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	3308      	adds	r3, #8
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d104      	bne.n	80022fe <vTaskSwitchContext+0x76>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <vTaskSwitchContext+0xac>)
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <vTaskSwitchContext+0xa4>)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <vTaskSwitchContext+0xac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	334c      	adds	r3, #76	; 0x4c
 8002314:	001a      	movs	r2, r3
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <vTaskSwitchContext+0xb0>)
 8002318:	601a      	str	r2, [r3, #0]
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	200004c4 	.word	0x200004c4
 8002328:	200004b0 	.word	0x200004b0
 800232c:	200004a4 	.word	0x200004a4
 8002330:	200003a0 	.word	0x200003a0
 8002334:	2000039c 	.word	0x2000039c
 8002338:	20000010 	.word	0x20000010

0800233c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002344:	f000 f84e 	bl	80023e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <prvIdleTask+0x1c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d9f9      	bls.n	8002344 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002350:	f000 f9a6 	bl	80026a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002354:	e7f6      	b.n	8002344 <prvIdleTask+0x8>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	200003a0 	.word	0x200003a0

0800235c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	e00c      	b.n	8002382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	0013      	movs	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	189b      	adds	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <prvInitialiseTaskLists+0x68>)
 8002374:	189b      	adds	r3, r3, r2
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff fb90 	bl	8001a9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b06      	cmp	r3, #6
 8002386:	d9ef      	bls.n	8002368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <prvInitialiseTaskLists+0x6c>)
 800238a:	0018      	movs	r0, r3
 800238c:	f7ff fb86 	bl	8001a9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <prvInitialiseTaskLists+0x70>)
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff fb82 	bl	8001a9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <prvInitialiseTaskLists+0x74>)
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff fb7e 	bl	8001a9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <prvInitialiseTaskLists+0x78>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff fb7a 	bl	8001a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <prvInitialiseTaskLists+0x7c>)
 80023aa:	0018      	movs	r0, r3
 80023ac:	f7ff fb76 	bl	8001a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <prvInitialiseTaskLists+0x80>)
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <prvInitialiseTaskLists+0x6c>)
 80023b4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <prvInitialiseTaskLists+0x84>)
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <prvInitialiseTaskLists+0x70>)
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200003a0 	.word	0x200003a0
 80023c8:	2000042c 	.word	0x2000042c
 80023cc:	20000440 	.word	0x20000440
 80023d0:	2000045c 	.word	0x2000045c
 80023d4:	20000470 	.word	0x20000470
 80023d8:	20000488 	.word	0x20000488
 80023dc:	20000454 	.word	0x20000454
 80023e0:	20000458 	.word	0x20000458

080023e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023ea:	e01a      	b.n	8002422 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80023ec:	f000 f968 	bl	80026c0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <prvCheckTasksWaitingTermination+0x50>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff fbce 	bl	8001b9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <prvCheckTasksWaitingTermination+0x54>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1e5a      	subs	r2, r3, #1
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <prvCheckTasksWaitingTermination+0x54>)
 800240a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <prvCheckTasksWaitingTermination+0x58>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <prvCheckTasksWaitingTermination+0x58>)
 8002414:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002416:	f000 f965 	bl	80026e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f80f 	bl	8002440 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <prvCheckTasksWaitingTermination+0x58>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e0      	bne.n	80023ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000470 	.word	0x20000470
 8002438:	2000049c 	.word	0x2000049c
 800243c:	20000484 	.word	0x20000484

08002440 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	334c      	adds	r3, #76	; 0x4c
 800244c:	0018      	movs	r0, r3
 800244e:	f000 fbb1 	bl	8002bb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	22b1      	movs	r2, #177	; 0xb1
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	0018      	movs	r0, r3
 8002462:	f000 fa6b 	bl	800293c <vPortFree>
				vPortFree( pxTCB );
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	f000 fa67 	bl	800293c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800246e:	e010      	b.n	8002492 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	22b1      	movs	r2, #177	; 0xb1
 8002474:	5c9b      	ldrb	r3, [r3, r2]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d104      	bne.n	8002484 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 fa5d 	bl	800293c <vPortFree>
	}
 8002482:	e006      	b.n	8002492 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	22b1      	movs	r2, #177	; 0xb1
 8002488:	5c9b      	ldrb	r3, [r3, r2]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d001      	beq.n	8002492 <prvDeleteTCB+0x52>
 800248e:	b672      	cpsid	i
 8002490:	e7fe      	b.n	8002490 <prvDeleteTCB+0x50>
	}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b002      	add	sp, #8
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <prvResetNextTaskUnblockTime+0x40>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <prvResetNextTaskUnblockTime+0x14>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <prvResetNextTaskUnblockTime+0x16>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <prvResetNextTaskUnblockTime+0x44>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	4252      	negs	r2, r2
 80024bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024be:	e008      	b.n	80024d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <prvResetNextTaskUnblockTime+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <prvResetNextTaskUnblockTime+0x44>)
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	20000454 	.word	0x20000454
 80024e0:	200004bc 	.word	0x200004bc

080024e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <prvAddCurrentTaskToDelayedList+0x90>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <prvAddCurrentTaskToDelayedList+0x94>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7ff fb4f 	bl	8001b9e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3301      	adds	r3, #1
 8002504:	d10b      	bne.n	800251e <prvAddCurrentTaskToDelayedList+0x3a>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <prvAddCurrentTaskToDelayedList+0x94>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1d1a      	adds	r2, r3, #4
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <prvAddCurrentTaskToDelayedList+0x98>)
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f7ff fae9 	bl	8001aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800251c:	e026      	b.n	800256c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	18d3      	adds	r3, r2, r3
 8002524:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <prvAddCurrentTaskToDelayedList+0x94>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	429a      	cmp	r2, r3
 8002534:	d209      	bcs.n	800254a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <prvAddCurrentTaskToDelayedList+0x94>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3304      	adds	r3, #4
 8002540:	0019      	movs	r1, r3
 8002542:	0010      	movs	r0, r2
 8002544:	f7ff faf5 	bl	8001b32 <vListInsert>
}
 8002548:	e010      	b.n	800256c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <prvAddCurrentTaskToDelayedList+0xa0>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <prvAddCurrentTaskToDelayedList+0x94>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3304      	adds	r3, #4
 8002554:	0019      	movs	r1, r3
 8002556:	0010      	movs	r0, r2
 8002558:	f7ff faeb 	bl	8001b32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <prvAddCurrentTaskToDelayedList+0xa4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	d202      	bcs.n	800256c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	601a      	str	r2, [r3, #0]
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200004a0 	.word	0x200004a0
 8002578:	2000039c 	.word	0x2000039c
 800257c:	20000488 	.word	0x20000488
 8002580:	20000458 	.word	0x20000458
 8002584:	20000454 	.word	0x20000454
 8002588:	200004bc 	.word	0x200004bc

0800258c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3b04      	subs	r3, #4
 800259c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0452      	lsls	r2, r2, #17
 80025a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b04      	subs	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025b8:	4a08      	ldr	r2, [pc, #32]	; (80025dc <pxPortInitialiseStack+0x50>)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3b14      	subs	r3, #20
 80025c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3b20      	subs	r3, #32
 80025ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80025d0:	68fb      	ldr	r3, [r7, #12]
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	080025e1 	.word	0x080025e1

080025e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <prvTaskExitError+0x2c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	d001      	beq.n	80025f6 <prvTaskExitError+0x16>
 80025f2:	b672      	cpsid	i
 80025f4:	e7fe      	b.n	80025f4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80025f6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0fc      	beq.n	80025fa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	2000000c 	.word	0x2000000c

08002610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	0000      	movs	r0, r0
 800261c:	0000      	movs	r0, r0
	...

08002620 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002620:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <pxCurrentTCBConst2>)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	3020      	adds	r0, #32
 8002628:	f380 8809 	msr	PSP, r0
 800262c:	2002      	movs	r0, #2
 800262e:	f380 8814 	msr	CONTROL, r0
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002638:	46ae      	mov	lr, r5
 800263a:	bc08      	pop	{r3}
 800263c:	bc04      	pop	{r2}
 800263e:	b662      	cpsie	i
 8002640:	4718      	bx	r3
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46c0      	nop			; (mov r8, r8)

08002650 <pxCurrentTCBConst2>:
 8002650:	2000039c 	.word	0x2000039c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46c0      	nop			; (mov r8, r8)

08002658 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <xPortStartScheduler+0x40>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <xPortStartScheduler+0x40>)
 8002662:	21ff      	movs	r1, #255	; 0xff
 8002664:	0409      	lsls	r1, r1, #16
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <xPortStartScheduler+0x40>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <xPortStartScheduler+0x40>)
 8002670:	21ff      	movs	r1, #255	; 0xff
 8002672:	0609      	lsls	r1, r1, #24
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002678:	f000 f898 	bl	80027ac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <xPortStartScheduler+0x44>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002682:	f7ff ffcd 	bl	8002620 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002686:	f7ff fdff 	bl	8002288 <vTaskSwitchContext>
	prvTaskExitError();
 800268a:	f7ff ffa9 	bl	80025e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	e000ed20 	.word	0xe000ed20
 800269c:	2000000c 	.word	0x2000000c

080026a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <vPortYield+0x1c>)
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	0552      	lsls	r2, r2, #21
 80026aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80026ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80026b0:	f3bf 8f6f 	isb	sy
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80026c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <vPortEnterCritical+0x20>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <vPortEnterCritical+0x20>)
 80026ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80026d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80026d4:	f3bf 8f6f 	isb	sy
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <vPortExitCritical+0x2c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <vPortExitCritical+0x10>
 80026f0:	b672      	cpsid	i
 80026f2:	e7fe      	b.n	80026f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <vPortExitCritical+0x2c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <vPortExitCritical+0x2c>)
 80026fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <vPortExitCritical+0x2c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d100      	bne.n	8002708 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002706:	b662      	cpsie	i
    }
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	2000000c 	.word	0x2000000c

08002714 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002714:	f3ef 8010 	mrs	r0, PRIMASK
 8002718:	b672      	cpsid	i
 800271a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	0018      	movs	r0, r3

08002720 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002720:	f380 8810 	msr	PRIMASK, r0
 8002724:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8002726:	46c0      	nop			; (mov r8, r8)
	...

08002730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002730:	f3ef 8009 	mrs	r0, PSP
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <pxCurrentTCBConst>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	3820      	subs	r0, #32
 800273a:	6010      	str	r0, [r2, #0]
 800273c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800273e:	4644      	mov	r4, r8
 8002740:	464d      	mov	r5, r9
 8002742:	4656      	mov	r6, sl
 8002744:	465f      	mov	r7, fp
 8002746:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002748:	b508      	push	{r3, lr}
 800274a:	b672      	cpsid	i
 800274c:	f7ff fd9c 	bl	8002288 <vTaskSwitchContext>
 8002750:	b662      	cpsie	i
 8002752:	bc0c      	pop	{r2, r3}
 8002754:	6811      	ldr	r1, [r2, #0]
 8002756:	6808      	ldr	r0, [r1, #0]
 8002758:	3010      	adds	r0, #16
 800275a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800275c:	46a0      	mov	r8, r4
 800275e:	46a9      	mov	r9, r5
 8002760:	46b2      	mov	sl, r6
 8002762:	46bb      	mov	fp, r7
 8002764:	f380 8809 	msr	PSP, r0
 8002768:	3820      	subs	r0, #32
 800276a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800276c:	4718      	bx	r3
 800276e:	46c0      	nop			; (mov r8, r8)

08002770 <pxCurrentTCBConst>:
 8002770:	2000039c 	.word	0x2000039c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46c0      	nop			; (mov r8, r8)

08002778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800277e:	f7ff ffc9 	bl	8002714 <ulSetInterruptMaskFromISR>
 8002782:	0003      	movs	r3, r0
 8002784:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002786:	f7ff fccb 	bl	8002120 <xTaskIncrementTick>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d003      	beq.n	8002796 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <SysTick_Handler+0x30>)
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0552      	lsls	r2, r2, #21
 8002794:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f7ff ffc1 	bl	8002720 <vClearInterruptMaskFromISR>
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	e000ed04 	.word	0xe000ed04

080027ac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <prvSetupTimerInterrupt+0x34>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <prvSetupTimerInterrupt+0x38>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <prvSetupTimerInterrupt+0x3c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	22fa      	movs	r2, #250	; 0xfa
 80027c2:	0091      	lsls	r1, r2, #2
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fd fc9f 	bl	8000108 <__udivsi3>
 80027ca:	0003      	movs	r3, r0
 80027cc:	001a      	movs	r2, r3
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <prvSetupTimerInterrupt+0x40>)
 80027d0:	3a01      	subs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <prvSetupTimerInterrupt+0x34>)
 80027d6:	2207      	movs	r2, #7
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	e000e010 	.word	0xe000e010
 80027e4:	e000e018 	.word	0xe000e018
 80027e8:	20000000 	.word	0x20000000
 80027ec:	e000e014 	.word	0xe000e014

080027f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80027fc:	f7ff fbf8 	bl	8001ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002800:	4b49      	ldr	r3, [pc, #292]	; (8002928 <pvPortMalloc+0x138>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002808:	f000 f8e0 	bl	80029cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800280c:	4b47      	ldr	r3, [pc, #284]	; (800292c <pvPortMalloc+0x13c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4013      	ands	r3, r2
 8002814:	d000      	beq.n	8002818 <pvPortMalloc+0x28>
 8002816:	e079      	b.n	800290c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800281e:	2208      	movs	r2, #8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	189b      	adds	r3, r3, r2
 8002824:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2207      	movs	r2, #7
 800282a:	4013      	ands	r3, r2
 800282c:	d00a      	beq.n	8002844 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2207      	movs	r2, #7
 8002832:	4393      	bics	r3, r2
 8002834:	3308      	adds	r3, #8
 8002836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2207      	movs	r2, #7
 800283c:	4013      	ands	r3, r2
 800283e:	d001      	beq.n	8002844 <pvPortMalloc+0x54>
 8002840:	b672      	cpsid	i
 8002842:	e7fe      	b.n	8002842 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d060      	beq.n	800290c <pvPortMalloc+0x11c>
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <pvPortMalloc+0x140>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	d85b      	bhi.n	800290c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <pvPortMalloc+0x144>)
 8002856:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <pvPortMalloc+0x144>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800285e:	e004      	b.n	800286a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d903      	bls.n	800287c <pvPortMalloc+0x8c>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f1      	bne.n	8002860 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <pvPortMalloc+0x138>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	429a      	cmp	r2, r3
 8002884:	d042      	beq.n	800290c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2208      	movs	r2, #8
 800288c:	189b      	adds	r3, r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1ad2      	subs	r2, r2, r3
 80028a0:	2308      	movs	r3, #8
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d916      	bls.n	80028d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	18d3      	adds	r3, r2, r3
 80028ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	d001      	beq.n	80028bc <pvPortMalloc+0xcc>
 80028b8:	b672      	cpsid	i
 80028ba:	e7fe      	b.n	80028ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f8db 	bl	8002a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <pvPortMalloc+0x140>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <pvPortMalloc+0x140>)
 80028e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <pvPortMalloc+0x140>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <pvPortMalloc+0x148>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d203      	bcs.n	80028f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <pvPortMalloc+0x140>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <pvPortMalloc+0x148>)
 80028f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <pvPortMalloc+0x13c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	431a      	orrs	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800290c:	f7ff fb7c 	bl	8002008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2207      	movs	r2, #7
 8002914:	4013      	ands	r3, r2
 8002916:	d001      	beq.n	800291c <pvPortMalloc+0x12c>
 8002918:	b672      	cpsid	i
 800291a:	e7fe      	b.n	800291a <pvPortMalloc+0x12a>
	return pvReturn;
 800291c:	68fb      	ldr	r3, [r7, #12]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b006      	add	sp, #24
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	200010d0 	.word	0x200010d0
 800292c:	200010dc 	.word	0x200010dc
 8002930:	200010d4 	.word	0x200010d4
 8002934:	200010c8 	.word	0x200010c8
 8002938:	200010d8 	.word	0x200010d8

0800293c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d035      	beq.n	80029ba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800294e:	2308      	movs	r3, #8
 8002950:	425b      	negs	r3, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <vPortFree+0x88>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4013      	ands	r3, r2
 8002966:	d101      	bne.n	800296c <vPortFree+0x30>
 8002968:	b672      	cpsid	i
 800296a:	e7fe      	b.n	800296a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <vPortFree+0x3c>
 8002974:	b672      	cpsid	i
 8002976:	e7fe      	b.n	8002976 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <vPortFree+0x88>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4013      	ands	r3, r2
 8002982:	d01a      	beq.n	80029ba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d116      	bne.n	80029ba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <vPortFree+0x88>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800299c:	f7ff fb28 	bl	8001ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <vPortFree+0x8c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	18d2      	adds	r2, r2, r3
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <vPortFree+0x8c>)
 80029ac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 f86b 	bl	8002a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80029b6:	f7ff fb27 	bl	8002008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	200010dc 	.word	0x200010dc
 80029c8:	200010d4 	.word	0x200010d4

080029cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029d2:	23c0      	movs	r3, #192	; 0xc0
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <prvHeapInit+0xa8>)
 80029da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2207      	movs	r2, #7
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00c      	beq.n	80029fe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3307      	adds	r3, #7
 80029e8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2207      	movs	r2, #7
 80029ee:	4393      	bics	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <prvHeapInit+0xa8>)
 80029fa:	18d3      	adds	r3, r2, r3
 80029fc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <prvHeapInit+0xac>)
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <prvHeapInit+0xac>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	18d3      	adds	r3, r2, r3
 8002a14:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a16:	2208      	movs	r2, #8
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2207      	movs	r2, #7
 8002a22:	4393      	bics	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <prvHeapInit+0xb0>)
 8002a2a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <prvHeapInit+0xb0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <prvHeapInit+0xb0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	1ad2      	subs	r2, r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <prvHeapInit+0xb0>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <prvHeapInit+0xb4>)
 8002a58:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <prvHeapInit+0xb8>)
 8002a60:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <prvHeapInit+0xbc>)
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	0612      	lsls	r2, r2, #24
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	200004c8 	.word	0x200004c8
 8002a78:	200010c8 	.word	0x200010c8
 8002a7c:	200010d0 	.word	0x200010d0
 8002a80:	200010d8 	.word	0x200010d8
 8002a84:	200010d4 	.word	0x200010d4
 8002a88:	200010dc 	.word	0x200010dc

08002a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <prvInsertBlockIntoFreeList+0xa8>)
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e002      	b.n	8002aa0 <prvInsertBlockIntoFreeList+0x14>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d8f7      	bhi.n	8002a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	18d3      	adds	r3, r2, r3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d108      	bne.n	8002ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	18d2      	adds	r2, r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	18d2      	adds	r2, r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d118      	bne.n	8002b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <prvInsertBlockIntoFreeList+0xac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d00d      	beq.n	8002b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	18d2      	adds	r2, r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e008      	b.n	8002b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <prvInsertBlockIntoFreeList+0xac>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e003      	b.n	8002b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d002      	beq.n	8002b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	200010c8 	.word	0x200010c8
 8002b38:	200010d0 	.word	0x200010d0

08002b3c <__libc_init_array>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	2600      	movs	r6, #0
 8002b40:	4d0c      	ldr	r5, [pc, #48]	; (8002b74 <__libc_init_array+0x38>)
 8002b42:	4c0d      	ldr	r4, [pc, #52]	; (8002b78 <__libc_init_array+0x3c>)
 8002b44:	1b64      	subs	r4, r4, r5
 8002b46:	10a4      	asrs	r4, r4, #2
 8002b48:	42a6      	cmp	r6, r4
 8002b4a:	d109      	bne.n	8002b60 <__libc_init_array+0x24>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	f000 f8f1 	bl	8002d34 <_init>
 8002b52:	4d0a      	ldr	r5, [pc, #40]	; (8002b7c <__libc_init_array+0x40>)
 8002b54:	4c0a      	ldr	r4, [pc, #40]	; (8002b80 <__libc_init_array+0x44>)
 8002b56:	1b64      	subs	r4, r4, r5
 8002b58:	10a4      	asrs	r4, r4, #2
 8002b5a:	42a6      	cmp	r6, r4
 8002b5c:	d105      	bne.n	8002b6a <__libc_init_array+0x2e>
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
 8002b60:	00b3      	lsls	r3, r6, #2
 8002b62:	58eb      	ldr	r3, [r5, r3]
 8002b64:	4798      	blx	r3
 8002b66:	3601      	adds	r6, #1
 8002b68:	e7ee      	b.n	8002b48 <__libc_init_array+0xc>
 8002b6a:	00b3      	lsls	r3, r6, #2
 8002b6c:	58eb      	ldr	r3, [r5, r3]
 8002b6e:	4798      	blx	r3
 8002b70:	3601      	adds	r6, #1
 8002b72:	e7f2      	b.n	8002b5a <__libc_init_array+0x1e>
 8002b74:	08002e5c 	.word	0x08002e5c
 8002b78:	08002e5c 	.word	0x08002e5c
 8002b7c:	08002e5c 	.word	0x08002e5c
 8002b80:	08002e60 	.word	0x08002e60

08002b84 <__retarget_lock_acquire_recursive>:
 8002b84:	4770      	bx	lr

08002b86 <__retarget_lock_release_recursive>:
 8002b86:	4770      	bx	lr

08002b88 <memset>:
 8002b88:	0003      	movs	r3, r0
 8002b8a:	1882      	adds	r2, r0, r2
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d100      	bne.n	8002b92 <memset+0xa>
 8002b90:	4770      	bx	lr
 8002b92:	7019      	strb	r1, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	e7f9      	b.n	8002b8c <memset+0x4>

08002b98 <cleanup_glue>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	000d      	movs	r5, r1
 8002b9c:	6809      	ldr	r1, [r1, #0]
 8002b9e:	0004      	movs	r4, r0
 8002ba0:	2900      	cmp	r1, #0
 8002ba2:	d001      	beq.n	8002ba8 <cleanup_glue+0x10>
 8002ba4:	f7ff fff8 	bl	8002b98 <cleanup_glue>
 8002ba8:	0029      	movs	r1, r5
 8002baa:	0020      	movs	r0, r4
 8002bac:	f000 f878 	bl	8002ca0 <_free_r>
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002bb4 <_reclaim_reent>:
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <_reclaim_reent+0xc8>)
 8002bb6:	b570      	push	{r4, r5, r6, lr}
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0004      	movs	r4, r0
 8002bbc:	4283      	cmp	r3, r0
 8002bbe:	d049      	beq.n	8002c54 <_reclaim_reent+0xa0>
 8002bc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <_reclaim_reent+0x28>
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	42ab      	cmp	r3, r5
 8002bcc:	d147      	bne.n	8002c5e <_reclaim_reent+0xaa>
 8002bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	2900      	cmp	r1, #0
 8002bd4:	d002      	beq.n	8002bdc <_reclaim_reent+0x28>
 8002bd6:	0020      	movs	r0, r4
 8002bd8:	f000 f862 	bl	8002ca0 <_free_r>
 8002bdc:	6961      	ldr	r1, [r4, #20]
 8002bde:	2900      	cmp	r1, #0
 8002be0:	d002      	beq.n	8002be8 <_reclaim_reent+0x34>
 8002be2:	0020      	movs	r0, r4
 8002be4:	f000 f85c 	bl	8002ca0 <_free_r>
 8002be8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bea:	2900      	cmp	r1, #0
 8002bec:	d002      	beq.n	8002bf4 <_reclaim_reent+0x40>
 8002bee:	0020      	movs	r0, r4
 8002bf0:	f000 f856 	bl	8002ca0 <_free_r>
 8002bf4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002bf6:	2900      	cmp	r1, #0
 8002bf8:	d002      	beq.n	8002c00 <_reclaim_reent+0x4c>
 8002bfa:	0020      	movs	r0, r4
 8002bfc:	f000 f850 	bl	8002ca0 <_free_r>
 8002c00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002c02:	2900      	cmp	r1, #0
 8002c04:	d002      	beq.n	8002c0c <_reclaim_reent+0x58>
 8002c06:	0020      	movs	r0, r4
 8002c08:	f000 f84a 	bl	8002ca0 <_free_r>
 8002c0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002c0e:	2900      	cmp	r1, #0
 8002c10:	d002      	beq.n	8002c18 <_reclaim_reent+0x64>
 8002c12:	0020      	movs	r0, r4
 8002c14:	f000 f844 	bl	8002ca0 <_free_r>
 8002c18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002c1a:	2900      	cmp	r1, #0
 8002c1c:	d002      	beq.n	8002c24 <_reclaim_reent+0x70>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f000 f83e 	bl	8002ca0 <_free_r>
 8002c24:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002c26:	2900      	cmp	r1, #0
 8002c28:	d002      	beq.n	8002c30 <_reclaim_reent+0x7c>
 8002c2a:	0020      	movs	r0, r4
 8002c2c:	f000 f838 	bl	8002ca0 <_free_r>
 8002c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c32:	2900      	cmp	r1, #0
 8002c34:	d002      	beq.n	8002c3c <_reclaim_reent+0x88>
 8002c36:	0020      	movs	r0, r4
 8002c38:	f000 f832 	bl	8002ca0 <_free_r>
 8002c3c:	69a3      	ldr	r3, [r4, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <_reclaim_reent+0xa0>
 8002c42:	0020      	movs	r0, r4
 8002c44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c46:	4798      	blx	r3
 8002c48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002c4a:	2900      	cmp	r1, #0
 8002c4c:	d002      	beq.n	8002c54 <_reclaim_reent+0xa0>
 8002c4e:	0020      	movs	r0, r4
 8002c50:	f7ff ffa2 	bl	8002b98 <cleanup_glue>
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	5949      	ldr	r1, [r1, r5]
 8002c58:	2900      	cmp	r1, #0
 8002c5a:	d108      	bne.n	8002c6e <_reclaim_reent+0xba>
 8002c5c:	3504      	adds	r5, #4
 8002c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c60:	68d9      	ldr	r1, [r3, #12]
 8002c62:	2d80      	cmp	r5, #128	; 0x80
 8002c64:	d1f7      	bne.n	8002c56 <_reclaim_reent+0xa2>
 8002c66:	0020      	movs	r0, r4
 8002c68:	f000 f81a 	bl	8002ca0 <_free_r>
 8002c6c:	e7af      	b.n	8002bce <_reclaim_reent+0x1a>
 8002c6e:	680e      	ldr	r6, [r1, #0]
 8002c70:	0020      	movs	r0, r4
 8002c72:	f000 f815 	bl	8002ca0 <_free_r>
 8002c76:	0031      	movs	r1, r6
 8002c78:	e7ee      	b.n	8002c58 <_reclaim_reent+0xa4>
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	20000010 	.word	0x20000010

08002c80 <__malloc_lock>:
 8002c80:	b510      	push	{r4, lr}
 8002c82:	4802      	ldr	r0, [pc, #8]	; (8002c8c <__malloc_lock+0xc>)
 8002c84:	f7ff ff7e 	bl	8002b84 <__retarget_lock_acquire_recursive>
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	200010e0 	.word	0x200010e0

08002c90 <__malloc_unlock>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4802      	ldr	r0, [pc, #8]	; (8002c9c <__malloc_unlock+0xc>)
 8002c94:	f7ff ff77 	bl	8002b86 <__retarget_lock_release_recursive>
 8002c98:	bd10      	pop	{r4, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	200010e0 	.word	0x200010e0

08002ca0 <_free_r>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	0005      	movs	r5, r0
 8002ca4:	2900      	cmp	r1, #0
 8002ca6:	d010      	beq.n	8002cca <_free_r+0x2a>
 8002ca8:	1f0c      	subs	r4, r1, #4
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da00      	bge.n	8002cb2 <_free_r+0x12>
 8002cb0:	18e4      	adds	r4, r4, r3
 8002cb2:	0028      	movs	r0, r5
 8002cb4:	f7ff ffe4 	bl	8002c80 <__malloc_lock>
 8002cb8:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <_free_r+0x90>)
 8002cba:	6813      	ldr	r3, [r2, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <_free_r+0x2c>
 8002cc0:	6063      	str	r3, [r4, #4]
 8002cc2:	6014      	str	r4, [r2, #0]
 8002cc4:	0028      	movs	r0, r5
 8002cc6:	f7ff ffe3 	bl	8002c90 <__malloc_unlock>
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	42a3      	cmp	r3, r4
 8002cce:	d908      	bls.n	8002ce2 <_free_r+0x42>
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	1860      	adds	r0, r4, r1
 8002cd4:	4283      	cmp	r3, r0
 8002cd6:	d1f3      	bne.n	8002cc0 <_free_r+0x20>
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	1841      	adds	r1, r0, r1
 8002cde:	6021      	str	r1, [r4, #0]
 8002ce0:	e7ee      	b.n	8002cc0 <_free_r+0x20>
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <_free_r+0x4e>
 8002cea:	42a3      	cmp	r3, r4
 8002cec:	d9f9      	bls.n	8002ce2 <_free_r+0x42>
 8002cee:	6811      	ldr	r1, [r2, #0]
 8002cf0:	1850      	adds	r0, r2, r1
 8002cf2:	42a0      	cmp	r0, r4
 8002cf4:	d10b      	bne.n	8002d0e <_free_r+0x6e>
 8002cf6:	6820      	ldr	r0, [r4, #0]
 8002cf8:	1809      	adds	r1, r1, r0
 8002cfa:	1850      	adds	r0, r2, r1
 8002cfc:	6011      	str	r1, [r2, #0]
 8002cfe:	4283      	cmp	r3, r0
 8002d00:	d1e0      	bne.n	8002cc4 <_free_r+0x24>
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	1841      	adds	r1, r0, r1
 8002d08:	6011      	str	r1, [r2, #0]
 8002d0a:	6053      	str	r3, [r2, #4]
 8002d0c:	e7da      	b.n	8002cc4 <_free_r+0x24>
 8002d0e:	42a0      	cmp	r0, r4
 8002d10:	d902      	bls.n	8002d18 <_free_r+0x78>
 8002d12:	230c      	movs	r3, #12
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	e7d5      	b.n	8002cc4 <_free_r+0x24>
 8002d18:	6821      	ldr	r1, [r4, #0]
 8002d1a:	1860      	adds	r0, r4, r1
 8002d1c:	4283      	cmp	r3, r0
 8002d1e:	d103      	bne.n	8002d28 <_free_r+0x88>
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	1841      	adds	r1, r0, r1
 8002d26:	6021      	str	r1, [r4, #0]
 8002d28:	6063      	str	r3, [r4, #4]
 8002d2a:	6054      	str	r4, [r2, #4]
 8002d2c:	e7ca      	b.n	8002cc4 <_free_r+0x24>
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	200010e4 	.word	0x200010e4

08002d34 <_init>:
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3a:	bc08      	pop	{r3}
 8002d3c:	469e      	mov	lr, r3
 8002d3e:	4770      	bx	lr

08002d40 <_fini>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr
